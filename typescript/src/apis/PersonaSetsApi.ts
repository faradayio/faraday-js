/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PersonaSet,
    PersonaSetFromJSON,
    PersonaSetToJSON,
} from '../models';

export interface CreateCohortPersonaSetRequest {
    cohortId: string;
}

export interface GetCohortPersonaSetsRequest {
    cohortId: string;
}

export interface GetPersonaSetRequest {
    personaSetId: string;
}

/**
 * 
 */
export class PersonaSetsApi extends runtime.BaseAPI {

    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    private async createCohortPersonaSetRaw(requestParameters: CreateCohortPersonaSetRequest, ): Promise<runtime.ApiResponse<PersonaSet>> {
        if (requestParameters.cohortId === null || requestParameters.cohortId === undefined) {
            throw new runtime.RequiredError('cohortId','Required parameter requestParameters.cohortId was null or undefined when calling createCohortPersonaSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cohorts/{cohort_id}/persona_sets`.replace(`{${"cohort_id"}}`, encodeURIComponent(String(requestParameters.cohortId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonaSetFromJSON(jsonValue));
    }

    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    async createCohortPersonaSet(cohortId: string, ): Promise<PersonaSet> {
        const response = await this.createCohortPersonaSetRaw({ cohortId: cohortId }, );
        return await response.value();
    }

    /**
     * A list of persona sets available for a given cohort
     * List persona sets by cohort
     */
    private async getCohortPersonaSetsRaw(requestParameters: GetCohortPersonaSetsRequest, ): Promise<runtime.ApiResponse<Array<PersonaSet>>> {
        if (requestParameters.cohortId === null || requestParameters.cohortId === undefined) {
            throw new runtime.RequiredError('cohortId','Required parameter requestParameters.cohortId was null or undefined when calling getCohortPersonaSets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cohorts/{cohort_id}/persona_sets`.replace(`{${"cohort_id"}}`, encodeURIComponent(String(requestParameters.cohortId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonaSetFromJSON));
    }

    /**
     * A list of persona sets available for a given cohort
     * List persona sets by cohort
     */
    async getCohortPersonaSets(cohortId: string, ): Promise<Array<PersonaSet>> {
        const response = await this.getCohortPersonaSetsRaw({ cohortId: cohortId }, );
        return await response.value();
    }

    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    private async getPersonaSetRaw(requestParameters: GetPersonaSetRequest, ): Promise<runtime.ApiResponse<PersonaSet>> {
        if (requestParameters.personaSetId === null || requestParameters.personaSetId === undefined) {
            throw new runtime.RequiredError('personaSetId','Required parameter requestParameters.personaSetId was null or undefined when calling getPersonaSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/persona_sets/{persona_set_id}`.replace(`{${"persona_set_id"}}`, encodeURIComponent(String(requestParameters.personaSetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonaSetFromJSON(jsonValue));
    }

    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    async getPersonaSet(personaSetId: string, ): Promise<PersonaSet> {
        const response = await this.getPersonaSetRaw({ personaSetId: personaSetId }, );
        return await response.value();
    }

}
