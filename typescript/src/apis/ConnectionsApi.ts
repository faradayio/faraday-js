/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Connection,
    ConnectionFromJSON,
    ConnectionToJSON,
    ConnectionPost,
    ConnectionPostFromJSON,
    ConnectionPostToJSON,
} from '../models';

export interface CreateConnectionRequest {
    connectionFields: ConnectionPost;
}

export interface GetConnectionRequest {
    connectionId: string;
}

/**
 * 
 */
export class ConnectionsApi extends runtime.BaseAPI {

    /**
     * Add a new connection
     * Create connection
     */
    private async createConnectionRaw(requestParameters: CreateConnectionRequest, ): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.connectionFields === null || requestParameters.connectionFields === undefined) {
            throw new runtime.RequiredError('connectionFields','Required parameter requestParameters.connectionFields was null or undefined when calling createConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectionPostToJSON(requestParameters.connectionFields),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * Add a new connection
     * Create connection
     */
    async createConnection(connectionFields: ConnectionPost, ): Promise<Connection> {
        const response = await this.createConnectionRaw({ connectionFields: connectionFields }, );
        return await response.value();
    }

    /**
     * Get details on a specific connection
     * Retrieve a connection
     */
    private async getConnectionRaw(requestParameters: GetConnectionRequest, ): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling getConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/{connection_id}`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * Get details on a specific connection
     * Retrieve a connection
     */
    async getConnection(connectionId: string, ): Promise<Connection> {
        const response = await this.getConnectionRaw({ connectionId: connectionId }, );
        return await response.value();
    }

    /**
     * Get a list of connections defined on the account
     * List connections
     */
    private async getConnectionsRaw(): Promise<runtime.ApiResponse<Array<Connection>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConnectionFromJSON));
    }

    /**
     * Get a list of connections defined on the account
     * List connections
     */
    async getConnections(): Promise<Array<Connection>> {
        const response = await this.getConnectionsRaw();
        return await response.value();
    }

}
