"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutcomesApi = void 0;
const runtime = require("../runtime");
/**
 *
 */
class OutcomesApi extends runtime.BaseAPI {
    /**
     * Archive a outcome
     * Archive a outcome
     */
    archiveOutcomeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeId === null || requestParameters.outcomeId === undefined) {
                throw new runtime.RequiredError('outcomeId', 'Required parameter requestParameters.outcomeId was null or undefined when calling archiveOutcome.');
            }
            if (requestParameters.archiveConfig === null || requestParameters.archiveConfig === undefined) {
                throw new runtime.RequiredError('archiveConfig', 'Required parameter requestParameters.archiveConfig was null or undefined when calling archiveOutcome.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes/{outcome_id}/archive`.replace(`{${"outcome_id"}}`, encodeURIComponent(String(requestParameters.outcomeId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.archiveConfig,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Archive a outcome
     * Archive a outcome
     */
    archiveOutcome(outcomeId, archiveConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.archiveOutcomeRaw({ outcomeId: outcomeId, archiveConfig: archiveConfig });
        });
    }
    /**
     * Add a new outcome (defined as a prediction of how likely individuals are to transition from one cohort to another)
     * Create outcome
     */
    createOutcomeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeFields === null || requestParameters.outcomeFields === undefined) {
                throw new runtime.RequiredError('outcomeFields', 'Required parameter requestParameters.outcomeFields was null or undefined when calling createOutcome.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.outcomeFields,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Add a new outcome (defined as a prediction of how likely individuals are to transition from one cohort to another)
     * Create outcome
     */
    createOutcome(outcomeFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createOutcomeRaw({ outcomeFields: outcomeFields });
            return yield response.value();
        });
    }
    /**
     * Delete an outcome
     */
    deleteOutcomeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeId === null || requestParameters.outcomeId === undefined) {
                throw new runtime.RequiredError('outcomeId', 'Required parameter requestParameters.outcomeId was null or undefined when calling deleteOutcome.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes/{outcome_id}`.replace(`{${"outcome_id"}}`, encodeURIComponent(String(requestParameters.outcomeId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete an outcome
     */
    deleteOutcome(outcomeId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteOutcomeRaw({ outcomeId: outcomeId });
        });
    }
    /**
     * Get details on a specific outcome
     * Retrieve an outcome
     */
    getOutcomeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeId === null || requestParameters.outcomeId === undefined) {
                throw new runtime.RequiredError('outcomeId', 'Required parameter requestParameters.outcomeId was null or undefined when calling getOutcome.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes/{outcome_id}`.replace(`{${"outcome_id"}}`, encodeURIComponent(String(requestParameters.outcomeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get details on a specific outcome
     * Retrieve an outcome
     */
    getOutcome(outcomeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOutcomeRaw({ outcomeId: outcomeId });
            return yield response.value();
        });
    }
    /**
     * Get details on a specific outcome\'s analysis report on model performance, bias, etc.
     * Retrieve an outcome\'s analysis
     */
    getOutcomeAnalysisRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeId === null || requestParameters.outcomeId === undefined) {
                throw new runtime.RequiredError('outcomeId', 'Required parameter requestParameters.outcomeId was null or undefined when calling getOutcomeAnalysis.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes/{outcome_id}/analysis`.replace(`{${"outcome_id"}}`, encodeURIComponent(String(requestParameters.outcomeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get details on a specific outcome\'s analysis report on model performance, bias, etc.
     * Retrieve an outcome\'s analysis
     */
    getOutcomeAnalysis(outcomeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOutcomeAnalysisRaw({ outcomeId: outcomeId });
            return yield response.value();
        });
    }
    /**
     * Download an HTML report containing information such as the objective of the model, performance, and important features
     * Retrieve outcome report
     */
    getOutcomeDownloadRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeId === null || requestParameters.outcomeId === undefined) {
                throw new runtime.RequiredError('outcomeId', 'Required parameter requestParameters.outcomeId was null or undefined when calling getOutcomeDownload.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes/{outcome_id}/report.html`.replace(`{${"outcome_id"}}`, encodeURIComponent(String(requestParameters.outcomeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Download an HTML report containing information such as the objective of the model, performance, and important features
     * Retrieve outcome report
     */
    getOutcomeDownload(outcomeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOutcomeDownloadRaw({ outcomeId: outcomeId });
            return yield response.value();
        });
    }
    /**
     * Get a list of outcomes defined on the account
     * List outcomes
     */
    getOutcomesRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get a list of outcomes defined on the account
     * List outcomes
     */
    getOutcomes() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOutcomesRaw();
            return yield response.value();
        });
    }
    /**
     * Unarchive a outcome
     * Unarchive a outcome
     */
    unarchiveOutcomeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeId === null || requestParameters.outcomeId === undefined) {
                throw new runtime.RequiredError('outcomeId', 'Required parameter requestParameters.outcomeId was null or undefined when calling unarchiveOutcome.');
            }
            if (requestParameters.archiveConfig === null || requestParameters.archiveConfig === undefined) {
                throw new runtime.RequiredError('archiveConfig', 'Required parameter requestParameters.archiveConfig was null or undefined when calling unarchiveOutcome.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes/{outcome_id}/unarchive`.replace(`{${"outcome_id"}}`, encodeURIComponent(String(requestParameters.outcomeId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.archiveConfig,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unarchive a outcome
     * Unarchive a outcome
     */
    unarchiveOutcome(outcomeId, archiveConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.unarchiveOutcomeRaw({ outcomeId: outcomeId, archiveConfig: archiveConfig });
        });
    }
    /**
     * Edit configuration of an existing outcome
     * Edit an outcome
     */
    updateOutcomeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outcomeId === null || requestParameters.outcomeId === undefined) {
                throw new runtime.RequiredError('outcomeId', 'Required parameter requestParameters.outcomeId was null or undefined when calling updateOutcome.');
            }
            if (requestParameters.outcomeFields === null || requestParameters.outcomeFields === undefined) {
                throw new runtime.RequiredError('outcomeFields', 'Required parameter requestParameters.outcomeFields was null or undefined when calling updateOutcome.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/outcomes/{outcome_id}`.replace(`{${"outcome_id"}}`, encodeURIComponent(String(requestParameters.outcomeId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.outcomeFields,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Edit configuration of an existing outcome
     * Edit an outcome
     */
    updateOutcome(outcomeId, outcomeFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateOutcomeRaw({ outcomeId: outcomeId, outcomeFields: outcomeFields });
            return yield response.value();
        });
    }
}
exports.OutcomesApi = OutcomesApi;
