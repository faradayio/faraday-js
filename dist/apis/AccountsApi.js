"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class AccountsApi extends runtime.BaseAPI {
    /**
     * Create a subaccount.
     * Create account
     */
    createAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountFields === null || requestParameters.accountFields === undefined) {
                throw new runtime.RequiredError('accountFields', 'Required parameter requestParameters.accountFields was null or undefined when calling createAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.AccountPostToJSON(requestParameters.accountFields),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AccountFromJSON(jsonValue));
        });
    }
    /**
     * Create a subaccount.
     * Create account
     */
    createAccount(accountFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createAccountRaw({ accountFields: accountFields });
            return yield response.value();
        });
    }
    /**
     * Request an account deletion. In 24 hours, the account and all resources associated with it will be deleted. Contact support within the 24 hour window if you wish to reverse this.
     * Delete an account
     */
    deleteAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling deleteAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Request an account deletion. In 24 hours, the account and all resources associated with it will be deleted. Contact support within the 24 hour window if you wish to reverse this.
     * Delete an account
     */
    deleteAccount(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteAccountRaw({ accountId: accountId });
        });
    }
    /**
     * Get details on a specific account. This must be an account controlled by your API key.
     * Retrieve an account
     */
    getAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AccountFromJSON(jsonValue));
        });
    }
    /**
     * Get details on a specific account. This must be an account controlled by your API key.
     * Retrieve an account
     */
    getAccount(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountRaw({ accountId: accountId });
            return yield response.value();
        });
    }
    /**
     * Get a list of accounts defined on the account
     * List accounts
     */
    getAccountsRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.AccountFromJSON));
        });
    }
    /**
     * Get a list of accounts defined on the account
     * List accounts
     */
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountsRaw();
            return yield response.value();
        });
    }
    /**
     * Get details on the current account, as identified by the API key
     * Retrieve current account
     */
    getCurrentAccountRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts/current`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AccountFromJSON(jsonValue));
        });
    }
    /**
     * Get details on the current account, as identified by the API key
     * Retrieve current account
     */
    getCurrentAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCurrentAccountRaw();
            return yield response.value();
        });
    }
    /**
     * Update the configuration of an account.
     * Update an account
     */
    updateAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling updateAccount.');
            }
            if (requestParameters.accountMergePatch === null || requestParameters.accountMergePatch === undefined) {
                throw new runtime.RequiredError('accountMergePatch', 'Required parameter requestParameters.accountMergePatch was null or undefined when calling updateAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.AccountMergePatchToJSON(requestParameters.accountMergePatch),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AccountFromJSON(jsonValue));
        });
    }
    /**
     * Update the configuration of an account.
     * Update an account
     */
    updateAccount(accountId, accountMergePatch) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateAccountRaw({ accountId: accountId, accountMergePatch: accountMergePatch });
            return yield response.value();
        });
    }
}
exports.AccountsApi = AccountsApi;
