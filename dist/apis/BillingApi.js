"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BillingApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class BillingApi extends runtime.BaseAPI {
    /**
     * Get invoices, payments, and usage stats for your account.
     * Get billing information about your account.
     */
    getAccountBillingRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getAccountBilling.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts/{account_id}/billing`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AccountBillingFromJSON(jsonValue));
        });
    }
    /**
     * Get invoices, payments, and usage stats for your account.
     * Get billing information about your account.
     */
    getAccountBilling(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountBillingRaw({ accountId: accountId });
            return yield response.value();
        });
    }
    /**
     * Get invoices, payments, and usage stats for the current account.
     * Get billing information about the current account.
     */
    getCurrentAccountBillingRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/accounts/current/billing`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AccountBillingFromJSON(jsonValue));
        });
    }
    /**
     * Get invoices, payments, and usage stats for the current account.
     * Get billing information about the current account.
     */
    getCurrentAccountBilling() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCurrentAccountBillingRaw();
            return yield response.value();
        });
    }
}
exports.BillingApi = BillingApi;
