"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraitsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class TraitsApi extends runtime.BaseAPI {
    /**
     * Create a new user-defined Trait. You can connect your uploaded data to this trait by sending a PATCH to the relevant dataset with `output_to_traits` defined.
     * Create a Trait
     */
    createTraitRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.traitFields === null || requestParameters.traitFields === undefined) {
                throw new runtime.RequiredError('traitFields', 'Required parameter requestParameters.traitFields was null or undefined when calling createTrait.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/traits`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.TraitPostToJSON(requestParameters.traitFields),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TraitFromJSON(jsonValue));
        });
    }
    /**
     * Create a new user-defined Trait. You can connect your uploaded data to this trait by sending a PATCH to the relevant dataset with `output_to_traits` defined.
     * Create a Trait
     */
    createTrait(traitFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTraitRaw({ traitFields: traitFields });
            return yield response.value();
        });
    }
    /**
     * Delete a trait
     * Delete a trait
     */
    deleteTraitRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.traitId === null || requestParameters.traitId === undefined) {
                throw new runtime.RequiredError('traitId', 'Required parameter requestParameters.traitId was null or undefined when calling deleteTrait.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/traits/{trait_id}`.replace(`{${"trait_id"}}`, encodeURIComponent(String(requestParameters.traitId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a trait
     * Delete a trait
     */
    deleteTrait(traitId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTraitRaw({ traitId: traitId });
        });
    }
    /**
     * Get a specific trait by ID.
     * Get a specific trait
     */
    getTraitRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.traitId === null || requestParameters.traitId === undefined) {
                throw new runtime.RequiredError('traitId', 'Required parameter requestParameters.traitId was null or undefined when calling getTrait.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/traits/{trait_id}`.replace(`{${"trait_id"}}`, encodeURIComponent(String(requestParameters.traitId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TraitFromJSON(jsonValue));
        });
    }
    /**
     * Get a specific trait by ID.
     * Get a specific trait
     */
    getTrait(traitId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTraitRaw({ traitId: traitId });
            return yield response.value();
        });
    }
    /**
     * The percentage of the US population that falls into each category of this trait.
     */
    getTraitAnalysisDimensionsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.traitId === null || requestParameters.traitId === undefined) {
                throw new runtime.RequiredError('traitId', 'Required parameter requestParameters.traitId was null or undefined when calling getTraitAnalysisDimensions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/traits/{trait_id}/analysis/dimensions`.replace(`{${"trait_id"}}`, encodeURIComponent(String(requestParameters.traitId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AnalysisDimensionsTraitFromJSON(jsonValue));
        });
    }
    /**
     * The percentage of the US population that falls into each category of this trait.
     */
    getTraitAnalysisDimensions(traitId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTraitAnalysisDimensionsRaw({ traitId: traitId });
            return yield response.value();
        });
    }
    /**
     * Get a list of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits
     */
    getTraitsRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/traits`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.TraitFromJSON));
        });
    }
    /**
     * Get a list of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits
     */
    getTraits() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTraitsRaw();
            return yield response.value();
        });
    }
    /**
     * Update the configuration of a trait
     * Update a trait
     */
    updateTraitRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.traitId === null || requestParameters.traitId === undefined) {
                throw new runtime.RequiredError('traitId', 'Required parameter requestParameters.traitId was null or undefined when calling updateTrait.');
            }
            if (requestParameters.traitMergePatch === null || requestParameters.traitMergePatch === undefined) {
                throw new runtime.RequiredError('traitMergePatch', 'Required parameter requestParameters.traitMergePatch was null or undefined when calling updateTrait.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/traits/{trait_id}`.replace(`{${"trait_id"}}`, encodeURIComponent(String(requestParameters.traitId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.TraitMergePatchToJSON(requestParameters.traitMergePatch),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.TraitFromJSON(jsonValue));
        });
    }
    /**
     * Update the configuration of a trait
     * Update a trait
     */
    updateTrait(traitId, traitMergePatch) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateTraitRaw({ traitId: traitId, traitMergePatch: traitMergePatch });
            return yield response.value();
        });
    }
}
exports.TraitsApi = TraitsApi;
