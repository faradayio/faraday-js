/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically. See our [API change policy](https://faraday.ai/legal).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ArchiveConfig, Persona, PersonaMergePatch, PersonaSet, PersonaSetAnalysisDimensions, PersonaSetAnalysisFlow, PersonaSetMergePatch, PersonaSetPost } from '../models';
export interface ArchivePersonaSetRequest {
    personaSetId: string;
    archiveConfig: ArchiveConfig;
}
export interface CreatePersonaSetRequest {
    personaSetPost: PersonaSetPost;
}
export interface DeletePersonaSetRequest {
    personaSetId: string;
}
export interface ForceUpdatePersonaSetRequest {
    personaSetId: string;
}
export interface GetPersonaSetRequest {
    personaSetId: string;
}
export interface GetPersonaSetAnalysisDimensionsRequest {
    personaSetId: string;
}
export interface GetPersonaSetAnalysisFlowRequest {
    personaSetId: string;
}
export interface UnarchivePersonaSetRequest {
    personaSetId: string;
    archiveConfig: ArchiveConfig;
}
export interface UpdatePersonaRequest {
    personaSetId: string;
    personaId: string;
    personaFields: PersonaMergePatch;
}
export interface UpdatePersonaSetRequest {
    personaSetId: string;
    personaSetFields: PersonaSetMergePatch;
}
/**
 *
 */
export declare class PersonaSetsApi extends runtime.BaseAPI {
    /**
     * Archive a persona set
     * Archive a persona set
     */
    private archivePersonaSetRaw;
    /**
     * Archive a persona set
     * Archive a persona set
     */
    archivePersonaSet(personaSetId: string, archiveConfig: ArchiveConfig): Promise<void>;
    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    private createPersonaSetRaw;
    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    createPersonaSet(personaSetPost: PersonaSetPost): Promise<PersonaSet>;
    /**
     * Delete a persona set
     */
    private deletePersonaSetRaw;
    /**
     * Delete a persona set
     */
    deletePersonaSet(personaSetId: string): Promise<void>;
    /**
     * Trigger a rerun for this resource. Faraday automatically updates resources when their config changes, but this option is available in case of transient errors.
     * Trigger a rerun for this resource.
     */
    private forceUpdatePersonaSetRaw;
    /**
     * Trigger a rerun for this resource. Faraday automatically updates resources when their config changes, but this option is available in case of transient errors.
     * Trigger a rerun for this resource.
     */
    forceUpdatePersonaSet(personaSetId: string): Promise<void>;
    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    private getPersonaSetRaw;
    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    getPersonaSet(personaSetId: string): Promise<PersonaSet>;
    /**
     * Get various trait breakdown information about a persona set.
     */
    private getPersonaSetAnalysisDimensionsRaw;
    /**
     * Get various trait breakdown information about a persona set.
     */
    getPersonaSetAnalysisDimensions(personaSetId: string): Promise<Array<PersonaSetAnalysisDimensions>>;
    /**
     * Get various flow of persona sets over time.
     */
    private getPersonaSetAnalysisFlowRaw;
    /**
     * Get various flow of persona sets over time.
     */
    getPersonaSetAnalysisFlow(personaSetId: string): Promise<PersonaSetAnalysisFlow>;
    /**
     * A list of available persona sets
     * List persona sets
     */
    private getPersonaSetsRaw;
    /**
     * A list of available persona sets
     * List persona sets
     */
    getPersonaSets(): Promise<Array<PersonaSet>>;
    /**
     * Unarchive a persona set
     * Unarchive a persona set
     */
    private unarchivePersonaSetRaw;
    /**
     * Unarchive a persona set
     * Unarchive a persona set
     */
    unarchivePersonaSet(personaSetId: string, archiveConfig: ArchiveConfig): Promise<void>;
    /**
     * Edit a persona
     * Edit a persona
     */
    private updatePersonaRaw;
    /**
     * Edit a persona
     * Edit a persona
     */
    updatePersona(personaSetId: string, personaId: string, personaFields: PersonaMergePatch): Promise<Persona>;
    /**
     * Edit a persona set
     * Edit a persona set
     */
    private updatePersonaSetRaw;
    /**
     * Edit a persona set
     * Edit a persona set
     */
    updatePersonaSet(personaSetId: string, personaSetFields: PersonaSetMergePatch): Promise<PersonaSet>;
}
