"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopesApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class ScopesApi extends runtime.BaseAPI {
    /**
     * Add a new scope
     * Create scope
     */
    createScopeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeFields === null || requestParameters.scopeFields === undefined) {
                throw new runtime.RequiredError('scopeFields', 'Required parameter requestParameters.scopeFields was null or undefined when calling createScope.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ScopePostToJSON(requestParameters.scopeFields),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ScopeFromJSON(jsonValue));
        });
    }
    /**
     * Add a new scope
     * Create scope
     */
    createScope(scopeFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createScopeRaw({ scopeFields: scopeFields });
            return yield response.value();
        });
    }
    /**
     * Delete a scope
     */
    deleteScopeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling deleteScope.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a scope
     */
    deleteScope(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteScopeRaw({ scopeId: scopeId });
        });
    }
    /**
     * Get details on a specific scope
     * Retrieve a scope
     */
    getScopeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScope.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ScopeFromJSON(jsonValue));
        });
    }
    /**
     * Get details on a specific scope
     * Retrieve a scope
     */
    getScope(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopeRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Retrieve all datasets associated with a scope. For example, if your scope has population_cohorts, you built those cohorts using data from one of your datasets. This endpoint gets all such datasets. This can be used with referenced targets, to figure out which source tables the target can reference.
     * Retrieve all datasets associated with a scope
     */
    getScopeDatasetsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopeDatasets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/datasets`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.DatasetFromJSON));
        });
    }
    /**
     * Retrieve all datasets associated with a scope. For example, if your scope has population_cohorts, you built those cohorts using data from one of your datasets. This endpoint gets all such datasets. This can be used with referenced targets, to figure out which source tables the target can reference.
     * Retrieve all datasets associated with a scope
     */
    getScopeDatasets(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopeDatasetsRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get payload cohorts for a scope
     * Get payload cohorts for a scope
     */
    getScopePayloadCohortsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopePayloadCohorts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/payload/cohorts`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.CohortFromJSON));
        });
    }
    /**
     * Get payload cohorts for a scope
     * Get payload cohorts for a scope
     */
    getScopePayloadCohorts(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopePayloadCohortsRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get payload outcomes for a scope
     * Get payload outcomes for a scope
     */
    getScopePayloadOutcomesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopePayloadOutcomes.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/payload/outcomes`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.OutcomeFromJSON));
        });
    }
    /**
     * Get payload outcomes for a scope
     * Get payload outcomes for a scope
     */
    getScopePayloadOutcomes(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopePayloadOutcomesRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get payload persona sets for a scope
     * Get payload persona sets for a scope
     */
    getScopePayloadPersonaSetsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopePayloadPersonaSets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/payload/persona_sets`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.PersonaSetFromJSON));
        });
    }
    /**
     * Get payload persona sets for a scope
     * Get payload persona sets for a scope
     */
    getScopePayloadPersonaSets(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopePayloadPersonaSetsRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get payload recommenders for a scope
     * Get payload recommenders for a scope
     */
    getScopePayloadRecommendersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopePayloadRecommenders.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/payload/recommenders`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.RecommenderFromJSON));
        });
    }
    /**
     * Get payload recommenders for a scope
     * Get payload recommenders for a scope
     */
    getScopePayloadRecommenders(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopePayloadRecommendersRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get population cohorts for a scope
     * Get population cohorts for a scope
     */
    getScopePopulationCohortsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopePopulationCohorts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/population/cohorts`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.CohortFromJSON));
        });
    }
    /**
     * Get population cohorts for a scope
     * Get population cohorts for a scope
     */
    getScopePopulationCohorts(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopePopulationCohortsRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get population exclusion cohorts for a scope
     * Get population exclusion cohorts for a scope
     */
    getScopePopulationExclusionCohortsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopePopulationExclusionCohorts.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/population/exclusion_cohorts`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.CohortFromJSON));
        });
    }
    /**
     * Get population exclusion cohorts for a scope
     * Get population exclusion cohorts for a scope
     */
    getScopePopulationExclusionCohorts(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopePopulationExclusionCohortsRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get targets for a scope
     * Get targets for a scope
     */
    getScopeTargetsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling getScopeTargets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}/targets`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.TargetFromJSON));
        });
    }
    /**
     * Get targets for a scope
     * Get targets for a scope
     */
    getScopeTargets(scopeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopeTargetsRaw({ scopeId: scopeId });
            return yield response.value();
        });
    }
    /**
     * Get a list of scopes defined on the account
     * List scopes
     */
    getScopesRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.ScopeFromJSON));
        });
    }
    /**
     * Get a list of scopes defined on the account
     * List scopes
     */
    getScopes() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getScopesRaw();
            return yield response.value();
        });
    }
    /**
     * Update the configuration of a scope.
     * Update a scope
     */
    updateScopeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
                throw new runtime.RequiredError('scopeId', 'Required parameter requestParameters.scopeId was null or undefined when calling updateScope.');
            }
            if (requestParameters.scopeMergePatch === null || requestParameters.scopeMergePatch === undefined) {
                throw new runtime.RequiredError('scopeMergePatch', 'Required parameter requestParameters.scopeMergePatch was null or undefined when calling updateScope.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scopes/{scope_id}`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ScopeMergePatchToJSON(requestParameters.scopeMergePatch),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ScopeFromJSON(jsonValue));
        });
    }
    /**
     * Update the configuration of a scope.
     * Update a scope
     */
    updateScope(scopeId, scopeMergePatch) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateScopeRaw({ scopeId: scopeId, scopeMergePatch: scopeMergePatch });
            return yield response.value();
        });
    }
}
exports.ScopesApi = ScopesApi;
