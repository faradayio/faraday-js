"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class ConnectionsApi extends runtime.BaseAPI {
    /**
     * Add a new connection.  Connections are configuration for connecting data between Faraday and an external location. They are required when working with <a href=\"https://faraday.ai/developers/reference/createtarget\">**replication targets**</a>.  All connections have a `type` that determines which options may be specified.  Connection `type` is specified in the `options` object.
     * Create connection
     */
    createConnectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionFields === null || requestParameters.connectionFields === undefined) {
                throw new runtime.RequiredError('connectionFields', 'Required parameter requestParameters.connectionFields was null or undefined when calling createConnection.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/connections`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ConnectionPostToJSON(requestParameters.connectionFields),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ConnectionFromJSON(jsonValue));
        });
    }
    /**
     * Add a new connection.  Connections are configuration for connecting data between Faraday and an external location. They are required when working with <a href=\"https://faraday.ai/developers/reference/createtarget\">**replication targets**</a>.  All connections have a `type` that determines which options may be specified.  Connection `type` is specified in the `options` object.
     * Create connection
     */
    createConnection(connectionFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createConnectionRaw({ connectionFields: connectionFields });
            return yield response.value();
        });
    }
    /**
     * Delete a connection
     * Delete a connection
     */
    deleteConnectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
                throw new runtime.RequiredError('connectionId', 'Required parameter requestParameters.connectionId was null or undefined when calling deleteConnection.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/connections/{connection_id}`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters.connectionId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a connection
     * Delete a connection
     */
    deleteConnection(connectionId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteConnectionRaw({ connectionId: connectionId });
        });
    }
    /**
     * Get details on a specific connection
     * Retrieve a connection
     */
    getConnectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
                throw new runtime.RequiredError('connectionId', 'Required parameter requestParameters.connectionId was null or undefined when calling getConnection.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/connections/{connection_id}`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters.connectionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ConnectionFromJSON(jsonValue));
        });
    }
    /**
     * Get details on a specific connection
     * Retrieve a connection
     */
    getConnection(connectionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConnectionRaw({ connectionId: connectionId });
            return yield response.value();
        });
    }
    /**
     * Get all datasets that use this connection
     * Retrieve all datasets that use this connection
     */
    getConnectionDatasetsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
                throw new runtime.RequiredError('connectionId', 'Required parameter requestParameters.connectionId was null or undefined when calling getConnectionDatasets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/connections/{connection_id}/datasets`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters.connectionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.DatasetFromJSON));
        });
    }
    /**
     * Get all datasets that use this connection
     * Retrieve all datasets that use this connection
     */
    getConnectionDatasets(connectionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConnectionDatasetsRaw({ connectionId: connectionId });
            return yield response.value();
        });
    }
    /**
     * Get all targets that use this connection
     * Retrieve all targets that use this connection
     */
    getConnectionTargetsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
                throw new runtime.RequiredError('connectionId', 'Required parameter requestParameters.connectionId was null or undefined when calling getConnectionTargets.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/connections/{connection_id}/targets`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters.connectionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.TargetFromJSON));
        });
    }
    /**
     * Get all targets that use this connection
     * Retrieve all targets that use this connection
     */
    getConnectionTargets(connectionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConnectionTargetsRaw({ connectionId: connectionId });
            return yield response.value();
        });
    }
    /**
     * Get a list of connections defined on the account
     * List connections
     */
    getConnectionsRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/connections`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.ConnectionFromJSON));
        });
    }
    /**
     * Get a list of connections defined on the account
     * List connections
     */
    getConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConnectionsRaw();
            return yield response.value();
        });
    }
    /**
     * Update the configuration of a connection.
     * Update a connection
     */
    updateConnectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
                throw new runtime.RequiredError('connectionId', 'Required parameter requestParameters.connectionId was null or undefined when calling updateConnection.');
            }
            if (requestParameters.connectionMergePatch === null || requestParameters.connectionMergePatch === undefined) {
                throw new runtime.RequiredError('connectionMergePatch', 'Required parameter requestParameters.connectionMergePatch was null or undefined when calling updateConnection.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/connections/{connection_id}`.replace(`{${"connection_id"}}`, encodeURIComponent(String(requestParameters.connectionId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.ConnectionMergePatchToJSON(requestParameters.connectionMergePatch),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ConnectionFromJSON(jsonValue));
        });
    }
    /**
     * Update the configuration of a connection.
     * Update a connection
     */
    updateConnection(connectionId, connectionMergePatch) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateConnectionRaw({ connectionId: connectionId, connectionMergePatch: connectionMergePatch });
            return yield response.value();
        });
    }
}
exports.ConnectionsApi = ConnectionsApi;
