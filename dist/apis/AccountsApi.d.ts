/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Account, AccountMergePatch, AccountPost } from '../models';
export interface CreateAccountRequest {
    accountFields: AccountPost;
}
export interface DeleteAccountRequest {
    accountId: string;
}
export interface GetAccountRequest {
    accountId: string;
}
export interface UpdateAccountRequest {
    accountId: string;
    accountMergePatch: AccountMergePatch;
}
/**
 *
 */
export declare class AccountsApi extends runtime.BaseAPI {
    /**
     * Create a subaccount.
     * Create account
     */
    private createAccountRaw;
    /**
     * Create a subaccount.
     * Create account
     */
    createAccount(accountFields: AccountPost): Promise<Account>;
    /**
     * Request an account deletion. In 24 hours, the account and all resources associated with it will be deleted. Contact support within the 24 hour window if you wish to reverse this.
     * Delete an account
     */
    private deleteAccountRaw;
    /**
     * Request an account deletion. In 24 hours, the account and all resources associated with it will be deleted. Contact support within the 24 hour window if you wish to reverse this.
     * Delete an account
     */
    deleteAccount(accountId: string): Promise<void>;
    /**
     * Get details on a specific account. This must be an account controlled by your API key.
     * Retrieve an account
     */
    private getAccountRaw;
    /**
     * Get details on a specific account. This must be an account controlled by your API key.
     * Retrieve an account
     */
    getAccount(accountId: string): Promise<Account>;
    /**
     * Get a list of accounts defined on the account
     * List accounts
     */
    private getAccountsRaw;
    /**
     * Get a list of accounts defined on the account
     * List accounts
     */
    getAccounts(): Promise<Array<Account>>;
    /**
     * Get details on the current account, as identified by the API key
     * Retrieve current account
     */
    private getCurrentAccountRaw;
    /**
     * Get details on the current account, as identified by the API key
     * Retrieve current account
     */
    getCurrentAccount(): Promise<Account>;
    /**
     * Update the configuration of an account.
     * Update an account
     */
    private updateAccountRaw;
    /**
     * Update the configuration of an account.
     * Update an account
     */
    updateAccount(accountId: string, accountMergePatch: AccountMergePatch): Promise<Account>;
}
