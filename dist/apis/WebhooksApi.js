"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhooksApi = void 0;
const runtime = require("../runtime");
/**
 *
 */
class WebhooksApi extends runtime.BaseAPI {
    /**
     * Add a new webhook endpoint
     * Create webhook endpoint
     */
    createWebhookEndpointRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.webhookEndpointFields === null || requestParameters.webhookEndpointFields === undefined) {
                throw new runtime.RequiredError('webhookEndpointFields', 'Required parameter requestParameters.webhookEndpointFields was null or undefined when calling createWebhookEndpoint.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/webhook_endpoints`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.webhookEndpointFields,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Add a new webhook endpoint
     * Create webhook endpoint
     */
    createWebhookEndpoint(webhookEndpointFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createWebhookEndpointRaw({ webhookEndpointFields: webhookEndpointFields });
            return yield response.value();
        });
    }
    /**
     * Delete a webhook endpoint
     * Delete a webhook endpoint
     */
    deleteWebhookEndpointRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.webhookEndpointId === null || requestParameters.webhookEndpointId === undefined) {
                throw new runtime.RequiredError('webhookEndpointId', 'Required parameter requestParameters.webhookEndpointId was null or undefined when calling deleteWebhookEndpoint.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/webhook_endpoints/{webhook_endpoint_id}`.replace(`{${"webhook_endpoint_id"}}`, encodeURIComponent(String(requestParameters.webhookEndpointId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a webhook endpoint
     * Delete a webhook endpoint
     */
    deleteWebhookEndpoint(webhookEndpointId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteWebhookEndpointRaw({ webhookEndpointId: webhookEndpointId });
        });
    }
    /**
     * Get details on a specific webhook endpoint
     * Retrieve a webhook
     */
    getWebhookEndpointRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.webhookEndpointId === null || requestParameters.webhookEndpointId === undefined) {
                throw new runtime.RequiredError('webhookEndpointId', 'Required parameter requestParameters.webhookEndpointId was null or undefined when calling getWebhookEndpoint.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/webhook_endpoints/{webhook_endpoint_id}`.replace(`{${"webhook_endpoint_id"}}`, encodeURIComponent(String(requestParameters.webhookEndpointId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get details on a specific webhook endpoint
     * Retrieve a webhook
     */
    getWebhookEndpoint(webhookEndpointId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWebhookEndpointRaw({ webhookEndpointId: webhookEndpointId });
            return yield response.value();
        });
    }
    /**
     * Get a list of webhook endpoints defined on the account
     * List webhook endpoints
     */
    getWebhookEndpointsRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/webhook_endpoints`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get a list of webhook endpoints defined on the account
     * List webhook endpoints
     */
    getWebhookEndpoints() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWebhookEndpointsRaw();
            return yield response.value();
        });
    }
    /**
     * Update the configuration of a webhook endpoint
     * Update a webhook endpoint
     */
    updateWebhookEndpointRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.webhookEndpointId === null || requestParameters.webhookEndpointId === undefined) {
                throw new runtime.RequiredError('webhookEndpointId', 'Required parameter requestParameters.webhookEndpointId was null or undefined when calling updateWebhookEndpoint.');
            }
            if (requestParameters.webhookEndpointMergePatch === null || requestParameters.webhookEndpointMergePatch === undefined) {
                throw new runtime.RequiredError('webhookEndpointMergePatch', 'Required parameter requestParameters.webhookEndpointMergePatch was null or undefined when calling updateWebhookEndpoint.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/webhook_endpoints/{webhook_endpoint_id}`.replace(`{${"webhook_endpoint_id"}}`, encodeURIComponent(String(requestParameters.webhookEndpointId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.webhookEndpointMergePatch,
            });
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Update the configuration of a webhook endpoint
     * Update a webhook endpoint
     */
    updateWebhookEndpoint(webhookEndpointId, webhookEndpointMergePatch) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateWebhookEndpointRaw({ webhookEndpointId: webhookEndpointId, webhookEndpointMergePatch: webhookEndpointMergePatch });
            return yield response.value();
        });
    }
}
exports.WebhooksApi = WebhooksApi;
