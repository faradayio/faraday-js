/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Place, PlaceMergePatch, PlacePost } from '../models';
export interface CreatePlaceRequest {
    placeFields: PlacePost;
}
export interface DeletePlaceRequest {
    placeId: string;
}
export interface GetPlaceRequest {
    placeId: string;
}
export interface UpdatePlaceRequest {
    placeId: string;
    placeFields: PlaceMergePatch;
}
/**
 *
 */
export declare class PlacesApi extends runtime.BaseAPI {
    /**
     * Create a new place
     * Create place
     */
    private createPlaceRaw;
    /**
     * Create a new place
     * Create place
     */
    createPlace(placeFields: PlacePost): Promise<Place>;
    /**
     * Delete a place
     */
    private deletePlaceRaw;
    /**
     * Delete a place
     */
    deletePlace(placeId: string): Promise<void>;
    /**
     * Retrieve details on a specific place
     * Retrieve a place
     */
    private getPlaceRaw;
    /**
     * Retrieve details on a specific place
     * Retrieve a place
     */
    getPlace(placeId: string): Promise<Place>;
    /**
     * Get a list of the places available in the developer’s account. Geometry and addresses are omitted from this endpoint\'s response to avoid overly large response sizes. If you want to inspect a place\'s geometry or addresses, then use GET /places/<place id>.
     * List places
     */
    private getPlacesRaw;
    /**
     * Get a list of the places available in the developer’s account. Geometry and addresses are omitted from this endpoint\'s response to avoid overly large response sizes. If you want to inspect a place\'s geometry or addresses, then use GET /places/<place id>.
     * List places
     */
    getPlaces(): Promise<Array<Place>>;
    /**
     * Update an existing place
     * Update place
     */
    private updatePlaceRaw;
    /**
     * Update an existing place
     * Update place
     */
    updatePlace(placeId: string, placeFields: PlaceMergePatch): Promise<Place>;
}
