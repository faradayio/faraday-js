"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonaSetsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class PersonaSetsApi extends runtime.BaseAPI {
    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    createPersonaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.personaSetPost === null || requestParameters.personaSetPost === undefined) {
                throw new runtime.RequiredError('personaSetPost', 'Required parameter requestParameters.personaSetPost was null or undefined when calling createPersonaSet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/persona_sets`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PersonaSetPostToJSON(requestParameters.personaSetPost),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PersonaSetFromJSON(jsonValue));
        });
    }
    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    createPersonaSet(personaSetPost) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createPersonaSetRaw({ personaSetPost: personaSetPost });
            return yield response.value();
        });
    }
    /**
     * Delete a persona set
     */
    deletePersonaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.personaSetId === null || requestParameters.personaSetId === undefined) {
                throw new runtime.RequiredError('personaSetId', 'Required parameter requestParameters.personaSetId was null or undefined when calling deletePersonaSet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/persona_sets/{persona_set_id}`.replace(`{${"persona_set_id"}}`, encodeURIComponent(String(requestParameters.personaSetId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a persona set
     */
    deletePersonaSet(personaSetId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deletePersonaSetRaw({ personaSetId: personaSetId });
        });
    }
    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    getPersonaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.personaSetId === null || requestParameters.personaSetId === undefined) {
                throw new runtime.RequiredError('personaSetId', 'Required parameter requestParameters.personaSetId was null or undefined when calling getPersonaSet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/persona_sets/{persona_set_id}`.replace(`{${"persona_set_id"}}`, encodeURIComponent(String(requestParameters.personaSetId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PersonaSetFromJSON(jsonValue));
        });
    }
    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    getPersonaSet(personaSetId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPersonaSetRaw({ personaSetId: personaSetId });
            return yield response.value();
        });
    }
    /**
     * Get various trait breakdown information about a persona set.
     */
    getPersonaSetAnalysisDimensionsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.personaSetId === null || requestParameters.personaSetId === undefined) {
                throw new runtime.RequiredError('personaSetId', 'Required parameter requestParameters.personaSetId was null or undefined when calling getPersonaSetAnalysisDimensions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/persona_sets/{persona_set_id}/analysis/dimensions`.replace(`{${"persona_set_id"}}`, encodeURIComponent(String(requestParameters.personaSetId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.PersonaSetAnalysisDimensionsFromJSON));
        });
    }
    /**
     * Get various trait breakdown information about a persona set.
     */
    getPersonaSetAnalysisDimensions(personaSetId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPersonaSetAnalysisDimensionsRaw({ personaSetId: personaSetId });
            return yield response.value();
        });
    }
    /**
     * Get various flow of persona sets over time.
     */
    getPersonaSetAnalysisFlowRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.personaSetId === null || requestParameters.personaSetId === undefined) {
                throw new runtime.RequiredError('personaSetId', 'Required parameter requestParameters.personaSetId was null or undefined when calling getPersonaSetAnalysisFlow.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/persona_sets/{persona_set_id}/analysis/flow`.replace(`{${"persona_set_id"}}`, encodeURIComponent(String(requestParameters.personaSetId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PersonaSetAnalysisFlowFromJSON(jsonValue));
        });
    }
    /**
     * Get various flow of persona sets over time.
     */
    getPersonaSetAnalysisFlow(personaSetId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPersonaSetAnalysisFlowRaw({ personaSetId: personaSetId });
            return yield response.value();
        });
    }
    /**
     * A list of available persona sets
     * List persona sets
     */
    getPersonaSetsRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/persona_sets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.PersonaSetFromJSON));
        });
    }
    /**
     * A list of available persona sets
     * List persona sets
     */
    getPersonaSets() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPersonaSetsRaw();
            return yield response.value();
        });
    }
    /**
     * Edit a persona set
     * Edit a persona set
     */
    updatePersonaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.personaSetId === null || requestParameters.personaSetId === undefined) {
                throw new runtime.RequiredError('personaSetId', 'Required parameter requestParameters.personaSetId was null or undefined when calling updatePersonaSet.');
            }
            if (requestParameters.personaSetFields === null || requestParameters.personaSetFields === undefined) {
                throw new runtime.RequiredError('personaSetFields', 'Required parameter requestParameters.personaSetFields was null or undefined when calling updatePersonaSet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/persona_sets/{persona_set_id}`.replace(`{${"persona_set_id"}}`, encodeURIComponent(String(requestParameters.personaSetId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.PersonaSetMergePatchToJSON(requestParameters.personaSetFields),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.PersonaSetFromJSON(jsonValue));
        });
    }
    /**
     * Edit a persona set
     * Edit a persona set
     */
    updatePersonaSet(personaSetId, personaSetFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updatePersonaSetRaw({ personaSetId: personaSetId, personaSetFields: personaSetFields });
            return yield response.value();
        });
    }
}
exports.PersonaSetsApi = PersonaSetsApi;
