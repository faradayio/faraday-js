/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically. See our [API change policy](https://faraday.ai/legal).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AnalysisDimensionsTrait, ArchiveConfig, Trait, TraitMergePatch, TraitPost } from '../models';
export interface ArchiveTraitRequest {
    traitId: string;
    archiveConfig: ArchiveConfig;
}
export interface CreateTraitRequest {
    traitFields: TraitPost;
}
export interface DeleteTraitRequest {
    traitId: string;
}
export interface ForceUpdateTraitRequest {
    traitId: string;
}
export interface GetTraitRequest {
    traitId: string;
}
export interface GetTraitAnalysisDimensionsRequest {
    traitId: string;
}
export interface UnarchiveTraitRequest {
    traitId: string;
    archiveConfig: ArchiveConfig;
}
export interface UpdateTraitRequest {
    traitId: string;
    traitMergePatch: TraitMergePatch;
}
/**
 *
 */
export declare class TraitsApi extends runtime.BaseAPI {
    /**
     * Archive a trait
     * Archive a trait
     */
    private archiveTraitRaw;
    /**
     * Archive a trait
     * Archive a trait
     */
    archiveTrait(traitId: string, archiveConfig: ArchiveConfig): Promise<void>;
    /**
     * Create a new user-defined Trait. You can connect your uploaded data to this trait by sending a PATCH to the relevant dataset with `output_to_traits` defined.
     * Create a Trait
     */
    private createTraitRaw;
    /**
     * Create a new user-defined Trait. You can connect your uploaded data to this trait by sending a PATCH to the relevant dataset with `output_to_traits` defined.
     * Create a Trait
     */
    createTrait(traitFields: TraitPost): Promise<Trait>;
    /**
     * Delete all traits without a source dataset.
     * Delete all orphaned traits
     */
    private deleteAllOrphanedTraitsRaw;
    /**
     * Delete all traits without a source dataset.
     * Delete all orphaned traits
     */
    deleteAllOrphanedTraits(): Promise<void>;
    /**
     * Delete a trait
     * Delete a trait
     */
    private deleteTraitRaw;
    /**
     * Delete a trait
     * Delete a trait
     */
    deleteTrait(traitId: string): Promise<void>;
    /**
     * Trigger a rerun for this resource. Faraday automatically updates resources when their config changes, but this option is available in case of transient errors.
     * Trigger a rerun for this resource.
     */
    private forceUpdateTraitRaw;
    /**
     * Trigger a rerun for this resource. Faraday automatically updates resources when their config changes, but this option is available in case of transient errors.
     * Trigger a rerun for this resource.
     */
    forceUpdateTrait(traitId: string): Promise<void>;
    /**
     * Get a specific trait by ID.
     * Get a specific trait
     */
    private getTraitRaw;
    /**
     * Get a specific trait by ID.
     * Get a specific trait
     */
    getTrait(traitId: string): Promise<Trait>;
    /**
     * The percentage of the US population that falls into each category of this trait.
     */
    private getTraitAnalysisDimensionsRaw;
    /**
     * The percentage of the US population that falls into each category of this trait.
     */
    getTraitAnalysisDimensions(traitId: string): Promise<AnalysisDimensionsTrait>;
    /**
     * Get a list of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits
     */
    private getTraitsRaw;
    /**
     * Get a list of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits
     */
    getTraits(): Promise<Array<Trait>>;
    /**
     * Get a csv of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits, in csv form
     */
    private getTraitsCsvRaw;
    /**
     * Get a csv of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits, in csv form
     */
    getTraitsCsv(): Promise<string>;
    /**
     * Unarchive a trait
     * Unarchive a trait
     */
    private unarchiveTraitRaw;
    /**
     * Unarchive a trait
     * Unarchive a trait
     */
    unarchiveTrait(traitId: string, archiveConfig: ArchiveConfig): Promise<void>;
    /**
     * Update the configuration of a trait
     * Update a trait
     */
    private updateTraitRaw;
    /**
     * Update the configuration of a trait
     * Update a trait
     */
    updateTrait(traitId: string, traitMergePatch: TraitMergePatch): Promise<Trait>;
}
