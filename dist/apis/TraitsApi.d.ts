/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AnalysisDimensionsTrait, Trait, TraitMergePatch, TraitPost } from '../models';
export interface CreateTraitRequest {
    traitFields: TraitPost;
}
export interface DeleteTraitRequest {
    traitId: string;
}
export interface GetTraitRequest {
    traitId: string;
}
export interface GetTraitAnalysisDimensionsRequest {
    traitId: string;
}
export interface UpdateTraitRequest {
    traitId: string;
    traitMergePatch: TraitMergePatch;
}
/**
 *
 */
export declare class TraitsApi extends runtime.BaseAPI {
    /**
     * Create a new user-defined Trait. You can connect your uploaded data to this trait by sending a PATCH to the relevant dataset with `output_to_traits` defined.
     * Create a Trait
     */
    private createTraitRaw;
    /**
     * Create a new user-defined Trait. You can connect your uploaded data to this trait by sending a PATCH to the relevant dataset with `output_to_traits` defined.
     * Create a Trait
     */
    createTrait(traitFields: TraitPost): Promise<Trait>;
    /**
     * Delete a trait
     * Delete a trait
     */
    private deleteTraitRaw;
    /**
     * Delete a trait
     * Delete a trait
     */
    deleteTrait(traitId: string): Promise<void>;
    /**
     * Get a specific trait by ID.
     * Get a specific trait
     */
    private getTraitRaw;
    /**
     * Get a specific trait by ID.
     * Get a specific trait
     */
    getTrait(traitId: string): Promise<Trait>;
    /**
     * The percentage of the US population that falls into each category of this trait.
     */
    private getTraitAnalysisDimensionsRaw;
    /**
     * The percentage of the US population that falls into each category of this trait.
     */
    getTraitAnalysisDimensions(traitId: string): Promise<AnalysisDimensionsTrait>;
    /**
     * Get a list of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits
     */
    private getTraitsRaw;
    /**
     * Get a list of all available traits, including those provided by Faraday and those defined by the user.
     * List all user-defined and Faraday-provided traits
     */
    getTraits(): Promise<Array<Trait>>;
    /**
     * Update the configuration of a trait
     * Update a trait
     */
    private updateTraitRaw;
    /**
     * Update the configuration of a trait
     * Update a trait
     */
    updateTrait(traitId: string, traitMergePatch: TraitMergePatch): Promise<Trait>;
}
