/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ArchiveConfig, InlineResponse200, Target, TargetAnalysis, TargetLookupRequest, TargetLookupResponse, TargetMergePatch, TargetPost } from '../models';
export interface ArchiveTargetRequest {
    targetId: string;
    archiveConfig: ArchiveConfig;
}
export interface CreateTargetRequest {
    targetFields: TargetPost;
}
export interface CreateTargetPreviewRequest {
    targetId: string;
}
export interface DeleteTargetRequest {
    targetId: string;
}
export interface DownloadTargetRequest {
    targetId: string;
}
export interface ForceUpdateTargetRequest {
    targetId: string;
}
export interface GetTargetRequest {
    targetId: string;
}
export interface GetTargetAnalysisRequest {
    targetId: string;
}
export interface GetTargetAnalysisReportRequest {
    targetId: string;
}
export interface LookupOnTargetRequest {
    targetId: string;
    targetLookupRequest: TargetLookupRequest;
}
export interface UnarchiveTargetRequest {
    targetId: string;
    archiveConfig: ArchiveConfig;
}
export interface UpdateTargetRequest {
    targetId: string;
    targetMergePatch: TargetMergePatch;
}
/**
 *
 */
export declare class TargetsApi extends runtime.BaseAPI {
    /**
     * Archive a target
     * Archive a target
     */
    private archiveTargetRaw;
    /**
     * Archive a target
     * Archive a target
     */
    archiveTarget(targetId: string, archiveConfig: ArchiveConfig): Promise<void>;
    /**
     * Add a new target.  Targets are configuration for exporting data from Faraday, possibly to an external environment (with <a href=\"https://faraday.ai/developers/reference/createconnection\">/connections</a>).  There are three types of targets: <table> <thead> <tr><th>Target type</th><th>Description</th><th>API requirement</th></tr> </thead> <tbody> <tr><td><strong>Publication</strong></td><td>Faraday <em>hosts</em> your predictions for convenient retrieval as needed.</td><td>Specify a <code>type</code> of <code>hosted_csv</code> in <code>options</code>. Omit <code>connection_id</code>.</td></tr> <tr><td><strong>Replication</strong></td><td>Faraday copies your predictions to systems <em>you</em> control. You may then push them to third parties like Facebook, Google Ads, etc.</td><td>Specify a valid <code>connection_id</code> and the corresponding <code>type</code> of the connection in <code>options</code>.</td></tr> <tr><td><strong>Managed</strong></td><td>Faraday manages a push to third parties like Facebook, Google Ads, and more.</td><td>Must be on an enterprise plan. Contact Customer Success to set up.</td></tr> </tbody> </table>
     * Create target
     */
    private createTargetRaw;
    /**
     * Add a new target.  Targets are configuration for exporting data from Faraday, possibly to an external environment (with <a href=\"https://faraday.ai/developers/reference/createconnection\">/connections</a>).  There are three types of targets: <table> <thead> <tr><th>Target type</th><th>Description</th><th>API requirement</th></tr> </thead> <tbody> <tr><td><strong>Publication</strong></td><td>Faraday <em>hosts</em> your predictions for convenient retrieval as needed.</td><td>Specify a <code>type</code> of <code>hosted_csv</code> in <code>options</code>. Omit <code>connection_id</code>.</td></tr> <tr><td><strong>Replication</strong></td><td>Faraday copies your predictions to systems <em>you</em> control. You may then push them to third parties like Facebook, Google Ads, etc.</td><td>Specify a valid <code>connection_id</code> and the corresponding <code>type</code> of the connection in <code>options</code>.</td></tr> <tr><td><strong>Managed</strong></td><td>Faraday manages a push to third parties like Facebook, Google Ads, and more.</td><td>Must be on an enterprise plan. Contact Customer Success to set up.</td></tr> </tbody> </table>
     * Create target
     */
    createTarget(targetFields: TargetPost): Promise<Target>;
    /**
     * Trigger a preview delivery (first 1000 results) of a target
     * Start a preview delivery
     */
    private createTargetPreviewRaw;
    /**
     * Trigger a preview delivery (first 1000 results) of a target
     * Start a preview delivery
     */
    createTargetPreview(targetId: string): Promise<InlineResponse200>;
    /**
     * Delete a target
     * Delete a target
     */
    private deleteTargetRaw;
    /**
     * Delete a target
     * Delete a target
     */
    deleteTarget(targetId: string): Promise<void>;
    /**
     * Download the default output of a target
     */
    private downloadTargetRaw;
    /**
     * Download the default output of a target
     */
    downloadTarget(targetId: string): Promise<string>;
    /**
     * Trigger a rerun for this resource. Faraday automatically updates resources when their config changes, but this option is available in case of transient errors.
     * Trigger a rerun for this resource.
     */
    private forceUpdateTargetRaw;
    /**
     * Trigger a rerun for this resource. Faraday automatically updates resources when their config changes, but this option is available in case of transient errors.
     * Trigger a rerun for this resource.
     */
    forceUpdateTarget(targetId: string): Promise<void>;
    /**
     * Get details on a specific target
     * Retrieve a target
     */
    private getTargetRaw;
    /**
     * Get details on a specific target
     * Retrieve a target
     */
    getTarget(targetId: string): Promise<Target>;
    /**
     * Get details on a target\'s analysis report for specific trait and/or geography dimensions.
     * Retrieve a target\'s analysis
     */
    private getTargetAnalysisRaw;
    /**
     * Get details on a target\'s analysis report for specific trait and/or geography dimensions.
     * Retrieve a target\'s analysis
     */
    getTargetAnalysis(targetId: string): Promise<TargetAnalysis>;
    /**
     * Gets a redirect URL to download a PDF report.
     * Retrieve target analysis report
     */
    private getTargetAnalysisReportRaw;
    /**
     * Gets a redirect URL to download a PDF report.
     * Retrieve target analysis report
     */
    getTargetAnalysisReport(targetId: string): Promise<void>;
    /**
     * Get a list of targets defined on the account
     * List targets
     */
    private getTargetsRaw;
    /**
     * Get a list of targets defined on the account
     * List targets
     */
    getTargets(): Promise<Array<Target>>;
    /**
     * Use either PII or a spatial aggregate to retrieve the payload of a Lookup API target. See the Lookup API specification\'s [quickstart](https://faraday.ai/docs/features/lookup-api#retrieve-predictions) for more details, including examples.
     * Perform a lookup on the target, if its type is Lookup API.
     */
    private lookupOnTargetRaw;
    /**
     * Use either PII or a spatial aggregate to retrieve the payload of a Lookup API target. See the Lookup API specification\'s [quickstart](https://faraday.ai/docs/features/lookup-api#retrieve-predictions) for more details, including examples.
     * Perform a lookup on the target, if its type is Lookup API.
     */
    lookupOnTarget(targetId: string, targetLookupRequest: TargetLookupRequest): Promise<TargetLookupResponse>;
    /**
     * Unarchive a target
     * Unarchive a target
     */
    private unarchiveTargetRaw;
    /**
     * Unarchive a target
     * Unarchive a target
     */
    unarchiveTarget(targetId: string, archiveConfig: ArchiveConfig): Promise<void>;
    /**
     * Update the configuration of a target.
     * Update a target
     */
    private updateTargetRaw;
    /**
     * Update the configuration of a target.
     * Update a target
     */
    updateTarget(targetId: string, targetMergePatch: TargetMergePatch): Promise<Target>;
}
