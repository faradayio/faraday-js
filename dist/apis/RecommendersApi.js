"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendersApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class RecommendersApi extends runtime.BaseAPI {
    /**
     * Add a new recommender.  This feature is experimental and subject to change. To enable this feature, contact your account manager.
     * Create recommender
     */
    createRecommenderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.recommenderFields === null || requestParameters.recommenderFields === undefined) {
                throw new runtime.RequiredError('recommenderFields', 'Required parameter requestParameters.recommenderFields was null or undefined when calling createRecommender.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/recommenders`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.RecommenderPostToJSON(requestParameters.recommenderFields),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RecommenderFromJSON(jsonValue));
        });
    }
    /**
     * Add a new recommender.  This feature is experimental and subject to change. To enable this feature, contact your account manager.
     * Create recommender
     */
    createRecommender(recommenderFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRecommenderRaw({ recommenderFields: recommenderFields });
            return yield response.value();
        });
    }
    /**
     * Delete a recommender
     */
    deleteRecommenderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.recommenderId === null || requestParameters.recommenderId === undefined) {
                throw new runtime.RequiredError('recommenderId', 'Required parameter requestParameters.recommenderId was null or undefined when calling deleteRecommender.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/recommenders/{recommender_id}`.replace(`{${"recommender_id"}}`, encodeURIComponent(String(requestParameters.recommenderId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a recommender
     */
    deleteRecommender(recommenderId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteRecommenderRaw({ recommenderId: recommenderId });
        });
    }
    /**
     * Get details on a specific recommender
     * Retrieve a recommender
     */
    getRecommenderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.recommenderId === null || requestParameters.recommenderId === undefined) {
                throw new runtime.RequiredError('recommenderId', 'Required parameter requestParameters.recommenderId was null or undefined when calling getRecommender.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/recommenders/{recommender_id}`.replace(`{${"recommender_id"}}`, encodeURIComponent(String(requestParameters.recommenderId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RecommenderFromJSON(jsonValue));
        });
    }
    /**
     * Get details on a specific recommender
     * Retrieve a recommender
     */
    getRecommender(recommenderId) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRecommenderRaw({ recommenderId: recommenderId });
            return yield response.value();
        });
    }
    /**
     * Get a list of recommenders defined on the account
     * List recommenders
     */
    getRecommendersRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/recommenders`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.RecommenderFromJSON));
        });
    }
    /**
     * Get a list of recommenders defined on the account
     * List recommenders
     */
    getRecommenders() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRecommendersRaw();
            return yield response.value();
        });
    }
    /**
     * Edit configuration of a recommender
     * Edit a recommender
     */
    updateRecommenderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.recommenderId === null || requestParameters.recommenderId === undefined) {
                throw new runtime.RequiredError('recommenderId', 'Required parameter requestParameters.recommenderId was null or undefined when calling updateRecommender.');
            }
            if (requestParameters.recommenderFields === null || requestParameters.recommenderFields === undefined) {
                throw new runtime.RequiredError('recommenderFields', 'Required parameter requestParameters.recommenderFields was null or undefined when calling updateRecommender.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json+merge-patch';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("bearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/recommenders/{recommender_id}`.replace(`{${"recommender_id"}}`, encodeURIComponent(String(requestParameters.recommenderId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.RecommenderMergePatchToJSON(requestParameters.recommenderFields),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RecommenderFromJSON(jsonValue));
        });
    }
    /**
     * Edit configuration of a recommender
     * Edit a recommender
     */
    updateRecommender(recommenderId, recommenderFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRecommenderRaw({ recommenderId: recommenderId, recommenderFields: recommenderFields });
            return yield response.value();
        });
    }
}
exports.RecommendersApi = RecommendersApi;
