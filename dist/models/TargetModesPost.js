"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetModesPostToJSON = exports.TargetModesPostFromJSONTyped = exports.TargetModesPostFromJSON = void 0;
const TargetModesAggregatedPost_1 = require("./TargetModesAggregatedPost");
const TargetModesHashedPost_1 = require("./TargetModesHashedPost");
const TargetModesIdentifiedPost_1 = require("./TargetModesIdentifiedPost");
const TargetModesReferencedPost_1 = require("./TargetModesReferencedPost");
function TargetModesPostFromJSON(json) {
    return TargetModesPostFromJSONTyped(json, false);
}
exports.TargetModesPostFromJSON = TargetModesPostFromJSON;
function TargetModesPostFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['mode']) {
        case 'aggregated':
            return Object.assign(Object.assign({}, TargetModesAggregatedPost_1.TargetModesAggregatedPostFromJSONTyped(json, true)), { mode: 'aggregated' });
        case 'hashed':
            return Object.assign(Object.assign({}, TargetModesHashedPost_1.TargetModesHashedPostFromJSONTyped(json, true)), { mode: 'hashed' });
        case 'identified':
            return Object.assign(Object.assign({}, TargetModesIdentifiedPost_1.TargetModesIdentifiedPostFromJSONTyped(json, true)), { mode: 'identified' });
        case 'referenced':
            return Object.assign(Object.assign({}, TargetModesReferencedPost_1.TargetModesReferencedPostFromJSONTyped(json, true)), { mode: 'referenced' });
        default:
            throw new Error(`No variant of TargetModesPost exists with 'mode=${json['mode']}'`);
    }
}
exports.TargetModesPostFromJSONTyped = TargetModesPostFromJSONTyped;
function TargetModesPostToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['mode']) {
        case 'aggregated':
            return TargetModesAggregatedPost_1.TargetModesAggregatedPostToJSON(value);
        case 'hashed':
            return TargetModesHashedPost_1.TargetModesHashedPostToJSON(value);
        case 'identified':
            return TargetModesIdentifiedPost_1.TargetModesIdentifiedPostToJSON(value);
        case 'referenced':
            return TargetModesReferencedPost_1.TargetModesReferencedPostToJSON(value);
        default:
            throw new Error(`No variant of TargetModesPost exists with 'mode=${value['mode']}'`);
    }
}
exports.TargetModesPostToJSON = TargetModesPostToJSON;
