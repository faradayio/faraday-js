"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetOptionsPostToJSON = exports.TargetOptionsPostFromJSONTyped = exports.TargetOptionsPostFromJSON = void 0;
const TargetOptionsAwsAuroraMysqlPost_1 = require("./TargetOptionsAwsAuroraMysqlPost");
const TargetOptionsAwsAuroraPostgresPost_1 = require("./TargetOptionsAwsAuroraPostgresPost");
const TargetOptionsAwsRdsMysqlPost_1 = require("./TargetOptionsAwsRdsMysqlPost");
const TargetOptionsAwsRdsPostgresPost_1 = require("./TargetOptionsAwsRdsPostgresPost");
const TargetOptionsAwsRdsSqlServerPost_1 = require("./TargetOptionsAwsRdsSqlServerPost");
const TargetOptionsAwsRedshiftServerlessPost_1 = require("./TargetOptionsAwsRedshiftServerlessPost");
const TargetOptionsAzureSqlServerPost_1 = require("./TargetOptionsAzureSqlServerPost");
const TargetOptionsBigQueryPost_1 = require("./TargetOptionsBigQueryPost");
const TargetOptionsFacebookCustomAudiencesPost_1 = require("./TargetOptionsFacebookCustomAudiencesPost");
const TargetOptionsGcpCloudSqlMysqlPost_1 = require("./TargetOptionsGcpCloudSqlMysqlPost");
const TargetOptionsGcpCloudSqlPostgresPost_1 = require("./TargetOptionsGcpCloudSqlPostgresPost");
const TargetOptionsGcpCloudSqlSqlServerPost_1 = require("./TargetOptionsGcpCloudSqlSqlServerPost");
const TargetOptionsGcpGcsCsvPost_1 = require("./TargetOptionsGcpGcsCsvPost");
const TargetOptionsGoogleAdsPost_1 = require("./TargetOptionsGoogleAdsPost");
const TargetOptionsHostedCsvPost_1 = require("./TargetOptionsHostedCsvPost");
const TargetOptionsHubspotPost_1 = require("./TargetOptionsHubspotPost");
const TargetOptionsIterablePost_1 = require("./TargetOptionsIterablePost");
const TargetOptionsKlaviyoPost_1 = require("./TargetOptionsKlaviyoPost");
const TargetOptionsLinkedinAdsPost_1 = require("./TargetOptionsLinkedinAdsPost");
const TargetOptionsLookupApiPost_1 = require("./TargetOptionsLookupApiPost");
const TargetOptionsMysqlPost_1 = require("./TargetOptionsMysqlPost");
const TargetOptionsPinterestAdsPost_1 = require("./TargetOptionsPinterestAdsPost");
const TargetOptionsPoplarPost_1 = require("./TargetOptionsPoplarPost");
const TargetOptionsPostgresPost_1 = require("./TargetOptionsPostgresPost");
const TargetOptionsRedshiftPost_1 = require("./TargetOptionsRedshiftPost");
const TargetOptionsS3CsvPost_1 = require("./TargetOptionsS3CsvPost");
const TargetOptionsSalesforceMarketingCloudPost_1 = require("./TargetOptionsSalesforceMarketingCloudPost");
const TargetOptionsSalesforcePost_1 = require("./TargetOptionsSalesforcePost");
const TargetOptionsSegmentPost_1 = require("./TargetOptionsSegmentPost");
const TargetOptionsSftpPost_1 = require("./TargetOptionsSftpPost");
const TargetOptionsSnowflakePost_1 = require("./TargetOptionsSnowflakePost");
const TargetOptionsSqlServerPost_1 = require("./TargetOptionsSqlServerPost");
const TargetOptionsTheTradeDeskPost_1 = require("./TargetOptionsTheTradeDeskPost");
const TargetOptionsTiktokPost_1 = require("./TargetOptionsTiktokPost");
function TargetOptionsPostFromJSON(json) {
    return TargetOptionsPostFromJSONTyped(json, false);
}
exports.TargetOptionsPostFromJSON = TargetOptionsPostFromJSON;
function TargetOptionsPostFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'aws_aurora_mysql':
            return Object.assign(Object.assign({}, TargetOptionsAwsAuroraMysqlPost_1.TargetOptionsAwsAuroraMysqlPostFromJSONTyped(json, true)), { type: 'aws_aurora_mysql' });
        case 'aws_aurora_postgres':
            return Object.assign(Object.assign({}, TargetOptionsAwsAuroraPostgresPost_1.TargetOptionsAwsAuroraPostgresPostFromJSONTyped(json, true)), { type: 'aws_aurora_postgres' });
        case 'aws_rds_mysql':
            return Object.assign(Object.assign({}, TargetOptionsAwsRdsMysqlPost_1.TargetOptionsAwsRdsMysqlPostFromJSONTyped(json, true)), { type: 'aws_rds_mysql' });
        case 'aws_rds_postgres':
            return Object.assign(Object.assign({}, TargetOptionsAwsRdsPostgresPost_1.TargetOptionsAwsRdsPostgresPostFromJSONTyped(json, true)), { type: 'aws_rds_postgres' });
        case 'aws_rds_sql_server':
            return Object.assign(Object.assign({}, TargetOptionsAwsRdsSqlServerPost_1.TargetOptionsAwsRdsSqlServerPostFromJSONTyped(json, true)), { type: 'aws_rds_sql_server' });
        case 'aws_redshift_serverless':
            return Object.assign(Object.assign({}, TargetOptionsAwsRedshiftServerlessPost_1.TargetOptionsAwsRedshiftServerlessPostFromJSONTyped(json, true)), { type: 'aws_redshift_serverless' });
        case 'azure_sql_server':
            return Object.assign(Object.assign({}, TargetOptionsAzureSqlServerPost_1.TargetOptionsAzureSqlServerPostFromJSONTyped(json, true)), { type: 'azure_sql_server' });
        case 'bigquery':
            return Object.assign(Object.assign({}, TargetOptionsBigQueryPost_1.TargetOptionsBigQueryPostFromJSONTyped(json, true)), { type: 'bigquery' });
        case 'facebook_custom_audiences':
            return Object.assign(Object.assign({}, TargetOptionsFacebookCustomAudiencesPost_1.TargetOptionsFacebookCustomAudiencesPostFromJSONTyped(json, true)), { type: 'facebook_custom_audiences' });
        case 'gcp_cloud_sql_mysql':
            return Object.assign(Object.assign({}, TargetOptionsGcpCloudSqlMysqlPost_1.TargetOptionsGcpCloudSqlMysqlPostFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_mysql' });
        case 'gcp_cloud_sql_postgres':
            return Object.assign(Object.assign({}, TargetOptionsGcpCloudSqlPostgresPost_1.TargetOptionsGcpCloudSqlPostgresPostFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_postgres' });
        case 'gcp_cloud_sql_sql_server':
            return Object.assign(Object.assign({}, TargetOptionsGcpCloudSqlSqlServerPost_1.TargetOptionsGcpCloudSqlSqlServerPostFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_sql_server' });
        case 'gcp_gcs_csv':
            return Object.assign(Object.assign({}, TargetOptionsGcpGcsCsvPost_1.TargetOptionsGcpGcsCsvPostFromJSONTyped(json, true)), { type: 'gcp_gcs_csv' });
        case 'google_ads':
            return Object.assign(Object.assign({}, TargetOptionsGoogleAdsPost_1.TargetOptionsGoogleAdsPostFromJSONTyped(json, true)), { type: 'google_ads' });
        case 'hosted_csv':
            return Object.assign(Object.assign({}, TargetOptionsHostedCsvPost_1.TargetOptionsHostedCsvPostFromJSONTyped(json, true)), { type: 'hosted_csv' });
        case 'hubspot':
            return Object.assign(Object.assign({}, TargetOptionsHubspotPost_1.TargetOptionsHubspotPostFromJSONTyped(json, true)), { type: 'hubspot' });
        case 'iterable':
            return Object.assign(Object.assign({}, TargetOptionsIterablePost_1.TargetOptionsIterablePostFromJSONTyped(json, true)), { type: 'iterable' });
        case 'klaviyo':
            return Object.assign(Object.assign({}, TargetOptionsKlaviyoPost_1.TargetOptionsKlaviyoPostFromJSONTyped(json, true)), { type: 'klaviyo' });
        case 'linkedin_ads':
            return Object.assign(Object.assign({}, TargetOptionsLinkedinAdsPost_1.TargetOptionsLinkedinAdsPostFromJSONTyped(json, true)), { type: 'linkedin_ads' });
        case 'lookup_api':
            return Object.assign(Object.assign({}, TargetOptionsLookupApiPost_1.TargetOptionsLookupApiPostFromJSONTyped(json, true)), { type: 'lookup_api' });
        case 'mysql':
            return Object.assign(Object.assign({}, TargetOptionsMysqlPost_1.TargetOptionsMysqlPostFromJSONTyped(json, true)), { type: 'mysql' });
        case 'pinterest_ads':
            return Object.assign(Object.assign({}, TargetOptionsPinterestAdsPost_1.TargetOptionsPinterestAdsPostFromJSONTyped(json, true)), { type: 'pinterest_ads' });
        case 'poplar':
            return Object.assign(Object.assign({}, TargetOptionsPoplarPost_1.TargetOptionsPoplarPostFromJSONTyped(json, true)), { type: 'poplar' });
        case 'postgres':
            return Object.assign(Object.assign({}, TargetOptionsPostgresPost_1.TargetOptionsPostgresPostFromJSONTyped(json, true)), { type: 'postgres' });
        case 'redshift':
            return Object.assign(Object.assign({}, TargetOptionsRedshiftPost_1.TargetOptionsRedshiftPostFromJSONTyped(json, true)), { type: 'redshift' });
        case 's3_csv':
            return Object.assign(Object.assign({}, TargetOptionsS3CsvPost_1.TargetOptionsS3CsvPostFromJSONTyped(json, true)), { type: 's3_csv' });
        case 'salesforce':
            return Object.assign(Object.assign({}, TargetOptionsSalesforcePost_1.TargetOptionsSalesforcePostFromJSONTyped(json, true)), { type: 'salesforce' });
        case 'salesforce_marketing_cloud':
            return Object.assign(Object.assign({}, TargetOptionsSalesforceMarketingCloudPost_1.TargetOptionsSalesforceMarketingCloudPostFromJSONTyped(json, true)), { type: 'salesforce_marketing_cloud' });
        case 'segment':
            return Object.assign(Object.assign({}, TargetOptionsSegmentPost_1.TargetOptionsSegmentPostFromJSONTyped(json, true)), { type: 'segment' });
        case 'sftp':
            return Object.assign(Object.assign({}, TargetOptionsSftpPost_1.TargetOptionsSftpPostFromJSONTyped(json, true)), { type: 'sftp' });
        case 'snowflake':
            return Object.assign(Object.assign({}, TargetOptionsSnowflakePost_1.TargetOptionsSnowflakePostFromJSONTyped(json, true)), { type: 'snowflake' });
        case 'sql_server':
            return Object.assign(Object.assign({}, TargetOptionsSqlServerPost_1.TargetOptionsSqlServerPostFromJSONTyped(json, true)), { type: 'sql_server' });
        case 'the_trade_desk':
            return Object.assign(Object.assign({}, TargetOptionsTheTradeDeskPost_1.TargetOptionsTheTradeDeskPostFromJSONTyped(json, true)), { type: 'the_trade_desk' });
        case 'tiktok':
            return Object.assign(Object.assign({}, TargetOptionsTiktokPost_1.TargetOptionsTiktokPostFromJSONTyped(json, true)), { type: 'tiktok' });
        default:
            throw new Error(`No variant of TargetOptionsPost exists with 'type=${json['type']}'`);
    }
}
exports.TargetOptionsPostFromJSONTyped = TargetOptionsPostFromJSONTyped;
function TargetOptionsPostToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'aws_aurora_mysql':
            return TargetOptionsAwsAuroraMysqlPost_1.TargetOptionsAwsAuroraMysqlPostToJSON(value);
        case 'aws_aurora_postgres':
            return TargetOptionsAwsAuroraPostgresPost_1.TargetOptionsAwsAuroraPostgresPostToJSON(value);
        case 'aws_rds_mysql':
            return TargetOptionsAwsRdsMysqlPost_1.TargetOptionsAwsRdsMysqlPostToJSON(value);
        case 'aws_rds_postgres':
            return TargetOptionsAwsRdsPostgresPost_1.TargetOptionsAwsRdsPostgresPostToJSON(value);
        case 'aws_rds_sql_server':
            return TargetOptionsAwsRdsSqlServerPost_1.TargetOptionsAwsRdsSqlServerPostToJSON(value);
        case 'aws_redshift_serverless':
            return TargetOptionsAwsRedshiftServerlessPost_1.TargetOptionsAwsRedshiftServerlessPostToJSON(value);
        case 'azure_sql_server':
            return TargetOptionsAzureSqlServerPost_1.TargetOptionsAzureSqlServerPostToJSON(value);
        case 'bigquery':
            return TargetOptionsBigQueryPost_1.TargetOptionsBigQueryPostToJSON(value);
        case 'facebook_custom_audiences':
            return TargetOptionsFacebookCustomAudiencesPost_1.TargetOptionsFacebookCustomAudiencesPostToJSON(value);
        case 'gcp_cloud_sql_mysql':
            return TargetOptionsGcpCloudSqlMysqlPost_1.TargetOptionsGcpCloudSqlMysqlPostToJSON(value);
        case 'gcp_cloud_sql_postgres':
            return TargetOptionsGcpCloudSqlPostgresPost_1.TargetOptionsGcpCloudSqlPostgresPostToJSON(value);
        case 'gcp_cloud_sql_sql_server':
            return TargetOptionsGcpCloudSqlSqlServerPost_1.TargetOptionsGcpCloudSqlSqlServerPostToJSON(value);
        case 'gcp_gcs_csv':
            return TargetOptionsGcpGcsCsvPost_1.TargetOptionsGcpGcsCsvPostToJSON(value);
        case 'google_ads':
            return TargetOptionsGoogleAdsPost_1.TargetOptionsGoogleAdsPostToJSON(value);
        case 'hosted_csv':
            return TargetOptionsHostedCsvPost_1.TargetOptionsHostedCsvPostToJSON(value);
        case 'hubspot':
            return TargetOptionsHubspotPost_1.TargetOptionsHubspotPostToJSON(value);
        case 'iterable':
            return TargetOptionsIterablePost_1.TargetOptionsIterablePostToJSON(value);
        case 'klaviyo':
            return TargetOptionsKlaviyoPost_1.TargetOptionsKlaviyoPostToJSON(value);
        case 'linkedin_ads':
            return TargetOptionsLinkedinAdsPost_1.TargetOptionsLinkedinAdsPostToJSON(value);
        case 'lookup_api':
            return TargetOptionsLookupApiPost_1.TargetOptionsLookupApiPostToJSON(value);
        case 'mysql':
            return TargetOptionsMysqlPost_1.TargetOptionsMysqlPostToJSON(value);
        case 'pinterest_ads':
            return TargetOptionsPinterestAdsPost_1.TargetOptionsPinterestAdsPostToJSON(value);
        case 'poplar':
            return TargetOptionsPoplarPost_1.TargetOptionsPoplarPostToJSON(value);
        case 'postgres':
            return TargetOptionsPostgresPost_1.TargetOptionsPostgresPostToJSON(value);
        case 'redshift':
            return TargetOptionsRedshiftPost_1.TargetOptionsRedshiftPostToJSON(value);
        case 's3_csv':
            return TargetOptionsS3CsvPost_1.TargetOptionsS3CsvPostToJSON(value);
        case 'salesforce':
            return TargetOptionsSalesforcePost_1.TargetOptionsSalesforcePostToJSON(value);
        case 'salesforce_marketing_cloud':
            return TargetOptionsSalesforceMarketingCloudPost_1.TargetOptionsSalesforceMarketingCloudPostToJSON(value);
        case 'segment':
            return TargetOptionsSegmentPost_1.TargetOptionsSegmentPostToJSON(value);
        case 'sftp':
            return TargetOptionsSftpPost_1.TargetOptionsSftpPostToJSON(value);
        case 'snowflake':
            return TargetOptionsSnowflakePost_1.TargetOptionsSnowflakePostToJSON(value);
        case 'sql_server':
            return TargetOptionsSqlServerPost_1.TargetOptionsSqlServerPostToJSON(value);
        case 'the_trade_desk':
            return TargetOptionsTheTradeDeskPost_1.TargetOptionsTheTradeDeskPostToJSON(value);
        case 'tiktok':
            return TargetOptionsTiktokPost_1.TargetOptionsTiktokPostToJSON(value);
        default:
            throw new Error(`No variant of TargetOptionsPost exists with 'type=${value['type']}'`);
    }
}
exports.TargetOptionsPostToJSON = TargetOptionsPostToJSON;
