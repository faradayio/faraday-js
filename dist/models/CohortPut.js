"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CohortPutToJSON = exports.CohortPutFromJSONTyped = exports.CohortPutFromJSON = void 0;
const runtime_1 = require("../runtime");
const CohortPlaceCondition_1 = require("./CohortPlaceCondition");
const CohortStreamCondition_1 = require("./CohortStreamCondition");
const CohortTrait_1 = require("./CohortTrait");
const RecencyPut_1 = require("./RecencyPut");
function CohortPutFromJSON(json) {
    return CohortPutFromJSONTyped(json, false);
}
exports.CohortPutFromJSON = CohortPutFromJSON;
function CohortPutFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'explore': !runtime_1.exists(json, 'explore') ? undefined : json['explore'],
        'max_count': !runtime_1.exists(json, 'max_count') ? undefined : json['max_count'],
        'max_value': !runtime_1.exists(json, 'max_value') ? undefined : json['max_value'],
        'min_count': !runtime_1.exists(json, 'min_count') ? undefined : json['min_count'],
        'min_value': !runtime_1.exists(json, 'min_value') ? undefined : json['min_value'],
        'name': json['name'],
        'place_conditions': !runtime_1.exists(json, 'place_conditions') ? undefined : (json['place_conditions'].map(CohortPlaceCondition_1.CohortPlaceConditionFromJSON)),
        'recency': !runtime_1.exists(json, 'recency') ? undefined : RecencyPut_1.RecencyPutFromJSON(json['recency']),
        'stream_conditions': !runtime_1.exists(json, 'stream_conditions') ? undefined : (json['stream_conditions'].map(CohortStreamCondition_1.CohortStreamConditionFromJSON)),
        'stream_name': !runtime_1.exists(json, 'stream_name') ? undefined : json['stream_name'],
        'traits': !runtime_1.exists(json, 'traits') ? undefined : (json['traits'].map(CohortTrait_1.CohortTraitFromJSON)),
    };
}
exports.CohortPutFromJSONTyped = CohortPutFromJSONTyped;
function CohortPutToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'explore': value.explore,
        'max_count': value.max_count,
        'max_value': value.max_value,
        'min_count': value.min_count,
        'min_value': value.min_value,
        'name': value.name,
        'place_conditions': value.place_conditions === undefined ? undefined : (value.place_conditions.map(CohortPlaceCondition_1.CohortPlaceConditionToJSON)),
        'recency': RecencyPut_1.RecencyPutToJSON(value.recency),
        'stream_conditions': value.stream_conditions === undefined ? undefined : (value.stream_conditions.map(CohortStreamCondition_1.CohortStreamConditionToJSON)),
        'stream_name': value.stream_name,
        'traits': value.traits === undefined ? undefined : (value.traits.map(CohortTrait_1.CohortTraitToJSON)),
    };
}
exports.CohortPutToJSON = CohortPutToJSON;
