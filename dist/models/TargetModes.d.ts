/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { TargetModesAggregated } from './TargetModesAggregated';
import { TargetModesHashed } from './TargetModesHashed';
import { TargetModesIdentified } from './TargetModesIdentified';
import { TargetModesReferenced } from './TargetModesReferenced';
/**
 * @type TargetModes
 * Choose how the scopes's output should be formatted for this target. The following **modes** are available:
 *
 * **`aggregated`**
 *   * This option will produce one row per geographical area.
 *   * This option is best for geo-targeted ad campaigns.
 *
 * **`hashed`**
 *   * Faraday's name, physical address, and email is emitted in hashed form. Data is randomly ordered to prevent re-identification. All payload columns are emitted except raw propensity scores and attributes.
 *   * This option facilitates digital acquisition use cases.
 *
 * **`identified`**
 *   * All identifiable information specified by `identity_sets` in source data is emitted in cleartext - see <a href="https://faraday.ai/developers/reference/createdataset">/datasets</a> for more detail. All payload columns are emitted. Your account may have a limit on how many rows can be returned.
 *   * This option is best for direct mail and canvassing campaigns.
 *
 * **`referenced`**
 *   * This option will produce one row per person based on the identifier column of a dataset of your choice. To protect privacy, this will not include identifying information other than the key you select.
 *   * This option is best for merging data back into your stack.
 * @export
 */
export declare type TargetModes = {
    mode: 'aggregated';
} & TargetModesAggregated | {
    mode: 'hashed';
} & TargetModesHashed | {
    mode: 'identified';
} & TargetModesIdentified | {
    mode: 'referenced';
} & TargetModesReferenced;
export declare function TargetModesFromJSON(json: any): TargetModes;
export declare function TargetModesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TargetModes;
export declare function TargetModesToJSON(value?: TargetModes | null): any;
