"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetOptionsMergePatchToJSON = exports.TargetOptionsMergePatchFromJSONTyped = exports.TargetOptionsMergePatchFromJSON = void 0;
const TargetOptionsAwsAuroraMysqlMergePatch_1 = require("./TargetOptionsAwsAuroraMysqlMergePatch");
const TargetOptionsAwsAuroraPostgresMergePatch_1 = require("./TargetOptionsAwsAuroraPostgresMergePatch");
const TargetOptionsAwsRdsMysqlMergePatch_1 = require("./TargetOptionsAwsRdsMysqlMergePatch");
const TargetOptionsAwsRdsPostgresMergePatch_1 = require("./TargetOptionsAwsRdsPostgresMergePatch");
const TargetOptionsAwsRdsSqlServerMergePatch_1 = require("./TargetOptionsAwsRdsSqlServerMergePatch");
const TargetOptionsAwsRedshiftServerlessMergePatch_1 = require("./TargetOptionsAwsRedshiftServerlessMergePatch");
const TargetOptionsAzureSqlServerMergePatch_1 = require("./TargetOptionsAzureSqlServerMergePatch");
const TargetOptionsBigQueryMergePatch_1 = require("./TargetOptionsBigQueryMergePatch");
const TargetOptionsFacebookCustomAudiencesMergePatch_1 = require("./TargetOptionsFacebookCustomAudiencesMergePatch");
const TargetOptionsGcpCloudSqlMysqlMergePatch_1 = require("./TargetOptionsGcpCloudSqlMysqlMergePatch");
const TargetOptionsGcpCloudSqlPostgresMergePatch_1 = require("./TargetOptionsGcpCloudSqlPostgresMergePatch");
const TargetOptionsGcpCloudSqlSqlServerMergePatch_1 = require("./TargetOptionsGcpCloudSqlSqlServerMergePatch");
const TargetOptionsGcpGcsCsvMergePatch_1 = require("./TargetOptionsGcpGcsCsvMergePatch");
const TargetOptionsGoogleAdsMergePatch_1 = require("./TargetOptionsGoogleAdsMergePatch");
const TargetOptionsHostedCsvMergePatch_1 = require("./TargetOptionsHostedCsvMergePatch");
const TargetOptionsHubspotMergePatch_1 = require("./TargetOptionsHubspotMergePatch");
const TargetOptionsIterableMergePatch_1 = require("./TargetOptionsIterableMergePatch");
const TargetOptionsKlaviyoMergePatch_1 = require("./TargetOptionsKlaviyoMergePatch");
const TargetOptionsLinkedinAdsMergePatch_1 = require("./TargetOptionsLinkedinAdsMergePatch");
const TargetOptionsLookupApiMergePatch_1 = require("./TargetOptionsLookupApiMergePatch");
const TargetOptionsMysqlMergePatch_1 = require("./TargetOptionsMysqlMergePatch");
const TargetOptionsPinterestAdsMergePatch_1 = require("./TargetOptionsPinterestAdsMergePatch");
const TargetOptionsPoplarMergePatch_1 = require("./TargetOptionsPoplarMergePatch");
const TargetOptionsPostgresMergePatch_1 = require("./TargetOptionsPostgresMergePatch");
const TargetOptionsRedshiftMergePatch_1 = require("./TargetOptionsRedshiftMergePatch");
const TargetOptionsS3CsvMergePatch_1 = require("./TargetOptionsS3CsvMergePatch");
const TargetOptionsSalesforceMarketingCloudMergePatch_1 = require("./TargetOptionsSalesforceMarketingCloudMergePatch");
const TargetOptionsSalesforceMergePatch_1 = require("./TargetOptionsSalesforceMergePatch");
const TargetOptionsSegmentMergePatch_1 = require("./TargetOptionsSegmentMergePatch");
const TargetOptionsSftpMergePatch_1 = require("./TargetOptionsSftpMergePatch");
const TargetOptionsSnowflakeMergePatch_1 = require("./TargetOptionsSnowflakeMergePatch");
const TargetOptionsSqlServerMergePatch_1 = require("./TargetOptionsSqlServerMergePatch");
const TargetOptionsTheTradeDeskMergePatch_1 = require("./TargetOptionsTheTradeDeskMergePatch");
const TargetOptionsTiktokMergePatch_1 = require("./TargetOptionsTiktokMergePatch");
function TargetOptionsMergePatchFromJSON(json) {
    return TargetOptionsMergePatchFromJSONTyped(json, false);
}
exports.TargetOptionsMergePatchFromJSON = TargetOptionsMergePatchFromJSON;
function TargetOptionsMergePatchFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'aws_aurora_mysql':
            return Object.assign(Object.assign({}, TargetOptionsAwsAuroraMysqlMergePatch_1.TargetOptionsAwsAuroraMysqlMergePatchFromJSONTyped(json, true)), { type: 'aws_aurora_mysql' });
        case 'aws_aurora_postgres':
            return Object.assign(Object.assign({}, TargetOptionsAwsAuroraPostgresMergePatch_1.TargetOptionsAwsAuroraPostgresMergePatchFromJSONTyped(json, true)), { type: 'aws_aurora_postgres' });
        case 'aws_rds_mysql':
            return Object.assign(Object.assign({}, TargetOptionsAwsRdsMysqlMergePatch_1.TargetOptionsAwsRdsMysqlMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_mysql' });
        case 'aws_rds_postgres':
            return Object.assign(Object.assign({}, TargetOptionsAwsRdsPostgresMergePatch_1.TargetOptionsAwsRdsPostgresMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_postgres' });
        case 'aws_rds_sql_server':
            return Object.assign(Object.assign({}, TargetOptionsAwsRdsSqlServerMergePatch_1.TargetOptionsAwsRdsSqlServerMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_sql_server' });
        case 'aws_redshift_serverless':
            return Object.assign(Object.assign({}, TargetOptionsAwsRedshiftServerlessMergePatch_1.TargetOptionsAwsRedshiftServerlessMergePatchFromJSONTyped(json, true)), { type: 'aws_redshift_serverless' });
        case 'azure_sql_server':
            return Object.assign(Object.assign({}, TargetOptionsAzureSqlServerMergePatch_1.TargetOptionsAzureSqlServerMergePatchFromJSONTyped(json, true)), { type: 'azure_sql_server' });
        case 'bigquery':
            return Object.assign(Object.assign({}, TargetOptionsBigQueryMergePatch_1.TargetOptionsBigQueryMergePatchFromJSONTyped(json, true)), { type: 'bigquery' });
        case 'facebook_custom_audiences':
            return Object.assign(Object.assign({}, TargetOptionsFacebookCustomAudiencesMergePatch_1.TargetOptionsFacebookCustomAudiencesMergePatchFromJSONTyped(json, true)), { type: 'facebook_custom_audiences' });
        case 'gcp_cloud_sql_mysql':
            return Object.assign(Object.assign({}, TargetOptionsGcpCloudSqlMysqlMergePatch_1.TargetOptionsGcpCloudSqlMysqlMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_mysql' });
        case 'gcp_cloud_sql_postgres':
            return Object.assign(Object.assign({}, TargetOptionsGcpCloudSqlPostgresMergePatch_1.TargetOptionsGcpCloudSqlPostgresMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_postgres' });
        case 'gcp_cloud_sql_sql_server':
            return Object.assign(Object.assign({}, TargetOptionsGcpCloudSqlSqlServerMergePatch_1.TargetOptionsGcpCloudSqlSqlServerMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_sql_server' });
        case 'gcp_gcs_csv':
            return Object.assign(Object.assign({}, TargetOptionsGcpGcsCsvMergePatch_1.TargetOptionsGcpGcsCsvMergePatchFromJSONTyped(json, true)), { type: 'gcp_gcs_csv' });
        case 'google_ads':
            return Object.assign(Object.assign({}, TargetOptionsGoogleAdsMergePatch_1.TargetOptionsGoogleAdsMergePatchFromJSONTyped(json, true)), { type: 'google_ads' });
        case 'hosted_csv':
            return Object.assign(Object.assign({}, TargetOptionsHostedCsvMergePatch_1.TargetOptionsHostedCsvMergePatchFromJSONTyped(json, true)), { type: 'hosted_csv' });
        case 'hubspot':
            return Object.assign(Object.assign({}, TargetOptionsHubspotMergePatch_1.TargetOptionsHubspotMergePatchFromJSONTyped(json, true)), { type: 'hubspot' });
        case 'iterable':
            return Object.assign(Object.assign({}, TargetOptionsIterableMergePatch_1.TargetOptionsIterableMergePatchFromJSONTyped(json, true)), { type: 'iterable' });
        case 'klaviyo':
            return Object.assign(Object.assign({}, TargetOptionsKlaviyoMergePatch_1.TargetOptionsKlaviyoMergePatchFromJSONTyped(json, true)), { type: 'klaviyo' });
        case 'linkedin_ads':
            return Object.assign(Object.assign({}, TargetOptionsLinkedinAdsMergePatch_1.TargetOptionsLinkedinAdsMergePatchFromJSONTyped(json, true)), { type: 'linkedin_ads' });
        case 'lookup_api':
            return Object.assign(Object.assign({}, TargetOptionsLookupApiMergePatch_1.TargetOptionsLookupApiMergePatchFromJSONTyped(json, true)), { type: 'lookup_api' });
        case 'mysql':
            return Object.assign(Object.assign({}, TargetOptionsMysqlMergePatch_1.TargetOptionsMysqlMergePatchFromJSONTyped(json, true)), { type: 'mysql' });
        case 'pinterest_ads':
            return Object.assign(Object.assign({}, TargetOptionsPinterestAdsMergePatch_1.TargetOptionsPinterestAdsMergePatchFromJSONTyped(json, true)), { type: 'pinterest_ads' });
        case 'poplar':
            return Object.assign(Object.assign({}, TargetOptionsPoplarMergePatch_1.TargetOptionsPoplarMergePatchFromJSONTyped(json, true)), { type: 'poplar' });
        case 'postgres':
            return Object.assign(Object.assign({}, TargetOptionsPostgresMergePatch_1.TargetOptionsPostgresMergePatchFromJSONTyped(json, true)), { type: 'postgres' });
        case 'redshift':
            return Object.assign(Object.assign({}, TargetOptionsRedshiftMergePatch_1.TargetOptionsRedshiftMergePatchFromJSONTyped(json, true)), { type: 'redshift' });
        case 's3_csv':
            return Object.assign(Object.assign({}, TargetOptionsS3CsvMergePatch_1.TargetOptionsS3CsvMergePatchFromJSONTyped(json, true)), { type: 's3_csv' });
        case 'salesforce':
            return Object.assign(Object.assign({}, TargetOptionsSalesforceMergePatch_1.TargetOptionsSalesforceMergePatchFromJSONTyped(json, true)), { type: 'salesforce' });
        case 'salesforce_marketing_cloud':
            return Object.assign(Object.assign({}, TargetOptionsSalesforceMarketingCloudMergePatch_1.TargetOptionsSalesforceMarketingCloudMergePatchFromJSONTyped(json, true)), { type: 'salesforce_marketing_cloud' });
        case 'segment':
            return Object.assign(Object.assign({}, TargetOptionsSegmentMergePatch_1.TargetOptionsSegmentMergePatchFromJSONTyped(json, true)), { type: 'segment' });
        case 'sftp':
            return Object.assign(Object.assign({}, TargetOptionsSftpMergePatch_1.TargetOptionsSftpMergePatchFromJSONTyped(json, true)), { type: 'sftp' });
        case 'snowflake':
            return Object.assign(Object.assign({}, TargetOptionsSnowflakeMergePatch_1.TargetOptionsSnowflakeMergePatchFromJSONTyped(json, true)), { type: 'snowflake' });
        case 'sql_server':
            return Object.assign(Object.assign({}, TargetOptionsSqlServerMergePatch_1.TargetOptionsSqlServerMergePatchFromJSONTyped(json, true)), { type: 'sql_server' });
        case 'the_trade_desk':
            return Object.assign(Object.assign({}, TargetOptionsTheTradeDeskMergePatch_1.TargetOptionsTheTradeDeskMergePatchFromJSONTyped(json, true)), { type: 'the_trade_desk' });
        case 'tiktok':
            return Object.assign(Object.assign({}, TargetOptionsTiktokMergePatch_1.TargetOptionsTiktokMergePatchFromJSONTyped(json, true)), { type: 'tiktok' });
        default:
            throw new Error(`No variant of TargetOptionsMergePatch exists with 'type=${json['type']}'`);
    }
}
exports.TargetOptionsMergePatchFromJSONTyped = TargetOptionsMergePatchFromJSONTyped;
function TargetOptionsMergePatchToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'aws_aurora_mysql':
            return TargetOptionsAwsAuroraMysqlMergePatch_1.TargetOptionsAwsAuroraMysqlMergePatchToJSON(value);
        case 'aws_aurora_postgres':
            return TargetOptionsAwsAuroraPostgresMergePatch_1.TargetOptionsAwsAuroraPostgresMergePatchToJSON(value);
        case 'aws_rds_mysql':
            return TargetOptionsAwsRdsMysqlMergePatch_1.TargetOptionsAwsRdsMysqlMergePatchToJSON(value);
        case 'aws_rds_postgres':
            return TargetOptionsAwsRdsPostgresMergePatch_1.TargetOptionsAwsRdsPostgresMergePatchToJSON(value);
        case 'aws_rds_sql_server':
            return TargetOptionsAwsRdsSqlServerMergePatch_1.TargetOptionsAwsRdsSqlServerMergePatchToJSON(value);
        case 'aws_redshift_serverless':
            return TargetOptionsAwsRedshiftServerlessMergePatch_1.TargetOptionsAwsRedshiftServerlessMergePatchToJSON(value);
        case 'azure_sql_server':
            return TargetOptionsAzureSqlServerMergePatch_1.TargetOptionsAzureSqlServerMergePatchToJSON(value);
        case 'bigquery':
            return TargetOptionsBigQueryMergePatch_1.TargetOptionsBigQueryMergePatchToJSON(value);
        case 'facebook_custom_audiences':
            return TargetOptionsFacebookCustomAudiencesMergePatch_1.TargetOptionsFacebookCustomAudiencesMergePatchToJSON(value);
        case 'gcp_cloud_sql_mysql':
            return TargetOptionsGcpCloudSqlMysqlMergePatch_1.TargetOptionsGcpCloudSqlMysqlMergePatchToJSON(value);
        case 'gcp_cloud_sql_postgres':
            return TargetOptionsGcpCloudSqlPostgresMergePatch_1.TargetOptionsGcpCloudSqlPostgresMergePatchToJSON(value);
        case 'gcp_cloud_sql_sql_server':
            return TargetOptionsGcpCloudSqlSqlServerMergePatch_1.TargetOptionsGcpCloudSqlSqlServerMergePatchToJSON(value);
        case 'gcp_gcs_csv':
            return TargetOptionsGcpGcsCsvMergePatch_1.TargetOptionsGcpGcsCsvMergePatchToJSON(value);
        case 'google_ads':
            return TargetOptionsGoogleAdsMergePatch_1.TargetOptionsGoogleAdsMergePatchToJSON(value);
        case 'hosted_csv':
            return TargetOptionsHostedCsvMergePatch_1.TargetOptionsHostedCsvMergePatchToJSON(value);
        case 'hubspot':
            return TargetOptionsHubspotMergePatch_1.TargetOptionsHubspotMergePatchToJSON(value);
        case 'iterable':
            return TargetOptionsIterableMergePatch_1.TargetOptionsIterableMergePatchToJSON(value);
        case 'klaviyo':
            return TargetOptionsKlaviyoMergePatch_1.TargetOptionsKlaviyoMergePatchToJSON(value);
        case 'linkedin_ads':
            return TargetOptionsLinkedinAdsMergePatch_1.TargetOptionsLinkedinAdsMergePatchToJSON(value);
        case 'lookup_api':
            return TargetOptionsLookupApiMergePatch_1.TargetOptionsLookupApiMergePatchToJSON(value);
        case 'mysql':
            return TargetOptionsMysqlMergePatch_1.TargetOptionsMysqlMergePatchToJSON(value);
        case 'pinterest_ads':
            return TargetOptionsPinterestAdsMergePatch_1.TargetOptionsPinterestAdsMergePatchToJSON(value);
        case 'poplar':
            return TargetOptionsPoplarMergePatch_1.TargetOptionsPoplarMergePatchToJSON(value);
        case 'postgres':
            return TargetOptionsPostgresMergePatch_1.TargetOptionsPostgresMergePatchToJSON(value);
        case 'redshift':
            return TargetOptionsRedshiftMergePatch_1.TargetOptionsRedshiftMergePatchToJSON(value);
        case 's3_csv':
            return TargetOptionsS3CsvMergePatch_1.TargetOptionsS3CsvMergePatchToJSON(value);
        case 'salesforce':
            return TargetOptionsSalesforceMergePatch_1.TargetOptionsSalesforceMergePatchToJSON(value);
        case 'salesforce_marketing_cloud':
            return TargetOptionsSalesforceMarketingCloudMergePatch_1.TargetOptionsSalesforceMarketingCloudMergePatchToJSON(value);
        case 'segment':
            return TargetOptionsSegmentMergePatch_1.TargetOptionsSegmentMergePatchToJSON(value);
        case 'sftp':
            return TargetOptionsSftpMergePatch_1.TargetOptionsSftpMergePatchToJSON(value);
        case 'snowflake':
            return TargetOptionsSnowflakeMergePatch_1.TargetOptionsSnowflakeMergePatchToJSON(value);
        case 'sql_server':
            return TargetOptionsSqlServerMergePatch_1.TargetOptionsSqlServerMergePatchToJSON(value);
        case 'the_trade_desk':
            return TargetOptionsTheTradeDeskMergePatch_1.TargetOptionsTheTradeDeskMergePatchToJSON(value);
        case 'tiktok':
            return TargetOptionsTiktokMergePatch_1.TargetOptionsTiktokMergePatchToJSON(value);
        default:
            throw new Error(`No variant of TargetOptionsMergePatch exists with 'type=${value['type']}'`);
    }
}
exports.TargetOptionsMergePatchToJSON = TargetOptionsMergePatchToJSON;
