"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionOptionsMergePatchToJSON = exports.ConnectionOptionsMergePatchFromJSONTyped = exports.ConnectionOptionsMergePatchFromJSON = void 0;
const ConnectionOptionsAwsAuroraMysqlMergePatch_1 = require("./ConnectionOptionsAwsAuroraMysqlMergePatch");
const ConnectionOptionsAwsAuroraPostgresMergePatch_1 = require("./ConnectionOptionsAwsAuroraPostgresMergePatch");
const ConnectionOptionsAwsRdsMysqlMergePatch_1 = require("./ConnectionOptionsAwsRdsMysqlMergePatch");
const ConnectionOptionsAwsRdsPostgresMergePatch_1 = require("./ConnectionOptionsAwsRdsPostgresMergePatch");
const ConnectionOptionsAwsRdsSqlServerMergePatch_1 = require("./ConnectionOptionsAwsRdsSqlServerMergePatch");
const ConnectionOptionsAwsRedshiftServerlessMergePatch_1 = require("./ConnectionOptionsAwsRedshiftServerlessMergePatch");
const ConnectionOptionsAzureSqlServerMergePatch_1 = require("./ConnectionOptionsAzureSqlServerMergePatch");
const ConnectionOptionsBigQueryMergePatch_1 = require("./ConnectionOptionsBigQueryMergePatch");
const ConnectionOptionsClassicMergePatch_1 = require("./ConnectionOptionsClassicMergePatch");
const ConnectionOptionsFacebookCustomAudiencesMergePatch_1 = require("./ConnectionOptionsFacebookCustomAudiencesMergePatch");
const ConnectionOptionsGcpCloudSqlMysqlMergePatch_1 = require("./ConnectionOptionsGcpCloudSqlMysqlMergePatch");
const ConnectionOptionsGcpCloudSqlPostgresMergePatch_1 = require("./ConnectionOptionsGcpCloudSqlPostgresMergePatch");
const ConnectionOptionsGcpCloudSqlSqlServerMergePatch_1 = require("./ConnectionOptionsGcpCloudSqlSqlServerMergePatch");
const ConnectionOptionsGcpGcsCsvMergePatch_1 = require("./ConnectionOptionsGcpGcsCsvMergePatch");
const ConnectionOptionsGoogleAdsMergePatch_1 = require("./ConnectionOptionsGoogleAdsMergePatch");
const ConnectionOptionsHostedCsvMergePatch_1 = require("./ConnectionOptionsHostedCsvMergePatch");
const ConnectionOptionsHubspotMergePatch_1 = require("./ConnectionOptionsHubspotMergePatch");
const ConnectionOptionsIterableMergePatch_1 = require("./ConnectionOptionsIterableMergePatch");
const ConnectionOptionsKlaviyoMergePatch_1 = require("./ConnectionOptionsKlaviyoMergePatch");
const ConnectionOptionsLinkedinAdsMergePatch_1 = require("./ConnectionOptionsLinkedinAdsMergePatch");
const ConnectionOptionsLookupApiMergePatch_1 = require("./ConnectionOptionsLookupApiMergePatch");
const ConnectionOptionsMysqlMergePatch_1 = require("./ConnectionOptionsMysqlMergePatch");
const ConnectionOptionsPinterestAdsMergePatch_1 = require("./ConnectionOptionsPinterestAdsMergePatch");
const ConnectionOptionsPoplarMergePatch_1 = require("./ConnectionOptionsPoplarMergePatch");
const ConnectionOptionsPostgresMergePatch_1 = require("./ConnectionOptionsPostgresMergePatch");
const ConnectionOptionsRechargeMergePatch_1 = require("./ConnectionOptionsRechargeMergePatch");
const ConnectionOptionsRedshiftMergePatch_1 = require("./ConnectionOptionsRedshiftMergePatch");
const ConnectionOptionsS3CsvMergePatch_1 = require("./ConnectionOptionsS3CsvMergePatch");
const ConnectionOptionsSalesforceMarketingCloudMergePatch_1 = require("./ConnectionOptionsSalesforceMarketingCloudMergePatch");
const ConnectionOptionsSalesforceMergePatch_1 = require("./ConnectionOptionsSalesforceMergePatch");
const ConnectionOptionsSegmentMergePatch_1 = require("./ConnectionOptionsSegmentMergePatch");
const ConnectionOptionsSftpMergePatch_1 = require("./ConnectionOptionsSftpMergePatch");
const ConnectionOptionsShopifyMergePatch_1 = require("./ConnectionOptionsShopifyMergePatch");
const ConnectionOptionsSnowflakeMergePatch_1 = require("./ConnectionOptionsSnowflakeMergePatch");
const ConnectionOptionsSqlServerMergePatch_1 = require("./ConnectionOptionsSqlServerMergePatch");
const ConnectionOptionsStripeMergePatch_1 = require("./ConnectionOptionsStripeMergePatch");
const ConnectionOptionsTheTradeDeskMergePatch_1 = require("./ConnectionOptionsTheTradeDeskMergePatch");
const ConnectionOptionsTiktokMergePatch_1 = require("./ConnectionOptionsTiktokMergePatch");
function ConnectionOptionsMergePatchFromJSON(json) {
    return ConnectionOptionsMergePatchFromJSONTyped(json, false);
}
exports.ConnectionOptionsMergePatchFromJSON = ConnectionOptionsMergePatchFromJSON;
function ConnectionOptionsMergePatchFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'aws_aurora_mysql':
            return Object.assign(Object.assign({}, ConnectionOptionsAwsAuroraMysqlMergePatch_1.ConnectionOptionsAwsAuroraMysqlMergePatchFromJSONTyped(json, true)), { type: 'aws_aurora_mysql' });
        case 'aws_aurora_postgres':
            return Object.assign(Object.assign({}, ConnectionOptionsAwsAuroraPostgresMergePatch_1.ConnectionOptionsAwsAuroraPostgresMergePatchFromJSONTyped(json, true)), { type: 'aws_aurora_postgres' });
        case 'aws_rds_mysql':
            return Object.assign(Object.assign({}, ConnectionOptionsAwsRdsMysqlMergePatch_1.ConnectionOptionsAwsRdsMysqlMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_mysql' });
        case 'aws_rds_postgres':
            return Object.assign(Object.assign({}, ConnectionOptionsAwsRdsPostgresMergePatch_1.ConnectionOptionsAwsRdsPostgresMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_postgres' });
        case 'aws_rds_sql_server':
            return Object.assign(Object.assign({}, ConnectionOptionsAwsRdsSqlServerMergePatch_1.ConnectionOptionsAwsRdsSqlServerMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_sql_server' });
        case 'aws_redshift_serverless':
            return Object.assign(Object.assign({}, ConnectionOptionsAwsRedshiftServerlessMergePatch_1.ConnectionOptionsAwsRedshiftServerlessMergePatchFromJSONTyped(json, true)), { type: 'aws_redshift_serverless' });
        case 'azure_sql_server':
            return Object.assign(Object.assign({}, ConnectionOptionsAzureSqlServerMergePatch_1.ConnectionOptionsAzureSqlServerMergePatchFromJSONTyped(json, true)), { type: 'azure_sql_server' });
        case 'bigquery':
            return Object.assign(Object.assign({}, ConnectionOptionsBigQueryMergePatch_1.ConnectionOptionsBigQueryMergePatchFromJSONTyped(json, true)), { type: 'bigquery' });
        case 'classic':
            return Object.assign(Object.assign({}, ConnectionOptionsClassicMergePatch_1.ConnectionOptionsClassicMergePatchFromJSONTyped(json, true)), { type: 'classic' });
        case 'facebook_custom_audiences':
            return Object.assign(Object.assign({}, ConnectionOptionsFacebookCustomAudiencesMergePatch_1.ConnectionOptionsFacebookCustomAudiencesMergePatchFromJSONTyped(json, true)), { type: 'facebook_custom_audiences' });
        case 'gcp_cloud_sql_mysql':
            return Object.assign(Object.assign({}, ConnectionOptionsGcpCloudSqlMysqlMergePatch_1.ConnectionOptionsGcpCloudSqlMysqlMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_mysql' });
        case 'gcp_cloud_sql_postgres':
            return Object.assign(Object.assign({}, ConnectionOptionsGcpCloudSqlPostgresMergePatch_1.ConnectionOptionsGcpCloudSqlPostgresMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_postgres' });
        case 'gcp_cloud_sql_sql_server':
            return Object.assign(Object.assign({}, ConnectionOptionsGcpCloudSqlSqlServerMergePatch_1.ConnectionOptionsGcpCloudSqlSqlServerMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_sql_server' });
        case 'gcp_gcs_csv':
            return Object.assign(Object.assign({}, ConnectionOptionsGcpGcsCsvMergePatch_1.ConnectionOptionsGcpGcsCsvMergePatchFromJSONTyped(json, true)), { type: 'gcp_gcs_csv' });
        case 'google_ads':
            return Object.assign(Object.assign({}, ConnectionOptionsGoogleAdsMergePatch_1.ConnectionOptionsGoogleAdsMergePatchFromJSONTyped(json, true)), { type: 'google_ads' });
        case 'hosted_csv':
            return Object.assign(Object.assign({}, ConnectionOptionsHostedCsvMergePatch_1.ConnectionOptionsHostedCsvMergePatchFromJSONTyped(json, true)), { type: 'hosted_csv' });
        case 'hubspot':
            return Object.assign(Object.assign({}, ConnectionOptionsHubspotMergePatch_1.ConnectionOptionsHubspotMergePatchFromJSONTyped(json, true)), { type: 'hubspot' });
        case 'iterable':
            return Object.assign(Object.assign({}, ConnectionOptionsIterableMergePatch_1.ConnectionOptionsIterableMergePatchFromJSONTyped(json, true)), { type: 'iterable' });
        case 'klaviyo':
            return Object.assign(Object.assign({}, ConnectionOptionsKlaviyoMergePatch_1.ConnectionOptionsKlaviyoMergePatchFromJSONTyped(json, true)), { type: 'klaviyo' });
        case 'linkedin_ads':
            return Object.assign(Object.assign({}, ConnectionOptionsLinkedinAdsMergePatch_1.ConnectionOptionsLinkedinAdsMergePatchFromJSONTyped(json, true)), { type: 'linkedin_ads' });
        case 'lookup_api':
            return Object.assign(Object.assign({}, ConnectionOptionsLookupApiMergePatch_1.ConnectionOptionsLookupApiMergePatchFromJSONTyped(json, true)), { type: 'lookup_api' });
        case 'mysql':
            return Object.assign(Object.assign({}, ConnectionOptionsMysqlMergePatch_1.ConnectionOptionsMysqlMergePatchFromJSONTyped(json, true)), { type: 'mysql' });
        case 'pinterest_ads':
            return Object.assign(Object.assign({}, ConnectionOptionsPinterestAdsMergePatch_1.ConnectionOptionsPinterestAdsMergePatchFromJSONTyped(json, true)), { type: 'pinterest_ads' });
        case 'poplar':
            return Object.assign(Object.assign({}, ConnectionOptionsPoplarMergePatch_1.ConnectionOptionsPoplarMergePatchFromJSONTyped(json, true)), { type: 'poplar' });
        case 'postgres':
            return Object.assign(Object.assign({}, ConnectionOptionsPostgresMergePatch_1.ConnectionOptionsPostgresMergePatchFromJSONTyped(json, true)), { type: 'postgres' });
        case 'recharge':
            return Object.assign(Object.assign({}, ConnectionOptionsRechargeMergePatch_1.ConnectionOptionsRechargeMergePatchFromJSONTyped(json, true)), { type: 'recharge' });
        case 'redshift':
            return Object.assign(Object.assign({}, ConnectionOptionsRedshiftMergePatch_1.ConnectionOptionsRedshiftMergePatchFromJSONTyped(json, true)), { type: 'redshift' });
        case 's3_csv':
            return Object.assign(Object.assign({}, ConnectionOptionsS3CsvMergePatch_1.ConnectionOptionsS3CsvMergePatchFromJSONTyped(json, true)), { type: 's3_csv' });
        case 'salesforce':
            return Object.assign(Object.assign({}, ConnectionOptionsSalesforceMergePatch_1.ConnectionOptionsSalesforceMergePatchFromJSONTyped(json, true)), { type: 'salesforce' });
        case 'salesforce_marketing_cloud':
            return Object.assign(Object.assign({}, ConnectionOptionsSalesforceMarketingCloudMergePatch_1.ConnectionOptionsSalesforceMarketingCloudMergePatchFromJSONTyped(json, true)), { type: 'salesforce_marketing_cloud' });
        case 'segment':
            return Object.assign(Object.assign({}, ConnectionOptionsSegmentMergePatch_1.ConnectionOptionsSegmentMergePatchFromJSONTyped(json, true)), { type: 'segment' });
        case 'sftp':
            return Object.assign(Object.assign({}, ConnectionOptionsSftpMergePatch_1.ConnectionOptionsSftpMergePatchFromJSONTyped(json, true)), { type: 'sftp' });
        case 'shopify':
            return Object.assign(Object.assign({}, ConnectionOptionsShopifyMergePatch_1.ConnectionOptionsShopifyMergePatchFromJSONTyped(json, true)), { type: 'shopify' });
        case 'snowflake':
            return Object.assign(Object.assign({}, ConnectionOptionsSnowflakeMergePatch_1.ConnectionOptionsSnowflakeMergePatchFromJSONTyped(json, true)), { type: 'snowflake' });
        case 'sql_server':
            return Object.assign(Object.assign({}, ConnectionOptionsSqlServerMergePatch_1.ConnectionOptionsSqlServerMergePatchFromJSONTyped(json, true)), { type: 'sql_server' });
        case 'stripe':
            return Object.assign(Object.assign({}, ConnectionOptionsStripeMergePatch_1.ConnectionOptionsStripeMergePatchFromJSONTyped(json, true)), { type: 'stripe' });
        case 'the_trade_desk':
            return Object.assign(Object.assign({}, ConnectionOptionsTheTradeDeskMergePatch_1.ConnectionOptionsTheTradeDeskMergePatchFromJSONTyped(json, true)), { type: 'the_trade_desk' });
        case 'tiktok':
            return Object.assign(Object.assign({}, ConnectionOptionsTiktokMergePatch_1.ConnectionOptionsTiktokMergePatchFromJSONTyped(json, true)), { type: 'tiktok' });
        default:
            throw new Error(`No variant of ConnectionOptionsMergePatch exists with 'type=${json['type']}'`);
    }
}
exports.ConnectionOptionsMergePatchFromJSONTyped = ConnectionOptionsMergePatchFromJSONTyped;
function ConnectionOptionsMergePatchToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'aws_aurora_mysql':
            return ConnectionOptionsAwsAuroraMysqlMergePatch_1.ConnectionOptionsAwsAuroraMysqlMergePatchToJSON(value);
        case 'aws_aurora_postgres':
            return ConnectionOptionsAwsAuroraPostgresMergePatch_1.ConnectionOptionsAwsAuroraPostgresMergePatchToJSON(value);
        case 'aws_rds_mysql':
            return ConnectionOptionsAwsRdsMysqlMergePatch_1.ConnectionOptionsAwsRdsMysqlMergePatchToJSON(value);
        case 'aws_rds_postgres':
            return ConnectionOptionsAwsRdsPostgresMergePatch_1.ConnectionOptionsAwsRdsPostgresMergePatchToJSON(value);
        case 'aws_rds_sql_server':
            return ConnectionOptionsAwsRdsSqlServerMergePatch_1.ConnectionOptionsAwsRdsSqlServerMergePatchToJSON(value);
        case 'aws_redshift_serverless':
            return ConnectionOptionsAwsRedshiftServerlessMergePatch_1.ConnectionOptionsAwsRedshiftServerlessMergePatchToJSON(value);
        case 'azure_sql_server':
            return ConnectionOptionsAzureSqlServerMergePatch_1.ConnectionOptionsAzureSqlServerMergePatchToJSON(value);
        case 'bigquery':
            return ConnectionOptionsBigQueryMergePatch_1.ConnectionOptionsBigQueryMergePatchToJSON(value);
        case 'classic':
            return ConnectionOptionsClassicMergePatch_1.ConnectionOptionsClassicMergePatchToJSON(value);
        case 'facebook_custom_audiences':
            return ConnectionOptionsFacebookCustomAudiencesMergePatch_1.ConnectionOptionsFacebookCustomAudiencesMergePatchToJSON(value);
        case 'gcp_cloud_sql_mysql':
            return ConnectionOptionsGcpCloudSqlMysqlMergePatch_1.ConnectionOptionsGcpCloudSqlMysqlMergePatchToJSON(value);
        case 'gcp_cloud_sql_postgres':
            return ConnectionOptionsGcpCloudSqlPostgresMergePatch_1.ConnectionOptionsGcpCloudSqlPostgresMergePatchToJSON(value);
        case 'gcp_cloud_sql_sql_server':
            return ConnectionOptionsGcpCloudSqlSqlServerMergePatch_1.ConnectionOptionsGcpCloudSqlSqlServerMergePatchToJSON(value);
        case 'gcp_gcs_csv':
            return ConnectionOptionsGcpGcsCsvMergePatch_1.ConnectionOptionsGcpGcsCsvMergePatchToJSON(value);
        case 'google_ads':
            return ConnectionOptionsGoogleAdsMergePatch_1.ConnectionOptionsGoogleAdsMergePatchToJSON(value);
        case 'hosted_csv':
            return ConnectionOptionsHostedCsvMergePatch_1.ConnectionOptionsHostedCsvMergePatchToJSON(value);
        case 'hubspot':
            return ConnectionOptionsHubspotMergePatch_1.ConnectionOptionsHubspotMergePatchToJSON(value);
        case 'iterable':
            return ConnectionOptionsIterableMergePatch_1.ConnectionOptionsIterableMergePatchToJSON(value);
        case 'klaviyo':
            return ConnectionOptionsKlaviyoMergePatch_1.ConnectionOptionsKlaviyoMergePatchToJSON(value);
        case 'linkedin_ads':
            return ConnectionOptionsLinkedinAdsMergePatch_1.ConnectionOptionsLinkedinAdsMergePatchToJSON(value);
        case 'lookup_api':
            return ConnectionOptionsLookupApiMergePatch_1.ConnectionOptionsLookupApiMergePatchToJSON(value);
        case 'mysql':
            return ConnectionOptionsMysqlMergePatch_1.ConnectionOptionsMysqlMergePatchToJSON(value);
        case 'pinterest_ads':
            return ConnectionOptionsPinterestAdsMergePatch_1.ConnectionOptionsPinterestAdsMergePatchToJSON(value);
        case 'poplar':
            return ConnectionOptionsPoplarMergePatch_1.ConnectionOptionsPoplarMergePatchToJSON(value);
        case 'postgres':
            return ConnectionOptionsPostgresMergePatch_1.ConnectionOptionsPostgresMergePatchToJSON(value);
        case 'recharge':
            return ConnectionOptionsRechargeMergePatch_1.ConnectionOptionsRechargeMergePatchToJSON(value);
        case 'redshift':
            return ConnectionOptionsRedshiftMergePatch_1.ConnectionOptionsRedshiftMergePatchToJSON(value);
        case 's3_csv':
            return ConnectionOptionsS3CsvMergePatch_1.ConnectionOptionsS3CsvMergePatchToJSON(value);
        case 'salesforce':
            return ConnectionOptionsSalesforceMergePatch_1.ConnectionOptionsSalesforceMergePatchToJSON(value);
        case 'salesforce_marketing_cloud':
            return ConnectionOptionsSalesforceMarketingCloudMergePatch_1.ConnectionOptionsSalesforceMarketingCloudMergePatchToJSON(value);
        case 'segment':
            return ConnectionOptionsSegmentMergePatch_1.ConnectionOptionsSegmentMergePatchToJSON(value);
        case 'sftp':
            return ConnectionOptionsSftpMergePatch_1.ConnectionOptionsSftpMergePatchToJSON(value);
        case 'shopify':
            return ConnectionOptionsShopifyMergePatch_1.ConnectionOptionsShopifyMergePatchToJSON(value);
        case 'snowflake':
            return ConnectionOptionsSnowflakeMergePatch_1.ConnectionOptionsSnowflakeMergePatchToJSON(value);
        case 'sql_server':
            return ConnectionOptionsSqlServerMergePatch_1.ConnectionOptionsSqlServerMergePatchToJSON(value);
        case 'stripe':
            return ConnectionOptionsStripeMergePatch_1.ConnectionOptionsStripeMergePatchToJSON(value);
        case 'the_trade_desk':
            return ConnectionOptionsTheTradeDeskMergePatch_1.ConnectionOptionsTheTradeDeskMergePatchToJSON(value);
        case 'tiktok':
            return ConnectionOptionsTiktokMergePatch_1.ConnectionOptionsTiktokMergePatchToJSON(value);
        default:
            throw new Error(`No variant of ConnectionOptionsMergePatch exists with 'type=${value['type']}'`);
    }
}
exports.ConnectionOptionsMergePatchToJSON = ConnectionOptionsMergePatchToJSON;
