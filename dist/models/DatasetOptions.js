"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetOptionsToJSON = exports.DatasetOptionsFromJSONTyped = exports.DatasetOptionsFromJSON = void 0;
const DatasetOptionsAwsAuroraMysql_1 = require("./DatasetOptionsAwsAuroraMysql");
const DatasetOptionsAwsAuroraPostgres_1 = require("./DatasetOptionsAwsAuroraPostgres");
const DatasetOptionsAwsRdsMysql_1 = require("./DatasetOptionsAwsRdsMysql");
const DatasetOptionsAwsRdsPostgres_1 = require("./DatasetOptionsAwsRdsPostgres");
const DatasetOptionsAwsRdsSqlServer_1 = require("./DatasetOptionsAwsRdsSqlServer");
const DatasetOptionsAwsRedshiftServerless_1 = require("./DatasetOptionsAwsRedshiftServerless");
const DatasetOptionsAzureSqlServer_1 = require("./DatasetOptionsAzureSqlServer");
const DatasetOptionsBigQuery_1 = require("./DatasetOptionsBigQuery");
const DatasetOptionsClassic_1 = require("./DatasetOptionsClassic");
const DatasetOptionsGcpCloudSqlMysql_1 = require("./DatasetOptionsGcpCloudSqlMysql");
const DatasetOptionsGcpCloudSqlPostgres_1 = require("./DatasetOptionsGcpCloudSqlPostgres");
const DatasetOptionsGcpCloudSqlSqlServer_1 = require("./DatasetOptionsGcpCloudSqlSqlServer");
const DatasetOptionsGcpGcsCsv_1 = require("./DatasetOptionsGcpGcsCsv");
const DatasetOptionsHostedCsv_1 = require("./DatasetOptionsHostedCsv");
const DatasetOptionsHubspot_1 = require("./DatasetOptionsHubspot");
const DatasetOptionsIterable_1 = require("./DatasetOptionsIterable");
const DatasetOptionsKlaviyo_1 = require("./DatasetOptionsKlaviyo");
const DatasetOptionsMysql_1 = require("./DatasetOptionsMysql");
const DatasetOptionsPostgres_1 = require("./DatasetOptionsPostgres");
const DatasetOptionsRecharge_1 = require("./DatasetOptionsRecharge");
const DatasetOptionsRedshift_1 = require("./DatasetOptionsRedshift");
const DatasetOptionsS3Csv_1 = require("./DatasetOptionsS3Csv");
const DatasetOptionsSalesforce_1 = require("./DatasetOptionsSalesforce");
const DatasetOptionsSalesforceMarketingCloud_1 = require("./DatasetOptionsSalesforceMarketingCloud");
const DatasetOptionsSftp_1 = require("./DatasetOptionsSftp");
const DatasetOptionsShopify_1 = require("./DatasetOptionsShopify");
const DatasetOptionsSnowflake_1 = require("./DatasetOptionsSnowflake");
const DatasetOptionsSqlServer_1 = require("./DatasetOptionsSqlServer");
const DatasetOptionsStripe_1 = require("./DatasetOptionsStripe");
function DatasetOptionsFromJSON(json) {
    return DatasetOptionsFromJSONTyped(json, false);
}
exports.DatasetOptionsFromJSON = DatasetOptionsFromJSON;
function DatasetOptionsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'aws_aurora_mysql':
            return Object.assign(Object.assign({}, DatasetOptionsAwsAuroraMysql_1.DatasetOptionsAwsAuroraMysqlFromJSONTyped(json, true)), { type: 'aws_aurora_mysql' });
        case 'aws_aurora_postgres':
            return Object.assign(Object.assign({}, DatasetOptionsAwsAuroraPostgres_1.DatasetOptionsAwsAuroraPostgresFromJSONTyped(json, true)), { type: 'aws_aurora_postgres' });
        case 'aws_rds_mysql':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRdsMysql_1.DatasetOptionsAwsRdsMysqlFromJSONTyped(json, true)), { type: 'aws_rds_mysql' });
        case 'aws_rds_postgres':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRdsPostgres_1.DatasetOptionsAwsRdsPostgresFromJSONTyped(json, true)), { type: 'aws_rds_postgres' });
        case 'aws_rds_sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRdsSqlServer_1.DatasetOptionsAwsRdsSqlServerFromJSONTyped(json, true)), { type: 'aws_rds_sql_server' });
        case 'aws_redshift_serverless':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRedshiftServerless_1.DatasetOptionsAwsRedshiftServerlessFromJSONTyped(json, true)), { type: 'aws_redshift_serverless' });
        case 'azure_sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsAzureSqlServer_1.DatasetOptionsAzureSqlServerFromJSONTyped(json, true)), { type: 'azure_sql_server' });
        case 'bigquery':
            return Object.assign(Object.assign({}, DatasetOptionsBigQuery_1.DatasetOptionsBigQueryFromJSONTyped(json, true)), { type: 'bigquery' });
        case 'classic':
            return Object.assign(Object.assign({}, DatasetOptionsClassic_1.DatasetOptionsClassicFromJSONTyped(json, true)), { type: 'classic' });
        case 'gcp_cloud_sql_mysql':
            return Object.assign(Object.assign({}, DatasetOptionsGcpCloudSqlMysql_1.DatasetOptionsGcpCloudSqlMysqlFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_mysql' });
        case 'gcp_cloud_sql_postgres':
            return Object.assign(Object.assign({}, DatasetOptionsGcpCloudSqlPostgres_1.DatasetOptionsGcpCloudSqlPostgresFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_postgres' });
        case 'gcp_cloud_sql_sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsGcpCloudSqlSqlServer_1.DatasetOptionsGcpCloudSqlSqlServerFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_sql_server' });
        case 'gcp_gcs_csv':
            return Object.assign(Object.assign({}, DatasetOptionsGcpGcsCsv_1.DatasetOptionsGcpGcsCsvFromJSONTyped(json, true)), { type: 'gcp_gcs_csv' });
        case 'hosted_csv':
            return Object.assign(Object.assign({}, DatasetOptionsHostedCsv_1.DatasetOptionsHostedCsvFromJSONTyped(json, true)), { type: 'hosted_csv' });
        case 'hubspot':
            return Object.assign(Object.assign({}, DatasetOptionsHubspot_1.DatasetOptionsHubspotFromJSONTyped(json, true)), { type: 'hubspot' });
        case 'iterable':
            return Object.assign(Object.assign({}, DatasetOptionsIterable_1.DatasetOptionsIterableFromJSONTyped(json, true)), { type: 'iterable' });
        case 'klaviyo':
            return Object.assign(Object.assign({}, DatasetOptionsKlaviyo_1.DatasetOptionsKlaviyoFromJSONTyped(json, true)), { type: 'klaviyo' });
        case 'mysql':
            return Object.assign(Object.assign({}, DatasetOptionsMysql_1.DatasetOptionsMysqlFromJSONTyped(json, true)), { type: 'mysql' });
        case 'postgres':
            return Object.assign(Object.assign({}, DatasetOptionsPostgres_1.DatasetOptionsPostgresFromJSONTyped(json, true)), { type: 'postgres' });
        case 'recharge':
            return Object.assign(Object.assign({}, DatasetOptionsRecharge_1.DatasetOptionsRechargeFromJSONTyped(json, true)), { type: 'recharge' });
        case 'redshift':
            return Object.assign(Object.assign({}, DatasetOptionsRedshift_1.DatasetOptionsRedshiftFromJSONTyped(json, true)), { type: 'redshift' });
        case 's3_csv':
            return Object.assign(Object.assign({}, DatasetOptionsS3Csv_1.DatasetOptionsS3CsvFromJSONTyped(json, true)), { type: 's3_csv' });
        case 'salesforce':
            return Object.assign(Object.assign({}, DatasetOptionsSalesforce_1.DatasetOptionsSalesforceFromJSONTyped(json, true)), { type: 'salesforce' });
        case 'salesforce_marketing_cloud':
            return Object.assign(Object.assign({}, DatasetOptionsSalesforceMarketingCloud_1.DatasetOptionsSalesforceMarketingCloudFromJSONTyped(json, true)), { type: 'salesforce_marketing_cloud' });
        case 'sftp':
            return Object.assign(Object.assign({}, DatasetOptionsSftp_1.DatasetOptionsSftpFromJSONTyped(json, true)), { type: 'sftp' });
        case 'shopify':
            return Object.assign(Object.assign({}, DatasetOptionsShopify_1.DatasetOptionsShopifyFromJSONTyped(json, true)), { type: 'shopify' });
        case 'snowflake':
            return Object.assign(Object.assign({}, DatasetOptionsSnowflake_1.DatasetOptionsSnowflakeFromJSONTyped(json, true)), { type: 'snowflake' });
        case 'sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsSqlServer_1.DatasetOptionsSqlServerFromJSONTyped(json, true)), { type: 'sql_server' });
        case 'stripe':
            return Object.assign(Object.assign({}, DatasetOptionsStripe_1.DatasetOptionsStripeFromJSONTyped(json, true)), { type: 'stripe' });
        default:
            throw new Error(`No variant of DatasetOptions exists with 'type=${json['type']}'`);
    }
}
exports.DatasetOptionsFromJSONTyped = DatasetOptionsFromJSONTyped;
function DatasetOptionsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'aws_aurora_mysql':
            return DatasetOptionsAwsAuroraMysql_1.DatasetOptionsAwsAuroraMysqlToJSON(value);
        case 'aws_aurora_postgres':
            return DatasetOptionsAwsAuroraPostgres_1.DatasetOptionsAwsAuroraPostgresToJSON(value);
        case 'aws_rds_mysql':
            return DatasetOptionsAwsRdsMysql_1.DatasetOptionsAwsRdsMysqlToJSON(value);
        case 'aws_rds_postgres':
            return DatasetOptionsAwsRdsPostgres_1.DatasetOptionsAwsRdsPostgresToJSON(value);
        case 'aws_rds_sql_server':
            return DatasetOptionsAwsRdsSqlServer_1.DatasetOptionsAwsRdsSqlServerToJSON(value);
        case 'aws_redshift_serverless':
            return DatasetOptionsAwsRedshiftServerless_1.DatasetOptionsAwsRedshiftServerlessToJSON(value);
        case 'azure_sql_server':
            return DatasetOptionsAzureSqlServer_1.DatasetOptionsAzureSqlServerToJSON(value);
        case 'bigquery':
            return DatasetOptionsBigQuery_1.DatasetOptionsBigQueryToJSON(value);
        case 'classic':
            return DatasetOptionsClassic_1.DatasetOptionsClassicToJSON(value);
        case 'gcp_cloud_sql_mysql':
            return DatasetOptionsGcpCloudSqlMysql_1.DatasetOptionsGcpCloudSqlMysqlToJSON(value);
        case 'gcp_cloud_sql_postgres':
            return DatasetOptionsGcpCloudSqlPostgres_1.DatasetOptionsGcpCloudSqlPostgresToJSON(value);
        case 'gcp_cloud_sql_sql_server':
            return DatasetOptionsGcpCloudSqlSqlServer_1.DatasetOptionsGcpCloudSqlSqlServerToJSON(value);
        case 'gcp_gcs_csv':
            return DatasetOptionsGcpGcsCsv_1.DatasetOptionsGcpGcsCsvToJSON(value);
        case 'hosted_csv':
            return DatasetOptionsHostedCsv_1.DatasetOptionsHostedCsvToJSON(value);
        case 'hubspot':
            return DatasetOptionsHubspot_1.DatasetOptionsHubspotToJSON(value);
        case 'iterable':
            return DatasetOptionsIterable_1.DatasetOptionsIterableToJSON(value);
        case 'klaviyo':
            return DatasetOptionsKlaviyo_1.DatasetOptionsKlaviyoToJSON(value);
        case 'mysql':
            return DatasetOptionsMysql_1.DatasetOptionsMysqlToJSON(value);
        case 'postgres':
            return DatasetOptionsPostgres_1.DatasetOptionsPostgresToJSON(value);
        case 'recharge':
            return DatasetOptionsRecharge_1.DatasetOptionsRechargeToJSON(value);
        case 'redshift':
            return DatasetOptionsRedshift_1.DatasetOptionsRedshiftToJSON(value);
        case 's3_csv':
            return DatasetOptionsS3Csv_1.DatasetOptionsS3CsvToJSON(value);
        case 'salesforce':
            return DatasetOptionsSalesforce_1.DatasetOptionsSalesforceToJSON(value);
        case 'salesforce_marketing_cloud':
            return DatasetOptionsSalesforceMarketingCloud_1.DatasetOptionsSalesforceMarketingCloudToJSON(value);
        case 'sftp':
            return DatasetOptionsSftp_1.DatasetOptionsSftpToJSON(value);
        case 'shopify':
            return DatasetOptionsShopify_1.DatasetOptionsShopifyToJSON(value);
        case 'snowflake':
            return DatasetOptionsSnowflake_1.DatasetOptionsSnowflakeToJSON(value);
        case 'sql_server':
            return DatasetOptionsSqlServer_1.DatasetOptionsSqlServerToJSON(value);
        case 'stripe':
            return DatasetOptionsStripe_1.DatasetOptionsStripeToJSON(value);
        default:
            throw new Error(`No variant of DatasetOptions exists with 'type=${value['type']}'`);
    }
}
exports.DatasetOptionsToJSON = DatasetOptionsToJSON;
