/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TargetStructureTransformation
 */
export interface TargetStructureTransformation {
    /**
     * The method of aggregation. Applies to aggregation targets only.
     * @type {string}
     * @memberof TargetStructureTransformation
     */
    aggregation?: TargetStructureTransformationAggregationEnum;
    /**
     * For scope columns that can be aggregated with `countif` (currently just persona sets), this is the value being counted (i.e. the persona ID). Applies to aggregation targets only.
     * @type {string}
     * @memberof TargetStructureTransformation
     */
    aggregation_criteria?: string;
    /**
     * Set this to true when exporting first party identifiers (given by <a href="https://faraday.ai/developers/reference/createdataset">identity_sets</a>).
     *
     * If `true`, `scope_col` represents the dataset field name being selected (ex: "client_email").
     * @type {boolean}
     * @memberof TargetStructureTransformation
     */
    is_identity_col?: boolean;
    /**
     * The name of this column in the target export. Can be the same as `scope_col`.
     * @type {string}
     * @memberof TargetStructureTransformation
     */
    output_col: string;
    /**
     * The name of the scope column to export.
     *
     * Users can supply either the machine-readable name (with underscored uuid) or the human-readable name (with literates).
     * @type {string}
     * @memberof TargetStructureTransformation
     */
    scope_col: string;
}
/**
* @export
* @enum {string}
*/
export declare enum TargetStructureTransformationAggregationEnum {
    Avg = "avg",
    Count = "count",
    Countif = "countif"
}
export declare function TargetStructureTransformationFromJSON(json: any): TargetStructureTransformation;
export declare function TargetStructureTransformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TargetStructureTransformation;
export declare function TargetStructureTransformationToJSON(value?: TargetStructureTransformation | null): any;
