"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetOptionsMergePatchToJSON = exports.DatasetOptionsMergePatchFromJSONTyped = exports.DatasetOptionsMergePatchFromJSON = void 0;
const DatasetOptionsAwsAuroraMysqlMergePatch_1 = require("./DatasetOptionsAwsAuroraMysqlMergePatch");
const DatasetOptionsAwsAuroraPostgresMergePatch_1 = require("./DatasetOptionsAwsAuroraPostgresMergePatch");
const DatasetOptionsAwsRdsMysqlMergePatch_1 = require("./DatasetOptionsAwsRdsMysqlMergePatch");
const DatasetOptionsAwsRdsPostgresMergePatch_1 = require("./DatasetOptionsAwsRdsPostgresMergePatch");
const DatasetOptionsAwsRdsSqlServerMergePatch_1 = require("./DatasetOptionsAwsRdsSqlServerMergePatch");
const DatasetOptionsAwsRedshiftServerlessMergePatch_1 = require("./DatasetOptionsAwsRedshiftServerlessMergePatch");
const DatasetOptionsAzureSqlServerMergePatch_1 = require("./DatasetOptionsAzureSqlServerMergePatch");
const DatasetOptionsBigQueryMergePatch_1 = require("./DatasetOptionsBigQueryMergePatch");
const DatasetOptionsClassicMergePatch_1 = require("./DatasetOptionsClassicMergePatch");
const DatasetOptionsGcpCloudSqlMysqlMergePatch_1 = require("./DatasetOptionsGcpCloudSqlMysqlMergePatch");
const DatasetOptionsGcpCloudSqlPostgresMergePatch_1 = require("./DatasetOptionsGcpCloudSqlPostgresMergePatch");
const DatasetOptionsGcpCloudSqlSqlServerMergePatch_1 = require("./DatasetOptionsGcpCloudSqlSqlServerMergePatch");
const DatasetOptionsGcpGcsCsvMergePatch_1 = require("./DatasetOptionsGcpGcsCsvMergePatch");
const DatasetOptionsHostedCsvMergePatch_1 = require("./DatasetOptionsHostedCsvMergePatch");
const DatasetOptionsHubspotMergePatch_1 = require("./DatasetOptionsHubspotMergePatch");
const DatasetOptionsIterableMergePatch_1 = require("./DatasetOptionsIterableMergePatch");
const DatasetOptionsKlaviyoMergePatch_1 = require("./DatasetOptionsKlaviyoMergePatch");
const DatasetOptionsMysqlMergePatch_1 = require("./DatasetOptionsMysqlMergePatch");
const DatasetOptionsPostgresMergePatch_1 = require("./DatasetOptionsPostgresMergePatch");
const DatasetOptionsRechargeMergePatch_1 = require("./DatasetOptionsRechargeMergePatch");
const DatasetOptionsRedshiftMergePatch_1 = require("./DatasetOptionsRedshiftMergePatch");
const DatasetOptionsS3CsvMergePatch_1 = require("./DatasetOptionsS3CsvMergePatch");
const DatasetOptionsSalesforceMarketingCloudMergePatch_1 = require("./DatasetOptionsSalesforceMarketingCloudMergePatch");
const DatasetOptionsSalesforceMergePatch_1 = require("./DatasetOptionsSalesforceMergePatch");
const DatasetOptionsSftpMergePatch_1 = require("./DatasetOptionsSftpMergePatch");
const DatasetOptionsShopifyMergePatch_1 = require("./DatasetOptionsShopifyMergePatch");
const DatasetOptionsSnowflakeMergePatch_1 = require("./DatasetOptionsSnowflakeMergePatch");
const DatasetOptionsSqlServerMergePatch_1 = require("./DatasetOptionsSqlServerMergePatch");
const DatasetOptionsStripeMergePatch_1 = require("./DatasetOptionsStripeMergePatch");
function DatasetOptionsMergePatchFromJSON(json) {
    return DatasetOptionsMergePatchFromJSONTyped(json, false);
}
exports.DatasetOptionsMergePatchFromJSON = DatasetOptionsMergePatchFromJSON;
function DatasetOptionsMergePatchFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'aws_aurora_mysql':
            return Object.assign(Object.assign({}, DatasetOptionsAwsAuroraMysqlMergePatch_1.DatasetOptionsAwsAuroraMysqlMergePatchFromJSONTyped(json, true)), { type: 'aws_aurora_mysql' });
        case 'aws_aurora_postgres':
            return Object.assign(Object.assign({}, DatasetOptionsAwsAuroraPostgresMergePatch_1.DatasetOptionsAwsAuroraPostgresMergePatchFromJSONTyped(json, true)), { type: 'aws_aurora_postgres' });
        case 'aws_rds_mysql':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRdsMysqlMergePatch_1.DatasetOptionsAwsRdsMysqlMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_mysql' });
        case 'aws_rds_postgres':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRdsPostgresMergePatch_1.DatasetOptionsAwsRdsPostgresMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_postgres' });
        case 'aws_rds_sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRdsSqlServerMergePatch_1.DatasetOptionsAwsRdsSqlServerMergePatchFromJSONTyped(json, true)), { type: 'aws_rds_sql_server' });
        case 'aws_redshift_serverless':
            return Object.assign(Object.assign({}, DatasetOptionsAwsRedshiftServerlessMergePatch_1.DatasetOptionsAwsRedshiftServerlessMergePatchFromJSONTyped(json, true)), { type: 'aws_redshift_serverless' });
        case 'azure_sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsAzureSqlServerMergePatch_1.DatasetOptionsAzureSqlServerMergePatchFromJSONTyped(json, true)), { type: 'azure_sql_server' });
        case 'bigquery':
            return Object.assign(Object.assign({}, DatasetOptionsBigQueryMergePatch_1.DatasetOptionsBigQueryMergePatchFromJSONTyped(json, true)), { type: 'bigquery' });
        case 'classic':
            return Object.assign(Object.assign({}, DatasetOptionsClassicMergePatch_1.DatasetOptionsClassicMergePatchFromJSONTyped(json, true)), { type: 'classic' });
        case 'gcp_cloud_sql_mysql':
            return Object.assign(Object.assign({}, DatasetOptionsGcpCloudSqlMysqlMergePatch_1.DatasetOptionsGcpCloudSqlMysqlMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_mysql' });
        case 'gcp_cloud_sql_postgres':
            return Object.assign(Object.assign({}, DatasetOptionsGcpCloudSqlPostgresMergePatch_1.DatasetOptionsGcpCloudSqlPostgresMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_postgres' });
        case 'gcp_cloud_sql_sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsGcpCloudSqlSqlServerMergePatch_1.DatasetOptionsGcpCloudSqlSqlServerMergePatchFromJSONTyped(json, true)), { type: 'gcp_cloud_sql_sql_server' });
        case 'gcp_gcs_csv':
            return Object.assign(Object.assign({}, DatasetOptionsGcpGcsCsvMergePatch_1.DatasetOptionsGcpGcsCsvMergePatchFromJSONTyped(json, true)), { type: 'gcp_gcs_csv' });
        case 'hosted_csv':
            return Object.assign(Object.assign({}, DatasetOptionsHostedCsvMergePatch_1.DatasetOptionsHostedCsvMergePatchFromJSONTyped(json, true)), { type: 'hosted_csv' });
        case 'hubspot':
            return Object.assign(Object.assign({}, DatasetOptionsHubspotMergePatch_1.DatasetOptionsHubspotMergePatchFromJSONTyped(json, true)), { type: 'hubspot' });
        case 'iterable':
            return Object.assign(Object.assign({}, DatasetOptionsIterableMergePatch_1.DatasetOptionsIterableMergePatchFromJSONTyped(json, true)), { type: 'iterable' });
        case 'klaviyo':
            return Object.assign(Object.assign({}, DatasetOptionsKlaviyoMergePatch_1.DatasetOptionsKlaviyoMergePatchFromJSONTyped(json, true)), { type: 'klaviyo' });
        case 'mysql':
            return Object.assign(Object.assign({}, DatasetOptionsMysqlMergePatch_1.DatasetOptionsMysqlMergePatchFromJSONTyped(json, true)), { type: 'mysql' });
        case 'postgres':
            return Object.assign(Object.assign({}, DatasetOptionsPostgresMergePatch_1.DatasetOptionsPostgresMergePatchFromJSONTyped(json, true)), { type: 'postgres' });
        case 'recharge':
            return Object.assign(Object.assign({}, DatasetOptionsRechargeMergePatch_1.DatasetOptionsRechargeMergePatchFromJSONTyped(json, true)), { type: 'recharge' });
        case 'redshift':
            return Object.assign(Object.assign({}, DatasetOptionsRedshiftMergePatch_1.DatasetOptionsRedshiftMergePatchFromJSONTyped(json, true)), { type: 'redshift' });
        case 's3_csv':
            return Object.assign(Object.assign({}, DatasetOptionsS3CsvMergePatch_1.DatasetOptionsS3CsvMergePatchFromJSONTyped(json, true)), { type: 's3_csv' });
        case 'salesforce':
            return Object.assign(Object.assign({}, DatasetOptionsSalesforceMergePatch_1.DatasetOptionsSalesforceMergePatchFromJSONTyped(json, true)), { type: 'salesforce' });
        case 'salesforce_marketing_cloud':
            return Object.assign(Object.assign({}, DatasetOptionsSalesforceMarketingCloudMergePatch_1.DatasetOptionsSalesforceMarketingCloudMergePatchFromJSONTyped(json, true)), { type: 'salesforce_marketing_cloud' });
        case 'sftp':
            return Object.assign(Object.assign({}, DatasetOptionsSftpMergePatch_1.DatasetOptionsSftpMergePatchFromJSONTyped(json, true)), { type: 'sftp' });
        case 'shopify':
            return Object.assign(Object.assign({}, DatasetOptionsShopifyMergePatch_1.DatasetOptionsShopifyMergePatchFromJSONTyped(json, true)), { type: 'shopify' });
        case 'snowflake':
            return Object.assign(Object.assign({}, DatasetOptionsSnowflakeMergePatch_1.DatasetOptionsSnowflakeMergePatchFromJSONTyped(json, true)), { type: 'snowflake' });
        case 'sql_server':
            return Object.assign(Object.assign({}, DatasetOptionsSqlServerMergePatch_1.DatasetOptionsSqlServerMergePatchFromJSONTyped(json, true)), { type: 'sql_server' });
        case 'stripe':
            return Object.assign(Object.assign({}, DatasetOptionsStripeMergePatch_1.DatasetOptionsStripeMergePatchFromJSONTyped(json, true)), { type: 'stripe' });
        default:
            throw new Error(`No variant of DatasetOptionsMergePatch exists with 'type=${json['type']}'`);
    }
}
exports.DatasetOptionsMergePatchFromJSONTyped = DatasetOptionsMergePatchFromJSONTyped;
function DatasetOptionsMergePatchToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'aws_aurora_mysql':
            return DatasetOptionsAwsAuroraMysqlMergePatch_1.DatasetOptionsAwsAuroraMysqlMergePatchToJSON(value);
        case 'aws_aurora_postgres':
            return DatasetOptionsAwsAuroraPostgresMergePatch_1.DatasetOptionsAwsAuroraPostgresMergePatchToJSON(value);
        case 'aws_rds_mysql':
            return DatasetOptionsAwsRdsMysqlMergePatch_1.DatasetOptionsAwsRdsMysqlMergePatchToJSON(value);
        case 'aws_rds_postgres':
            return DatasetOptionsAwsRdsPostgresMergePatch_1.DatasetOptionsAwsRdsPostgresMergePatchToJSON(value);
        case 'aws_rds_sql_server':
            return DatasetOptionsAwsRdsSqlServerMergePatch_1.DatasetOptionsAwsRdsSqlServerMergePatchToJSON(value);
        case 'aws_redshift_serverless':
            return DatasetOptionsAwsRedshiftServerlessMergePatch_1.DatasetOptionsAwsRedshiftServerlessMergePatchToJSON(value);
        case 'azure_sql_server':
            return DatasetOptionsAzureSqlServerMergePatch_1.DatasetOptionsAzureSqlServerMergePatchToJSON(value);
        case 'bigquery':
            return DatasetOptionsBigQueryMergePatch_1.DatasetOptionsBigQueryMergePatchToJSON(value);
        case 'classic':
            return DatasetOptionsClassicMergePatch_1.DatasetOptionsClassicMergePatchToJSON(value);
        case 'gcp_cloud_sql_mysql':
            return DatasetOptionsGcpCloudSqlMysqlMergePatch_1.DatasetOptionsGcpCloudSqlMysqlMergePatchToJSON(value);
        case 'gcp_cloud_sql_postgres':
            return DatasetOptionsGcpCloudSqlPostgresMergePatch_1.DatasetOptionsGcpCloudSqlPostgresMergePatchToJSON(value);
        case 'gcp_cloud_sql_sql_server':
            return DatasetOptionsGcpCloudSqlSqlServerMergePatch_1.DatasetOptionsGcpCloudSqlSqlServerMergePatchToJSON(value);
        case 'gcp_gcs_csv':
            return DatasetOptionsGcpGcsCsvMergePatch_1.DatasetOptionsGcpGcsCsvMergePatchToJSON(value);
        case 'hosted_csv':
            return DatasetOptionsHostedCsvMergePatch_1.DatasetOptionsHostedCsvMergePatchToJSON(value);
        case 'hubspot':
            return DatasetOptionsHubspotMergePatch_1.DatasetOptionsHubspotMergePatchToJSON(value);
        case 'iterable':
            return DatasetOptionsIterableMergePatch_1.DatasetOptionsIterableMergePatchToJSON(value);
        case 'klaviyo':
            return DatasetOptionsKlaviyoMergePatch_1.DatasetOptionsKlaviyoMergePatchToJSON(value);
        case 'mysql':
            return DatasetOptionsMysqlMergePatch_1.DatasetOptionsMysqlMergePatchToJSON(value);
        case 'postgres':
            return DatasetOptionsPostgresMergePatch_1.DatasetOptionsPostgresMergePatchToJSON(value);
        case 'recharge':
            return DatasetOptionsRechargeMergePatch_1.DatasetOptionsRechargeMergePatchToJSON(value);
        case 'redshift':
            return DatasetOptionsRedshiftMergePatch_1.DatasetOptionsRedshiftMergePatchToJSON(value);
        case 's3_csv':
            return DatasetOptionsS3CsvMergePatch_1.DatasetOptionsS3CsvMergePatchToJSON(value);
        case 'salesforce':
            return DatasetOptionsSalesforceMergePatch_1.DatasetOptionsSalesforceMergePatchToJSON(value);
        case 'salesforce_marketing_cloud':
            return DatasetOptionsSalesforceMarketingCloudMergePatch_1.DatasetOptionsSalesforceMarketingCloudMergePatchToJSON(value);
        case 'sftp':
            return DatasetOptionsSftpMergePatch_1.DatasetOptionsSftpMergePatchToJSON(value);
        case 'shopify':
            return DatasetOptionsShopifyMergePatch_1.DatasetOptionsShopifyMergePatchToJSON(value);
        case 'snowflake':
            return DatasetOptionsSnowflakeMergePatch_1.DatasetOptionsSnowflakeMergePatchToJSON(value);
        case 'sql_server':
            return DatasetOptionsSqlServerMergePatch_1.DatasetOptionsSqlServerMergePatchToJSON(value);
        case 'stripe':
            return DatasetOptionsStripeMergePatch_1.DatasetOptionsStripeMergePatchToJSON(value);
        default:
            throw new Error(`No variant of DatasetOptionsMergePatch exists with 'type=${value['type']}'`);
    }
}
exports.DatasetOptionsMergePatchToJSON = DatasetOptionsMergePatchToJSON;
