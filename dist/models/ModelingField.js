"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelingFieldToJSON = exports.ModelingFieldFromJSONTyped = exports.ModelingFieldFromJSON = exports.ModelingField = void 0;
/**
 * Customer attributes available for modeling
 *
 * fig/actvty_num_purchase_quintile: Total lifetime number of purchases made, bucketed into 5 quintile groupings
 * fig/actvty_ttl_dollars_quintile: Total dollars that were spent on purchases within lifetime activity bucketed into 5 quintile groupings
 * fig/age: The age of the individual
 * fig/antiques: Interest in antiques
 * fig/books_magazines: Interest in books and magazines
 * fig/charitable_donations: Self-reported interest in charitable donations
 * fig/dieting: Self-reported interest in dieting & weight loss
 * fig/education: Median attainment completed by adults in household age 18 or older
 * fig/favm: Faraday's Automated Valuation Model (AVM) is an algorithmic estimate that approximates the true market value of a home as closely as possible.
 * fig/frequent_remodeler: Interest in home improvement, or recent renovation activity
 * fig/gardener: Self-reported interest in gardening
 * fig/gender: Gender of individual
 * fig/health_conscious: Self-reported interest in health & exercise
 * fig/homeowner_status: Designation of person-to-property relationship (renter vs. owner), with probability
 * fig/household_income: Median numeric value of narrow-band income; computed based on highly accurate multi-sourced models which take into account modeled self-reported incomes, property values and other proprietary sources; calibrated to and validated against truth sets prior to release every six weeks
 * fig/household_size: The number of people living in the household, including adults and children
 * fig/housing_density: Number of housing units per square mile
 * fig/length_of_residence: The number of years the resident has lived at this location
 * fig/life_sports_sports_all: Self-reported interest in sports - sports participation
 * fig/living_area: The finished square footage of the house
 * fig/marital_status: Marital status
 * fig/music: Self-reported interest in music
 * fig/net_worth: Value equals household asset minus liabilities.
 * fig/percent_equity: Loan-to-value percentage, subtracted from 100. Negative values indicate the loan is underwater.
 * fig/pet_any: Owns a pet of any variety (Turtle? Capybara? The mind boggles . . .)
 * fig/purch_chan_internet: Likely to make purchases via online channel
 * fig/shopping_styles: Household's preferred mode of shopping
 * fig/travel: Self-reported interest in travel
 * fig/value_score_all: Estimated consumer marketing profitability. This modeled data is derived from credit behavior and leverages demographic and self-reported data.
 * fig/year_built: The year that the house was originally built (see "Effective year built" for last extensive remodel)
 * @export
 * @enum {string}
 */
var ModelingField;
(function (ModelingField) {
    ModelingField["ActvtyNumPurchaseQuintile"] = "fig/actvty_num_purchase_quintile";
    ModelingField["ActvtyTtlDollarsQuintile"] = "fig/actvty_ttl_dollars_quintile";
    ModelingField["Age"] = "fig/age";
    ModelingField["Antiques"] = "fig/antiques";
    ModelingField["BooksMagazines"] = "fig/books_magazines";
    ModelingField["CharitableDonations"] = "fig/charitable_donations";
    ModelingField["Dieting"] = "fig/dieting";
    ModelingField["Education"] = "fig/education";
    ModelingField["Favm"] = "fig/favm";
    ModelingField["FrequentRemodeler"] = "fig/frequent_remodeler";
    ModelingField["Gardener"] = "fig/gardener";
    ModelingField["Gender"] = "fig/gender";
    ModelingField["HealthConscious"] = "fig/health_conscious";
    ModelingField["HomeownerStatus"] = "fig/homeowner_status";
    ModelingField["HouseholdIncome"] = "fig/household_income";
    ModelingField["HouseholdSize"] = "fig/household_size";
    ModelingField["LengthOfResidence"] = "fig/length_of_residence";
    ModelingField["LifeSportsSportsAll"] = "fig/life_sports_sports_all";
    ModelingField["LivingArea"] = "fig/living_area";
    ModelingField["MaritalStatus"] = "fig/marital_status";
    ModelingField["Music"] = "fig/music";
    ModelingField["NetWorth"] = "fig/net_worth";
    ModelingField["PercentEquity"] = "fig/percent_equity";
    ModelingField["PetAny"] = "fig/pet_any";
    ModelingField["PurchChanInternet"] = "fig/purch_chan_internet";
    ModelingField["ShoppingStyles"] = "fig/shopping_styles";
    ModelingField["Travel"] = "fig/travel";
    ModelingField["HousingDensity"] = "fig/housing_density";
    ModelingField["ValueScoreAll"] = "fig/value_score_all";
    ModelingField["YearBuilt"] = "fig/year_built";
})(ModelingField = exports.ModelingField || (exports.ModelingField = {}));
function ModelingFieldFromJSON(json) {
    return ModelingFieldFromJSONTyped(json, false);
}
exports.ModelingFieldFromJSON = ModelingFieldFromJSON;
function ModelingFieldFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
exports.ModelingFieldFromJSONTyped = ModelingFieldFromJSONTyped;
function ModelingFieldToJSON(value) {
    return value;
}
exports.ModelingFieldToJSON = ModelingFieldToJSON;
