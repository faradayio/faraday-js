"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetModesMergePatchToJSON = exports.TargetModesMergePatchFromJSONTyped = exports.TargetModesMergePatchFromJSON = void 0;
const TargetModesAggregatedMergePatch_1 = require("./TargetModesAggregatedMergePatch");
const TargetModesHashedMergePatch_1 = require("./TargetModesHashedMergePatch");
const TargetModesIdentifiedMergePatch_1 = require("./TargetModesIdentifiedMergePatch");
const TargetModesReferencedMergePatch_1 = require("./TargetModesReferencedMergePatch");
function TargetModesMergePatchFromJSON(json) {
    return TargetModesMergePatchFromJSONTyped(json, false);
}
exports.TargetModesMergePatchFromJSON = TargetModesMergePatchFromJSON;
function TargetModesMergePatchFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['mode']) {
        case 'aggregated':
            return Object.assign(Object.assign({}, TargetModesAggregatedMergePatch_1.TargetModesAggregatedMergePatchFromJSONTyped(json, true)), { mode: 'aggregated' });
        case 'hashed':
            return Object.assign(Object.assign({}, TargetModesHashedMergePatch_1.TargetModesHashedMergePatchFromJSONTyped(json, true)), { mode: 'hashed' });
        case 'identified':
            return Object.assign(Object.assign({}, TargetModesIdentifiedMergePatch_1.TargetModesIdentifiedMergePatchFromJSONTyped(json, true)), { mode: 'identified' });
        case 'referenced':
            return Object.assign(Object.assign({}, TargetModesReferencedMergePatch_1.TargetModesReferencedMergePatchFromJSONTyped(json, true)), { mode: 'referenced' });
        default:
            throw new Error(`No variant of TargetModesMergePatch exists with 'mode=${json['mode']}'`);
    }
}
exports.TargetModesMergePatchFromJSONTyped = TargetModesMergePatchFromJSONTyped;
function TargetModesMergePatchToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['mode']) {
        case 'aggregated':
            return TargetModesAggregatedMergePatch_1.TargetModesAggregatedMergePatchToJSON(value);
        case 'hashed':
            return TargetModesHashedMergePatch_1.TargetModesHashedMergePatchToJSON(value);
        case 'identified':
            return TargetModesIdentifiedMergePatch_1.TargetModesIdentifiedMergePatchToJSON(value);
        case 'referenced':
            return TargetModesReferencedMergePatch_1.TargetModesReferencedMergePatchToJSON(value);
        default:
            throw new Error(`No variant of TargetModesMergePatch exists with 'mode=${value['mode']}'`);
    }
}
exports.TargetModesMergePatchToJSON = TargetModesMergePatchToJSON;
