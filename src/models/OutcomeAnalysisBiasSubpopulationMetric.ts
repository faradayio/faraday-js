/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A metric that measures bias for a subpopulation.
 * There are 3 groups of metrics detailed here.
 * 
 * The metrics measuring predictive power are:
 * - `f1`: The F1 score at a decision threshold of `0.95` for the given subpopulation.
 *   - `value`: `[0,1]`
 *   - `level`: determined by the `level` of `relative_f1`
 * - `accuracy`: The accuracy at a decision threshold of `0.95` for the given subpopulation.
 *   - `value`: `[0,1]`
 *   - `level`: determined by the `level` of `relative_f1`
 * - `relative_accuracy`: Let `accuracy` denote the accuracy for the given subpopulation,
 *   and `baseline_accuracy` denote the accuracy for the eligible population.
 *   Then the relative accuracy is defined as `(accuracy - baseline_accuracy) / baseline_accuracy`.
 *   - `value`: `[-1,1]`
 *   - `level`: determined by the `level` of `relative_f1`
 * - `relative_f1`: Let `f1` denote the F1 score for the given subpopulation
 *   and `baseline_f1` denote the F1 score for the eligible population.
 *   Then the relative F1 score is defined as `(f1 - baseline_f1) / baseline_f1`.
 *   The relative F1 score is defined as `(f1 - overall_f1) / overall_f1`.
 *   - `value`: `[-1,1]`
 *   - `level`:
 *     - `seriously_impaired`: `value < -0.2`
 *     - `moderately_impaired`: `-0.2 <= value < -0.1`
 *     - `relatively_unaffected`: `-0.1 <= value < 0.1`
 *     - `moderately_enhanced`: `0.1 <= value < 0.2`
 *     - `seriously_enhanced`: `0.2 <= value`
 * 
 * The metrics measuring imbalance in positive predictions are:
 * - `odds_ratio`: Let `T` denote a target population of positive predictions defined by a decision threshold of `0.95`.
 *   Then the odds ratio for a given subpopulation is defined as
 *   `(proportion of subpopulation members in T) / (the proportion of subpopulation members among the eligible population)`.
 *   - `value`: `[0, infty)`
 *   - `level`:
 *     - `low_bias`: `0.9 <= value <= 1.1`
 *     - `moderate_bias`: `0.8 <= value < 0.9` or `1.1 < value <= 1.2`
 *     - `strong_bias`: `value < 0.8` or `value > 1.2`
 * - `relative_odds_ratio`: Let `odds_ratio` denote the odds ratio for the given subpopulation.
 *   Then the relative odds ratio is defined as `(odds_ratio - 1) / 1`.
 *   - `value`: `[-1,infty)`
 *   - `level`:
 *     - `low_bias`: `-0.1 <= value <= 0.1`
 *     - `moderate_bias`: `-0.2 <= value < -0.1` or `0.1 < value <= 0.2`
 *     - `strong_bias`: `value < -0.2` or `value > 0.2`
 * 
 * The overall fairness metrics are:
 * - `equal_opportunity_difference`: The difference between the true positive rate for a subpopulation
 *   and the true positive rate for the eligible population at a decision threshold of `0.95`.
 *   - `value`: `[-1,1]`
 *   - `level`: Let `delta = 0.2*0.95`.
 *     - `seriously_underprivileged`: `value < -2*delta`
 *     - `moderately_underprivileged`: `-2*delta <= value < -delta`
 *     - `equitably_treated`: `-delta <= value < delta`
 *     - `moderately_privileged`: `delta <= value < 2*delta`
 *     - `seriously_privileged`: `2*delta <= value`
 * - `statistical_parity_difference`: The difference between the proportion of positive predictions for a subpopulation
 *   and the proportion of positive predictions for the eligible population at a decision threshold of `0.95`.
 *   - `value`: `[-1,1]`
 *   - `level`: Let `delta = 0.2*0.95`.
 *     - `seriously_underprivileged`: `value < -2*delta`
 *     - `moderately_underprivileged`: `-2*delta <= value < -delta`
 *     - `equitably_treated`: `-delta <= value < delta`
 *     - `moderately_privileged`: `delta <= value < 2*delta`
 *     - `seriously_privileged`: `2*delta <= value`
 * - `average_odds_difference`: The average of the equal opportunity difference and the statistical parity difference.
 *   - `value`: `[-1,1]`
 *   - `level`: Let `delta = 0.2*0.95`.
 *     - `seriously_underprivileged`: `value < -2*delta`
 *     - `moderately_underprivileged`: `-2*delta <= value < -delta`
 *     - `equitably_treated`: `-delta <= value < delta`
 *     - `moderately_privileged`: `delta <= value < 2*delta`
 *     - `seriously_privileged`: `2*delta <= value`
 * - `disparate_impact`: The ratio of the proportion of positive predictions for a subpopulation
 *   - `value`: `[0, infty)`
 *   - `level`: Let `gamma = (1.25-0.8)/2` and `m = (1.25+0.8)/2`.
 *     - `seriously_underprivileged`: `value < m-2*gamma`
 *     - `moderately_underprivileged`: `m-2*gamma <= value < m-gamma`
 *     - `equitably_treated`: `m-gamma <= value < m+gamma`
 *     - `moderately_privileged`: `m+gamma <= value < m+2*gamma`
 *     - `seriously_privileged`: `m+2*gamma <= value`
 * - `total_fairness`: The sum of the equal opportunity difference, the statistical parity difference, the average odds difference, and the disparate impact.
 *   - `value`: `[-4,infty)`
 *   - `level`: Let `delta = 0.2*0.95`, `gamma = (1.25-0.8)/2`, `m = (1.25+0.8)/2`.
 *     - `seriously_underprivileged`: `value < m-2*(gamma+3*delta)`
 *     - `moderately_underprivileged`: `m-2*(gamma+3*delta) <= value < m-(gamma+3*delta)`
 *     - `equitably_treated`: `m-(gamma+3*delta) <= value < m+(gamma+3*delta)`
 *     - `moderately_privileged`: `m+(gamma+3*delta) <= value < m+2*(gamma+3*delta)`
 *     - `seriously_privileged`: `m+2*(gamma+3*delta) <= value`
 * - `relative_total_fairness`: Let `total_fairness` denote the total fairness for the given subpopulation. Let `m=(1.25+0.8)/2` and `gamma=(1.25-0.8)/2`.
 *   Then the relative total fairness is defined as `(total_fairness - m)/m`.
 *   - `value`: `[-4-m,infty)`
 *   - `level`: Let `delta = 0.2*0.95`, `gamma = (1.25-0.8)/2`, `m = (1.25+0.8)/2`.
 *     - `seriously_underprivileged`: `value < -2*(gamma+3*delta)`
 *     - `moderately_underprivileged`: `-2*(gamma+3*delta) <= value < -(gamma+3*delta)`
 *     - `equitably_treated`: `-(gamma+3*delta) <= value < gamma+3*delta`
 *     - `moderately_privileged`: `gamma+3*delta <= value < 2*(gamma+3*delta)`
 *     - `seriously_privileged`: `2*(gamma+3*delta) <= value`
 * 
 * Note: Interpreting bias/fairness of a subpopulation in terms of a set of metrics is
 * and active area of research. The above definitions are based on the following paper:
 * - Bellamy, Rachel KE, et al. "AI Fairness 360: An extensible toolkit for detecting and mitigating algorithmic bias." IBM Journal of Research and Development 63.4/5 (2019): 4-1.
 * @export
 * @interface OutcomeAnalysisBiasSubpopulationMetric
 */
export interface OutcomeAnalysisBiasSubpopulationMetric {
    /**
     * An interpretation of the metric value for the subpopulation.
     * @type {string}
     * @memberof OutcomeAnalysisBiasSubpopulationMetric
     */
    level: string;
    /**
     * The name of the metric.
     * @type {string}
     * @memberof OutcomeAnalysisBiasSubpopulationMetric
     */
    name: string;
    /**
     * The value of the metric.
     * @type {number}
     * @memberof OutcomeAnalysisBiasSubpopulationMetric
     */
    value: number;
}

export function OutcomeAnalysisBiasSubpopulationMetricFromJSON(json: any): OutcomeAnalysisBiasSubpopulationMetric {
    return OutcomeAnalysisBiasSubpopulationMetricFromJSONTyped(json, false);
}

export function OutcomeAnalysisBiasSubpopulationMetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutcomeAnalysisBiasSubpopulationMetric {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'level': json['level'],
        'name': json['name'],
        'value': json['value'],
    };
}

export function OutcomeAnalysisBiasSubpopulationMetricToJSON(value?: OutcomeAnalysisBiasSubpopulationMetric | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'level': value.level,
        'name': value.name,
        'value': value.value,
    };
}

