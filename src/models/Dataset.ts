/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IdentitySets,
    IdentitySetsFromJSON,
    IdentitySetsFromJSONTyped,
    IdentitySetsToJSON,
} from './IdentitySets';
import {
    OutputToStreams,
    OutputToStreamsFromJSON,
    OutputToStreamsFromJSONTyped,
    OutputToStreamsToJSON,
} from './OutputToStreams';
import {
    ResourceStatus,
    ResourceStatusFromJSON,
    ResourceStatusFromJSONTyped,
    ResourceStatusToJSON,
} from './ResourceStatus';

/**
 * Tabular data describing orders, customers, leads, etc.
 * @export
 * @interface Dataset
 */
export interface Dataset {
    /**
     * When this resource was created.
     * @type {Date}
     * @memberof Dataset
     */
    createdAt: Date;
    /**
     * A unique ID for this resource.
     * @type {string}
     * @memberof Dataset
     */
    id: string;
    /**
     * 
     * @type {IdentitySets}
     * @memberof Dataset
     */
    identitySets: IdentitySets;
    /**
     * A column specifying a date associated with a record. After each
     * ingestion, the most recent value from `incremental_column` on any
     * record will be recorded, and during future ingestions, any
     * records with a value older than `incremental_column` will be ignored.
     * 
     * Cannot currently be used with `upsert_columns`. Prefer
     * `upsert_columns` when possible.
     * @type {string}
     * @memberof Dataset
     */
    incrementalColumn?: string;
    /**
     * 
     * @type {OutputToStreams}
     * @memberof Dataset
     */
    outputToStreams: OutputToStreams;
    /**
     * The type of this resource.
     * @type {string}
     * @memberof Dataset
     */
    resourceType: string;
    /**
     * 
     * @type {ResourceStatus}
     * @memberof Dataset
     */
    status: ResourceStatus;
    /**
     * When the status of this resource was last updated.
     * @type {Date}
     * @memberof Dataset
     */
    statusChangedAt?: Date;
    /**
     * If this resource has `status == "error"`, this will contain an error message.
     * @type {string}
     * @memberof Dataset
     */
    statusError?: string;
    /**
     * When this resource was last updated.
     * @type {Date}
     * @memberof Dataset
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Dataset
     */
    uploadDirectory: string;
    /**
     * A column or set of columns that uniquely identify an input row. If
     * multiple rows are ingested with identical values in the columns
     * specified by `upsert_columns`, the newest will be used.
     * 
     * Cannot currently be used with `incremental_column`.
     * 
     * If neither `upsert_columns` nor `incremental_column` are
     * specified, each unique row will be ingested once.
     * @type {Array<string>}
     * @memberof Dataset
     */
    upsertColumns?: Array<string>;
}

export function DatasetFromJSON(json: any): Dataset {
    return DatasetFromJSONTyped(json, false);
}

export function DatasetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dataset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'id': json['id'],
        'identitySets': IdentitySetsFromJSON(json['identity_sets']),
        'incrementalColumn': !exists(json, 'incremental_column') ? undefined : json['incremental_column'],
        'outputToStreams': OutputToStreamsFromJSON(json['output_to_streams']),
        'resourceType': json['resource_type'],
        'status': ResourceStatusFromJSON(json['status']),
        'statusChangedAt': !exists(json, 'status_changed_at') ? undefined : (new Date(json['status_changed_at'])),
        'statusError': !exists(json, 'status_error') ? undefined : json['status_error'],
        'updatedAt': (new Date(json['updated_at'])),
        'uploadDirectory': json['upload_directory'],
        'upsertColumns': !exists(json, 'upsert_columns') ? undefined : json['upsert_columns'],
    };
}

export function DatasetToJSON(value?: Dataset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created_at': (value.createdAt.toISOString()),
        'id': value.id,
        'identity_sets': IdentitySetsToJSON(value.identitySets),
        'incremental_column': value.incrementalColumn,
        'output_to_streams': OutputToStreamsToJSON(value.outputToStreams),
        'resource_type': value.resourceType,
        'status': ResourceStatusToJSON(value.status),
        'status_changed_at': value.statusChangedAt === undefined ? undefined : (value.statusChangedAt.toISOString()),
        'status_error': value.statusError,
        'updated_at': (value.updatedAt.toISOString()),
        'upload_directory': value.uploadDirectory,
        'upsert_columns': value.upsertColumns,
    };
}

