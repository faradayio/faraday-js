/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CohortPlaceCondition,
    CohortPlaceConditionFromJSON,
    CohortPlaceConditionFromJSONTyped,
    CohortPlaceConditionToJSON,
} from './CohortPlaceCondition';
import {
    CohortStreamCondition,
    CohortStreamConditionFromJSON,
    CohortStreamConditionFromJSONTyped,
    CohortStreamConditionToJSON,
} from './CohortStreamCondition';
import {
    CohortTrait,
    CohortTraitFromJSON,
    CohortTraitFromJSONTyped,
    CohortTraitToJSON,
} from './CohortTrait';
import {
    RecencyPut,
    RecencyPutFromJSON,
    RecencyPutFromJSONTyped,
    RecencyPutToJSON,
} from './RecencyPut';

/**
 * (Parameters used to PUT a value of the `Cohort` type.)
 * 
 * A specific group of people, such as "Customers" or "Subscription customers".
 * @export
 * @interface CohortPut
 */
export interface CohortPut {
    /**
     * Whether to show the Cohort in Explore, the map view on https://app.faraday.ai.
     * 
     * This will slow down Cohort builds.
     * @type {boolean}
     * @memberof CohortPut
     */
    explore?: boolean;
    /**
     * Max count for this cohort's config
     * @type {number}
     * @memberof CohortPut
     */
    max_count?: number;
    /**
     * Max value for this cohort's config
     * @type {number}
     * @memberof CohortPut
     */
    max_value?: number;
    /**
     * Min count for this cohort's config
     * @type {number}
     * @memberof CohortPut
     */
    min_count?: number;
    /**
     * Min value for this cohort's config
     * @type {number}
     * @memberof CohortPut
     */
    min_value?: number;
    /**
     * Human-readable label for this cohort.
     * @type {string}
     * @memberof CohortPut
     */
    name: string;
    /**
     * List of places to use to spatially filter Cohort membership.
     * @type {Array<CohortPlaceCondition>}
     * @memberof CohortPut
     */
    place_conditions?: Array<CohortPlaceCondition>;
    /**
     * 
     * @type {RecencyPut}
     * @memberof CohortPut
     */
    recency?: RecencyPut;
    /**
     * List of stream properties to filter cohort membership on. The stream properties must be for the same stream set as the cohort `stream_name`.
     * 
     * Nulls are excluded unless explicitly requested with `_null: true`.
     * @type {Array<CohortStreamCondition>}
     * @memberof CohortPut
     */
    stream_conditions?: Array<CohortStreamCondition>;
    /**
     * The `name` field of the stream from which to build this cohort.
     * @type {string}
     * @memberof CohortPut
     */
    stream_name?: string;
    /**
     * List of traits to filter cohort membership
     * @type {Array<CohortTrait>}
     * @memberof CohortPut
     */
    traits?: Array<CohortTrait>;
}

export function CohortPutFromJSON(json: any): CohortPut {
    return CohortPutFromJSONTyped(json, false);
}

export function CohortPutFromJSONTyped(json: any, ignoreDiscriminator: boolean): CohortPut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'explore': !exists(json, 'explore') ? undefined : json['explore'],
        'max_count': !exists(json, 'max_count') ? undefined : json['max_count'],
        'max_value': !exists(json, 'max_value') ? undefined : json['max_value'],
        'min_count': !exists(json, 'min_count') ? undefined : json['min_count'],
        'min_value': !exists(json, 'min_value') ? undefined : json['min_value'],
        'name': json['name'],
        'place_conditions': !exists(json, 'place_conditions') ? undefined : ((json['place_conditions'] as Array<any>).map(CohortPlaceConditionFromJSON)),
        'recency': !exists(json, 'recency') ? undefined : RecencyPutFromJSON(json['recency']),
        'stream_conditions': !exists(json, 'stream_conditions') ? undefined : ((json['stream_conditions'] as Array<any>).map(CohortStreamConditionFromJSON)),
        'stream_name': !exists(json, 'stream_name') ? undefined : json['stream_name'],
        'traits': !exists(json, 'traits') ? undefined : ((json['traits'] as Array<any>).map(CohortTraitFromJSON)),
    };
}

export function CohortPutToJSON(value?: CohortPut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'explore': value.explore,
        'max_count': value.max_count,
        'max_value': value.max_value,
        'min_count': value.min_count,
        'min_value': value.min_value,
        'name': value.name,
        'place_conditions': value.place_conditions === undefined ? undefined : ((value.place_conditions as Array<any>).map(CohortPlaceConditionToJSON)),
        'recency': RecencyPutToJSON(value.recency),
        'stream_conditions': value.stream_conditions === undefined ? undefined : ((value.stream_conditions as Array<any>).map(CohortStreamConditionToJSON)),
        'stream_name': value.stream_name,
        'traits': value.traits === undefined ? undefined : ((value.traits as Array<any>).map(CohortTraitToJSON)),
    };
}

