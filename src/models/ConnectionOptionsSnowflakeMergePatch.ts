/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * (Parameters used to PATCH the `ConnectionOptionsSnowflake` type.)
 * 
 * Snowflake connection options
 * 
 * Prerequisites:
 * * A Faraday-specific keypair must be generated in Snowflake
 * * A Snowflake user must be configured with necessary permissions using the generated keypair
 * @export
 * @interface ConnectionOptionsSnowflakeMergePatch
 */
export interface ConnectionOptionsSnowflakeMergePatch {
    /**
     * The Snowflake role that will be used by Faraday to connect to the instance (Usually this is FARADAY)
     * @type {string}
     * @memberof ConnectionOptionsSnowflakeMergePatch
     */
    role?: string;
    /**
     * The type of connection
     * @type {string}
     * @memberof ConnectionOptionsSnowflakeMergePatch
     */
    type: string;
    /**
     * Every Snowflake instance has a unique URL that contains the account identifier. For eg: https://test1234.us-east-2.aws.snowflakecomputing.com
     * @type {string}
     * @memberof ConnectionOptionsSnowflakeMergePatch
     */
    url?: string;
    /**
     * The Snowflake account user that will be used by Faraday to connect to the instance (Usually this is FARADAY)
     * @type {string}
     * @memberof ConnectionOptionsSnowflakeMergePatch
     */
    user?: string;
    /**
     * Snowflake warehouse
     * @type {string}
     * @memberof ConnectionOptionsSnowflakeMergePatch
     */
    warehouse?: string;
}

export function ConnectionOptionsSnowflakeMergePatchFromJSON(json: any): ConnectionOptionsSnowflakeMergePatch {
    return ConnectionOptionsSnowflakeMergePatchFromJSONTyped(json, false);
}

export function ConnectionOptionsSnowflakeMergePatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionOptionsSnowflakeMergePatch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'role': !exists(json, 'role') ? undefined : json['role'],
        'type': json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'warehouse': !exists(json, 'warehouse') ? undefined : json['warehouse'],
    };
}

export function ConnectionOptionsSnowflakeMergePatchToJSON(value?: ConnectionOptionsSnowflakeMergePatch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'role': value.role,
        'type': value.type,
        'url': value.url,
        'user': value.user,
        'warehouse': value.warehouse,
    };
}

