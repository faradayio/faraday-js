/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PrimitiveDataType,
    PrimitiveDataTypeFromJSON,
    PrimitiveDataTypeFromJSONTyped,
    PrimitiveDataTypeToJSON,
} from './PrimitiveDataType';
import {
    StreamPropertyInputFromDatasets,
    StreamPropertyInputFromDatasetsFromJSON,
    StreamPropertyInputFromDatasetsFromJSONTyped,
    StreamPropertyInputFromDatasetsToJSON,
} from './StreamPropertyInputFromDatasets';
import {
    TraitStatisticalType,
    TraitStatisticalTypeFromJSON,
    TraitStatisticalTypeFromJSONTyped,
    TraitStatisticalTypeToJSON,
} from './TraitStatisticalType';

/**
 * 
 * @export
 * @interface StreamPropertyDetails
 */
export interface StreamPropertyDetails {
    /**
     * For continuous data types, list of reasonable cutoff values.
     * @type {Array<number>}
     * @memberof StreamPropertyDetails
     */
    breaks?: Array<number>;
    /**
     * For STRING type, list of allowed values.
     * @type {Array<string>}
     * @memberof StreamPropertyDetails
     */
    categories?: Array<string>;
    /**
     * 
     * @type {Array<StreamPropertyInputFromDatasets>}
     * @memberof StreamPropertyDetails
     */
    emitted_by_datasets?: Array<StreamPropertyInputFromDatasets>;
    /**
     * 
     * @type {TraitStatisticalType}
     * @memberof StreamPropertyDetails
     */
    statistical_type?: TraitStatisticalType;
    /**
     * 
     * @type {PrimitiveDataType}
     * @memberof StreamPropertyDetails
     */
    type?: PrimitiveDataType;
    /**
     * For numeric types, in what units is the data stored.
     * @type {string}
     * @memberof StreamPropertyDetails
     */
    unit?: string;
}

export function StreamPropertyDetailsFromJSON(json: any): StreamPropertyDetails {
    return StreamPropertyDetailsFromJSONTyped(json, false);
}

export function StreamPropertyDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamPropertyDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'breaks': !exists(json, 'breaks') ? undefined : json['breaks'],
        'categories': !exists(json, 'categories') ? undefined : json['categories'],
        'emitted_by_datasets': !exists(json, 'emitted_by_datasets') ? undefined : ((json['emitted_by_datasets'] as Array<any>).map(StreamPropertyInputFromDatasetsFromJSON)),
        'statistical_type': !exists(json, 'statistical_type') ? undefined : TraitStatisticalTypeFromJSON(json['statistical_type']),
        'type': !exists(json, 'type') ? undefined : PrimitiveDataTypeFromJSON(json['type']),
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
    };
}

export function StreamPropertyDetailsToJSON(value?: StreamPropertyDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'breaks': value.breaks,
        'categories': value.categories,
        'emitted_by_datasets': value.emitted_by_datasets === undefined ? undefined : ((value.emitted_by_datasets as Array<any>).map(StreamPropertyInputFromDatasetsToJSON)),
        'statistical_type': TraitStatisticalTypeToJSON(value.statistical_type),
        'type': PrimitiveDataTypeToJSON(value.type),
        'unit': value.unit,
    };
}

