/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LookupApiIdentifiers,
    LookupApiIdentifiersFromJSON,
    LookupApiIdentifiersFromJSONTyped,
    LookupApiIdentifiersToJSON,
} from './LookupApiIdentifiers';
import {
    LookupApiIdentitySets,
    LookupApiIdentitySetsFromJSON,
    LookupApiIdentitySetsFromJSONTyped,
    LookupApiIdentitySetsToJSON,
} from './LookupApiIdentitySets';
import {
    LookupMatchType,
    LookupMatchTypeFromJSON,
    LookupMatchTypeFromJSONTyped,
    LookupMatchTypeToJSON,
} from './LookupMatchType';

/**
 * The structure of a lookup response depends on the target and the scope it is attached to. 
 * 
 * In general, we return all personal identifying information (PII) which was sent to us. If the PII was matched, then Faraday will also return all of the Scope's defined payload components for the matched person, e.g. outcome percentiles & probability, persona membership, etc.
 * 
 * If the PII was not matched, then the response will contain an `error` key, with the message "Could not match an identity with the provided information". See [the Lookup API specification](https://faraday.ai/docs/features/lookup-api#response) for more information on what response payloads are available and what their shape is.
 * @export
 * @interface TargetLookupResponse
 */
export interface TargetLookupResponse {
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    error?: string;
    /**
     * 
     * @type {LookupApiIdentitySets}
     * @memberof TargetLookupResponse
     */
    identity_set?: LookupApiIdentitySets;
    /**
     * 
     * @type {LookupMatchType}
     * @memberof TargetLookupResponse
     */
    match_type?: LookupMatchType;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    email_hash?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    house_number_and_street?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    latitude?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    longitude?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    person_first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    person_last_name?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    postcode?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    search_radius?: string;
    /**
     * 
     * @type {string}
     * @memberof TargetLookupResponse
     */
    state?: string;
}

export function TargetLookupResponseFromJSON(json: any): TargetLookupResponse {
    return TargetLookupResponseFromJSONTyped(json, false);
}

export function TargetLookupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TargetLookupResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': !exists(json, 'error') ? undefined : json['error'],
        'identity_set': !exists(json, 'identity_set') ? undefined : LookupApiIdentitySetsFromJSON(json['identity_set']),
        'match_type': !exists(json, 'match_type') ? undefined : LookupMatchTypeFromJSON(json['match_type']),
        'city': !exists(json, 'city') ? undefined : json['city'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'email_hash': !exists(json, 'email_hash') ? undefined : json['email_hash'],
        'house_number_and_street': !exists(json, 'house_number_and_street') ? undefined : json['house_number_and_street'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'person_first_name': !exists(json, 'person_first_name') ? undefined : json['person_first_name'],
        'person_last_name': !exists(json, 'person_last_name') ? undefined : json['person_last_name'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'postcode': !exists(json, 'postcode') ? undefined : json['postcode'],
        'search_radius': !exists(json, 'search_radius') ? undefined : json['search_radius'],
        'state': !exists(json, 'state') ? undefined : json['state'],
    };
}

export function TargetLookupResponseToJSON(value?: TargetLookupResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'identity_set': LookupApiIdentitySetsToJSON(value.identity_set),
        'match_type': LookupMatchTypeToJSON(value.match_type),
        'city': value.city,
        'email': value.email,
        'email_hash': value.email_hash,
        'house_number_and_street': value.house_number_and_street,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'person_first_name': value.person_first_name,
        'person_last_name': value.person_last_name,
        'phone': value.phone,
        'postcode': value.postcode,
        'search_radius': value.search_radius,
        'state': value.state,
    };
}

