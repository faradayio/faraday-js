/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TargetLimitPost,
    TargetLimitPostFromJSON,
    TargetLimitPostFromJSONTyped,
    TargetLimitPostToJSON,
} from './TargetLimitPost';
import {
    TargetModesPost,
    TargetModesPostFromJSON,
    TargetModesPostFromJSONTyped,
    TargetModesPostToJSON,
} from './TargetModesPost';
import {
    TargetOptionsPost,
    TargetOptionsPostFromJSON,
    TargetOptionsPostFromJSONTyped,
    TargetOptionsPostToJSON,
} from './TargetOptionsPost';

/**
 * (Parameters used to POST a new value of the `Target` type.)
 * 
 * Instructions on how to export output data defined by a scope.
 * 
 * There are three types of targets:
 * <table>
 * <thead>
 * <tr><th>Target type</th><th>Description</th><th>API requirement</th></tr>
 * </thead>
 * <tbody>
 * <tr><td><strong>Publication</strong></td><td>Faraday <em>hosts</em> your predictions for convenient retrieval as needed.</td><td>Specify a <code>type</code> of <code>hosted_csv</code> in <code>options</code>. Omit <code>connection_id</code>.</td></tr>
 * <tr><td><strong>Replication</strong></td><td>Faraday copies your predictions to systems <em>you</em> control. You may then push them to third parties like Facebook, Google Ads, etc.</td><td>Specify a valid <code>connection_id</code> and the corresponding <code>type</code> of the connection in <code>options</code>.</td></tr>
 * <tr><td><strong>Managed</strong></td><td>Faraday manages a push to third parties like Facebook, Google Ads, and more.</td><td>Must be on an enterprise plan. Contact Customer Success to set up.</td></tr>
 * </tbody>
 * </table>
 * @export
 * @interface TargetPost
 */
export interface TargetPost {
    /**
     * If this is a replication (externally-hosted) target, the UUID of a connection - see <a href="../reference/createconnection">/connections</a> for more detail. 
     * 
     * If this is not a replication target, omit this parameter.
     * @type {string}
     * @memberof TargetPost
     */
    connection_id?: string;
    /**
     * 
     * @type {TargetLimitPost}
     * @memberof TargetPost
     */
    limit?: TargetLimitPost;
    /**
     * A user-friendly name of the target.
     * @type {string}
     * @memberof TargetPost
     */
    name: string;
    /**
     * 
     * @type {TargetOptionsPost}
     * @memberof TargetPost
     */
    options: TargetOptionsPost;
    /**
     * By default, targets include all columns in <a href="../reference/createtargetpreview">the target preview</a>, with no name changes.
     * 
     * This parameter is an override of the default that enables an explicit mapping of columns that should be included in the target export, along with the exported column name.
     * 
     * Each key is the name the column originally had, and each value is the desired name.
     * 
     * Example:
     * 
     * ```
     * {
     *   "person_first_name": "first_name",
     *   "person_last_name": "last_name",
     *   "city": "city"
     * }
     * ```
     * 
     * In the example above, the target will only include the "first_name", "last_name", and "city" columns.
     * @type {{ [key: string]: string; }}
     * @memberof TargetPost
     */
    payload_map?: { [key: string]: string; };
    /**
     * 
     * @type {TargetModesPost}
     * @memberof TargetPost
     */
    representation: TargetModesPost;
    /**
     * The UUID of a scope - see <a href="../reference/createscope">/scopes</a> for more detail.
     * @type {string}
     * @memberof TargetPost
     */
    scope_id: string;
}

export function TargetPostFromJSON(json: any): TargetPost {
    return TargetPostFromJSONTyped(json, false);
}

export function TargetPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): TargetPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connection_id': !exists(json, 'connection_id') ? undefined : json['connection_id'],
        'limit': !exists(json, 'limit') ? undefined : TargetLimitPostFromJSON(json['limit']),
        'name': json['name'],
        'options': TargetOptionsPostFromJSON(json['options']),
        'payload_map': !exists(json, 'payload_map') ? undefined : json['payload_map'],
        'representation': TargetModesPostFromJSON(json['representation']),
        'scope_id': json['scope_id'],
    };
}

export function TargetPostToJSON(value?: TargetPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connection_id': value.connection_id,
        'limit': TargetLimitPostToJSON(value.limit),
        'name': value.name,
        'options': TargetOptionsPostToJSON(value.options),
        'payload_map': value.payload_map,
        'representation': TargetModesPostToJSON(value.representation),
        'scope_id': value.scope_id,
    };
}

