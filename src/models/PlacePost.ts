/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressInfo,
    AddressInfoFromJSON,
    AddressInfoFromJSONTyped,
    AddressInfoToJSON,
} from './AddressInfo';

/**
 * (Parameters used to POST a new value of the `Place` type.)
 * 
 * A geospatial area or set of addresses which can be used as a spatial filter when defining other resources.
 * @export
 * @interface PlacePost
 */
export interface PlacePost {
    /**
     * 
     * @type {Array<AddressInfo>}
     * @memberof PlacePost
     */
    addresses?: Array<AddressInfo>;
    /**
     * A GeoJSON Geometry, as defined in the [GeoJSON specification](https://www.rfc-editor.org/rfc/rfc7946#section-3.1)
     * 
     * The longitude and latitude units of this geometry are expected to be in decimal degrees, using the 
     * WGS84 coordinate reference system, also known by the SRID 4326. https://www.rfc-editor.org/rfc/rfc7946#section-4
     * @type {object}
     * @memberof PlacePost
     */
    geojson?: object;
    /**
     * Human-readable label for this place. Names must be unique. Uniqueness is case-insensitive.
     * @type {string}
     * @memberof PlacePost
     */
    name: string;
}

export function PlacePostFromJSON(json: any): PlacePost {
    return PlacePostFromJSONTyped(json, false);
}

export function PlacePostFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlacePost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addresses': !exists(json, 'addresses') ? undefined : ((json['addresses'] as Array<any>).map(AddressInfoFromJSON)),
        'geojson': !exists(json, 'geojson') ? undefined : json['geojson'],
        'name': json['name'],
    };
}

export function PlacePostToJSON(value?: PlacePost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addresses': value.addresses === undefined ? undefined : ((value.addresses as Array<any>).map(AddressInfoToJSON)),
        'geojson': value.geojson,
        'name': value.name,
    };
}

