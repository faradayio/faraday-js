/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OutcomeAnalysisBiasData,
    OutcomeAnalysisBiasDataFromJSON,
    OutcomeAnalysisBiasDataFromJSONTyped,
    OutcomeAnalysisBiasDataToJSON,
} from './OutcomeAnalysisBiasData';
import {
    OutcomeAnalysisBiasSubpopulation,
    OutcomeAnalysisBiasSubpopulationFromJSON,
    OutcomeAnalysisBiasSubpopulationFromJSONTyped,
    OutcomeAnalysisBiasSubpopulationToJSON,
} from './OutcomeAnalysisBiasSubpopulation';
import {
    OutcomeAnalysisBiasSummary,
    OutcomeAnalysisBiasSummaryFromJSON,
    OutcomeAnalysisBiasSummaryFromJSONTyped,
    OutcomeAnalysisBiasSummaryToJSON,
} from './OutcomeAnalysisBiasSummary';

/**
 * Information about the various types of bias for an outcome.
 * The measurements for each type of bias are taken with respect to
 * **subpopulations** of **sensitive dimensions** whose priority
 * can be increased or decreased by a type of bias.
 * 
 * The sensitive dimensions and values are:
 * - Age (measured in years)
 *   - Teen `[0, 21)`
 *   - Young Adult `[21, 30]`
 *   - Adult `[31, 40]`
 *   - Middle Age `[41, 60]`
 *   - Senior `[61, infty)`  
 *   - Unknown
 * - Gender
 *   - Female
 *   - Male
 *   - Unknown
 * 
 * Subpopulations are defined by a set of sensitive dimensions and values
 * that represent the intersection of those dimensions and values
 * (e.g. Adult Females, Seniors, Teen Males, Females, etc.).
 * 
 * There are 4 types of bias measured in this analysis:
 * - (data) Distribution of underlying historical data for a sensitive dimension across labels.
 * - (power) Variation in predictive performance across subpopulations.
 * - (predictions) Proportions of positive predictions across subpopulations.
 * - (fairness) Overall fairness metrics for each subpopulation.
 * 
 * Additionally, there is a summary of each type of bias distilled down to a boolean value.
 * @export
 * @interface OutcomeAnalysisBias
 */
export interface OutcomeAnalysisBias {
    /**
     * 
     * @type {OutcomeAnalysisBiasData}
     * @memberof OutcomeAnalysisBias
     */
    data: OutcomeAnalysisBiasData;
    /**
     * 
     * @type {OutcomeAnalysisBiasSubpopulation}
     * @memberof OutcomeAnalysisBias
     */
    fairness: OutcomeAnalysisBiasSubpopulation;
    /**
     * 
     * @type {OutcomeAnalysisBiasSubpopulation}
     * @memberof OutcomeAnalysisBias
     */
    power: OutcomeAnalysisBiasSubpopulation;
    /**
     * 
     * @type {OutcomeAnalysisBiasSubpopulation}
     * @memberof OutcomeAnalysisBias
     */
    predictions: OutcomeAnalysisBiasSubpopulation;
    /**
     * 
     * @type {OutcomeAnalysisBiasSummary}
     * @memberof OutcomeAnalysisBias
     */
    summary: OutcomeAnalysisBiasSummary;
}

export function OutcomeAnalysisBiasFromJSON(json: any): OutcomeAnalysisBias {
    return OutcomeAnalysisBiasFromJSONTyped(json, false);
}

export function OutcomeAnalysisBiasFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutcomeAnalysisBias {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': OutcomeAnalysisBiasDataFromJSON(json['data']),
        'fairness': OutcomeAnalysisBiasSubpopulationFromJSON(json['fairness']),
        'power': OutcomeAnalysisBiasSubpopulationFromJSON(json['power']),
        'predictions': OutcomeAnalysisBiasSubpopulationFromJSON(json['predictions']),
        'summary': OutcomeAnalysisBiasSummaryFromJSON(json['summary']),
    };
}

export function OutcomeAnalysisBiasToJSON(value?: OutcomeAnalysisBias | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': OutcomeAnalysisBiasDataToJSON(value.data),
        'fairness': OutcomeAnalysisBiasSubpopulationToJSON(value.fairness),
        'power': OutcomeAnalysisBiasSubpopulationToJSON(value.power),
        'predictions': OutcomeAnalysisBiasSubpopulationToJSON(value.predictions),
        'summary': OutcomeAnalysisBiasSummaryToJSON(value.summary),
    };
}

