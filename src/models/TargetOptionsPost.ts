/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    TargetOptionsAzureSqlServerPost,
    TargetOptionsAzureSqlServerPostFromJSON,
    TargetOptionsAzureSqlServerPostFromJSONTyped,
    TargetOptionsAzureSqlServerPostToJSON,
} from './TargetOptionsAzureSqlServerPost';
import {
    TargetOptionsBigQueryPost,
    TargetOptionsBigQueryPostFromJSON,
    TargetOptionsBigQueryPostFromJSONTyped,
    TargetOptionsBigQueryPostToJSON,
} from './TargetOptionsBigQueryPost';
import {
    TargetOptionsHostedCsvPost,
    TargetOptionsHostedCsvPostFromJSON,
    TargetOptionsHostedCsvPostFromJSONTyped,
    TargetOptionsHostedCsvPostToJSON,
} from './TargetOptionsHostedCsvPost';
import {
    TargetOptionsRedshiftPost,
    TargetOptionsRedshiftPostFromJSON,
    TargetOptionsRedshiftPostFromJSONTyped,
    TargetOptionsRedshiftPostToJSON,
} from './TargetOptionsRedshiftPost';
import {
    TargetOptionsS3CsvPost,
    TargetOptionsS3CsvPostFromJSON,
    TargetOptionsS3CsvPostFromJSONTyped,
    TargetOptionsS3CsvPostToJSON,
} from './TargetOptionsS3CsvPost';
import {
    TargetOptionsSnowflakePost,
    TargetOptionsSnowflakePostFromJSON,
    TargetOptionsSnowflakePostFromJSONTyped,
    TargetOptionsSnowflakePostToJSON,
} from './TargetOptionsSnowflakePost';

/**
 * @type TargetOptionsPost
 * The export target configuration options. These vary by connection type.
 * For **replication targets** (self-hosted), the following connection types are supported:
 *   * azure_sql_server
 *   * bigquery
 *   * redshift
 *   * snowflake
 *   * s3_csv
 * 
 * For **publication targets** (Faraday-hosted), the following connection type is supported:
 *   * `hosted_csv` - Faraday hosts a CSV for you to retrieve by your choice of protocol: HTTPS, S3, GCS, or SFTP.
 * @export
 */
export type TargetOptionsPost = { type: 'azure_sql_server' } & TargetOptionsAzureSqlServerPost | { type: 'bigquery' } & TargetOptionsBigQueryPost | { type: 'hosted_csv' } & TargetOptionsHostedCsvPost | { type: 'redshift' } & TargetOptionsRedshiftPost | { type: 's3_csv' } & TargetOptionsS3CsvPost | { type: 'snowflake' } & TargetOptionsSnowflakePost;

export function TargetOptionsPostFromJSON(json: any): TargetOptionsPost {
    return TargetOptionsPostFromJSONTyped(json, false);
}

export function TargetOptionsPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): TargetOptionsPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'azure_sql_server':
            return {...TargetOptionsAzureSqlServerPostFromJSONTyped(json, true), type: 'azure_sql_server'};
        case 'bigquery':
            return {...TargetOptionsBigQueryPostFromJSONTyped(json, true), type: 'bigquery'};
        case 'hosted_csv':
            return {...TargetOptionsHostedCsvPostFromJSONTyped(json, true), type: 'hosted_csv'};
        case 'redshift':
            return {...TargetOptionsRedshiftPostFromJSONTyped(json, true), type: 'redshift'};
        case 's3_csv':
            return {...TargetOptionsS3CsvPostFromJSONTyped(json, true), type: 's3_csv'};
        case 'snowflake':
            return {...TargetOptionsSnowflakePostFromJSONTyped(json, true), type: 'snowflake'};
        default:
            throw new Error(`No variant of TargetOptionsPost exists with 'type=${json['type']}'`);
    }
}

export function TargetOptionsPostToJSON(value?: TargetOptionsPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'azure_sql_server':
            return TargetOptionsAzureSqlServerPostToJSON(value);
        case 'bigquery':
            return TargetOptionsBigQueryPostToJSON(value);
        case 'hosted_csv':
            return TargetOptionsHostedCsvPostToJSON(value);
        case 'redshift':
            return TargetOptionsRedshiftPostToJSON(value);
        case 's3_csv':
            return TargetOptionsS3CsvPostToJSON(value);
        case 'snowflake':
            return TargetOptionsSnowflakePostToJSON(value);
        default:
            throw new Error(`No variant of TargetOptionsPost exists with 'type=${value['type']}'`);
    }
}

