/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DatasetOptionsPost,
    DatasetOptionsPostFromJSON,
    DatasetOptionsPostFromJSONTyped,
    DatasetOptionsPostToJSON,
} from './DatasetOptionsPost';
import {
    IdentitySetsPost,
    IdentitySetsPostFromJSON,
    IdentitySetsPostFromJSONTyped,
    IdentitySetsPostToJSON,
} from './IdentitySetsPost';
import {
    OutputToStreamsPost,
    OutputToStreamsPostFromJSON,
    OutputToStreamsPostFromJSONTyped,
    OutputToStreamsPostToJSON,
} from './OutputToStreamsPost';
import {
    OutputToTraitsPost,
    OutputToTraitsPostFromJSON,
    OutputToTraitsPostFromJSONTyped,
    OutputToTraitsPostToJSON,
} from './OutputToTraitsPost';

/**
 * (Parameters used to POST a new value of the `Dataset` type.)
 * 
 * Tabular data describing orders, customers, leads, etc.
 * @export
 * @interface DatasetPost
 */
export interface DatasetPost {
    /**
     * If this is a "retrieve" dataset, the UUID of a connection - see <a href="../reference/createconnection">/connections</a> for more detail. 
     * 
     * Only a subset of connection types can be configured for dataset ingestion - see the list available in `options`.
     * 
     * Note that if a `connection_id` is specified, `options` must also be specified.
     * @type {string}
     * @memberof DatasetPost
     */
    connection_id?: string;
    /**
     * 
     * @type {IdentitySetsPost}
     * @memberof DatasetPost
     */
    identity_sets: IdentitySetsPost;
    /**
     * A column specifying a date associated with a record. After each
     * ingestion, the most recent value from `incremental_column` on any
     * record will be recorded, and during future ingestions, any
     * records with a value older than `incremental_column` will be ignored.
     * 
     * Cannot currently be used with `upsert_columns`. Prefer
     * `upsert_columns` when possible.
     * @type {string}
     * @memberof DatasetPost
     */
    incremental_column?: string;
    /**
     * 
     * @type {DatasetOptionsPost}
     * @memberof DatasetPost
     */
    options: DatasetOptionsPost;
    /**
     * 
     * @type {OutputToStreamsPost}
     * @memberof DatasetPost
     */
    output_to_streams: OutputToStreamsPost;
    /**
     * 
     * @type {OutputToTraitsPost}
     * @memberof DatasetPost
     */
    output_to_traits?: OutputToTraitsPost;
    /**
     * A column or set of columns that uniquely identify an input row. If
     * multiple rows are ingested with identical values in the columns
     * specified by `upsert_columns`, the newest will be used.
     * 
     * Cannot currently be used with `incremental_column`.
     * 
     * If neither `upsert_columns` nor `incremental_column` are
     * specified, each unique row will be ingested once.
     * @type {Array<string>}
     * @memberof DatasetPost
     */
    upsert_columns?: Array<string>;
}

export function DatasetPostFromJSON(json: any): DatasetPost {
    return DatasetPostFromJSONTyped(json, false);
}

export function DatasetPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatasetPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connection_id': !exists(json, 'connection_id') ? undefined : json['connection_id'],
        'identity_sets': IdentitySetsPostFromJSON(json['identity_sets']),
        'incremental_column': !exists(json, 'incremental_column') ? undefined : json['incremental_column'],
        'options': DatasetOptionsPostFromJSON(json['options']),
        'output_to_streams': OutputToStreamsPostFromJSON(json['output_to_streams']),
        'output_to_traits': !exists(json, 'output_to_traits') ? undefined : OutputToTraitsPostFromJSON(json['output_to_traits']),
        'upsert_columns': !exists(json, 'upsert_columns') ? undefined : json['upsert_columns'],
    };
}

export function DatasetPostToJSON(value?: DatasetPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connection_id': value.connection_id,
        'identity_sets': IdentitySetsPostToJSON(value.identity_sets),
        'incremental_column': value.incremental_column,
        'options': DatasetOptionsPostToJSON(value.options),
        'output_to_streams': OutputToStreamsPostToJSON(value.output_to_streams),
        'output_to_traits': OutputToTraitsPostToJSON(value.output_to_traits),
        'upsert_columns': value.upsert_columns,
    };
}

