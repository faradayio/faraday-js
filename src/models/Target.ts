/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResourceStatus,
    ResourceStatusFromJSON,
    ResourceStatusFromJSONTyped,
    ResourceStatusToJSON,
} from './ResourceStatus';
import {
    TargetOptions,
    TargetOptionsFromJSON,
    TargetOptionsFromJSONTyped,
    TargetOptionsToJSON,
} from './TargetOptions';

/**
 * Instructions on how to export output data defined by a scope.
 * 
 * There are two flavors of targets, each requiring different treatment in the API:
 * <table>
 * <thead>
 * <tr><th>Target type</th><th>Description</th><th>API requirement</th></tr>
 * </thead>
 * <tbody>
 * <tr><td><strong>Publication targets</strong></td><td>Faraday <em>hosts</em> your predictions for convenient retrieval as needed.</td><td>Specify a <code>type</code> of <code>hosted_csv</code> in <code>options</code>. Omit <code>connection_id</code>.</td></tr>
 * <tr><td><strong>Replication targets</strong></td><td>Faraday copies your predictions to systems <em>you</em> control.</td><td>Specify a valid <code>connection_id</code> and the corresponding <code>type</code> in <code>options</code>.</td></tr>
 * </tbody>
 * </table>
 * @export
 * @interface Target
 */
export interface Target {
    /**
     * If this is a replication (externally-hosted) target, the UUID of a connection - see <a href="../reference/createconnection">/connections</a> for more detail. 
     * 
     * If this is not a replication target, omit this parameter.
     * @type {string}
     * @memberof Target
     */
    connection_id?: string;
    /**
     * When this resource was created.
     * @type {Date}
     * @memberof Target
     */
    created_at: Date;
    /**
     * There are two options to receive back identifying information about exported individuals, each supporting different use cases:
     *   * **Identified**: All identifiable information specified by `identity_sets` in source data is emitted in cleartext - see <a href="../reference/createdataset">/datasets</a> for more detail. All payload columns are emitted. Your account may have a limit on how many rows can be returned. This facilitates most conversion, engagement, and retention use cases, along with direct mail acquisition.
     *   * **Hashed**: Faraday's name, physical address, and email is emitted in hashed form. Data is randomly ordered to prevent re-identification. All payload columns are emitted except raw propensity scores and attributes. This facilitates digital acquisition use cases.
     * 
     * Specify `"hashed": true` to receive **hashed** representations of individuals, and `"hashed": false` to receive **identified** representation. Not specifying a value is equivalent to `false`.
     * @type {boolean}
     * @memberof Target
     */
    hashed?: boolean;
    /**
     * A unique ID for this resource.
     * @type {string}
     * @memberof Target
     */
    id: string;
    /**
     * Maximum individuals to export via this target.
     * @type {number}
     * @memberof Target
     */
    limit?: number;
    /**
     * A user-friendly name of the target.
     * @type {string}
     * @memberof Target
     */
    name: string;
    /**
     * 
     * @type {TargetOptions}
     * @memberof Target
     */
    options: TargetOptions;
    /**
     * URL for the default output of the target
     * @type {string}
     * @memberof Target
     */
    output_url?: string;
    /**
     * This specifies which columns should be sent to the target, and which columns should be renamed.
     * Each key is the name the column originally had, and each value is the desired name.
     * If a payload_map is provided, then the target download will only columns in the payload_map.
     * If a payload_map isn't provided, then the download will include all columns in the scope preview, with no name changes.
     * So, for the example above, the target will only include the "first_name", "last_name", and "city" columns.
     * To see what columns are available, check the scope preview.
     * @type {{ [key: string]: string; }}
     * @memberof Target
     */
    payload_map?: { [key: string]: string; };
    /**
     * The type of this resource.
     * @type {string}
     * @memberof Target
     */
    resource_type: string;
    /**
     * The UUID of a scope - see <a href="../reference/createscope">/scopes</a> for more detail.
     * @type {string}
     * @memberof Target
     */
    scope_id: string;
    /**
     * 
     * @type {ResourceStatus}
     * @memberof Target
     */
    status: ResourceStatus;
    /**
     * When the status of this resource was last updated.
     * @type {Date}
     * @memberof Target
     */
    status_changed_at?: Date;
    /**
     * If this resource has `status == "error"`, this will contain an error message.
     * @type {string}
     * @memberof Target
     */
    status_error?: string;
    /**
     * When this resource was last updated.
     * @type {Date}
     * @memberof Target
     */
    updated_at: Date;
}

export function TargetFromJSON(json: any): Target {
    return TargetFromJSONTyped(json, false);
}

export function TargetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Target {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connection_id': !exists(json, 'connection_id') ? undefined : json['connection_id'],
        'created_at': (new Date(json['created_at'])),
        'hashed': !exists(json, 'hashed') ? undefined : json['hashed'],
        'id': json['id'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'name': json['name'],
        'options': TargetOptionsFromJSON(json['options']),
        'output_url': !exists(json, 'output_url') ? undefined : json['output_url'],
        'payload_map': !exists(json, 'payload_map') ? undefined : json['payload_map'],
        'resource_type': json['resource_type'],
        'scope_id': json['scope_id'],
        'status': ResourceStatusFromJSON(json['status']),
        'status_changed_at': !exists(json, 'status_changed_at') ? undefined : (new Date(json['status_changed_at'])),
        'status_error': !exists(json, 'status_error') ? undefined : json['status_error'],
        'updated_at': (new Date(json['updated_at'])),
    };
}

export function TargetToJSON(value?: Target | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connection_id': value.connection_id,
        'created_at': (value.created_at.toISOString()),
        'hashed': value.hashed,
        'id': value.id,
        'limit': value.limit,
        'name': value.name,
        'options': TargetOptionsToJSON(value.options),
        'output_url': value.output_url,
        'payload_map': value.payload_map,
        'resource_type': value.resource_type,
        'scope_id': value.scope_id,
        'status': ResourceStatusToJSON(value.status),
        'status_changed_at': value.status_changed_at === undefined ? undefined : (value.status_changed_at.toISOString()),
        'status_error': value.status_error,
        'updated_at': (value.updated_at.toISOString()),
    };
}

