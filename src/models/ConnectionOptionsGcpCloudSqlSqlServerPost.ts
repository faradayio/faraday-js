/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * (Parameters used to POST a new value of the `ConnectionOptionsGcpCloudSqlSqlServer` type.)
 * 
 * Google Cloud SQL (SQL Server) connection options
 * @export
 * @interface ConnectionOptionsGcpCloudSqlSqlServerPost
 */
export interface ConnectionOptionsGcpCloudSqlSqlServerPost {
    /**
     * Database
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    database: string;
    /**
     * For use with Cloud SQL proxy. Client must enable Cloud SQL Admin API and give IAM role "Cloud SQL Client" to our service account faraday-incoming@production-237317.iam.gserviceaccount.com (Datasets) or faraday-outgoing@production-237317.iam.gserviceaccount.com (Targets).
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    instance_connection_name: string;
    /**
     * In case the host is deployed behind a load balancer.
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    load_balancer?: string;
    /**
     * Password
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    password: string;
    /**
     * Schema
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    schema?: string;
    /**
     * In case the host is deployed behind an SSH bastion / jump server. Uses the Faraday SSH public key. This is the address of the bastion including username. For example, faraday@mybastion.example.com
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    ssh_bastion?: string;
    /**
     * The type of connection
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    type: string;
    /**
     * User
     * @type {string}
     * @memberof ConnectionOptionsGcpCloudSqlSqlServerPost
     */
    user: string;
}

export function ConnectionOptionsGcpCloudSqlSqlServerPostFromJSON(json: any): ConnectionOptionsGcpCloudSqlSqlServerPost {
    return ConnectionOptionsGcpCloudSqlSqlServerPostFromJSONTyped(json, false);
}

export function ConnectionOptionsGcpCloudSqlSqlServerPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionOptionsGcpCloudSqlSqlServerPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'database': json['database'],
        'instance_connection_name': json['instance_connection_name'],
        'load_balancer': !exists(json, 'load_balancer') ? undefined : json['load_balancer'],
        'password': json['password'],
        'schema': !exists(json, 'schema') ? undefined : json['schema'],
        'ssh_bastion': !exists(json, 'ssh_bastion') ? undefined : json['ssh_bastion'],
        'type': json['type'],
        'user': json['user'],
    };
}

export function ConnectionOptionsGcpCloudSqlSqlServerPostToJSON(value?: ConnectionOptionsGcpCloudSqlSqlServerPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'database': value.database,
        'instance_connection_name': value.instance_connection_name,
        'load_balancer': value.load_balancer,
        'password': value.password,
        'schema': value.schema,
        'ssh_bastion': value.ssh_bastion,
        'type': value.type,
        'user': value.user,
    };
}

