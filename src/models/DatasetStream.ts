/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DataMap,
    DataMapFromJSON,
    DataMapFromJSONTyped,
    DataMapToJSON,
} from './DataMap';
import {
    DatasetStreamCondition,
    DatasetStreamConditionFromJSON,
    DatasetStreamConditionFromJSONTyped,
    DatasetStreamConditionToJSON,
} from './DatasetStreamCondition';

/**
 * 
 * @export
 * @interface DatasetStream
 */
export interface DatasetStream {
    /**
     * A classic dataset stream, created internally at Faraday.
     * @type {boolean}
     * @memberof DatasetStream
     */
    classic?: boolean;
    /**
     * List of conditions to use to filter events.
     * @type {Array<DatasetStreamCondition>}
     * @memberof DatasetStream
     */
    conditions?: Array<DatasetStreamCondition>;
    /**
     * 
     * @type {DataMap}
     * @memberof DatasetStream
     */
    data_map: DataMap;
    /**
     * 
     * @type {string}
     * @memberof DatasetStream
     */
    stream_id: string;
}

export function DatasetStreamFromJSON(json: any): DatasetStream {
    return DatasetStreamFromJSONTyped(json, false);
}

export function DatasetStreamFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatasetStream {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'classic': !exists(json, 'classic') ? undefined : json['classic'],
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(DatasetStreamConditionFromJSON)),
        'data_map': DataMapFromJSON(json['data_map']),
        'stream_id': json['stream_id'],
    };
}

export function DatasetStreamToJSON(value?: DatasetStream | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'classic': value.classic,
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(DatasetStreamConditionToJSON)),
        'data_map': DataMapToJSON(value.data_map),
        'stream_id': value.stream_id,
    };
}

