/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Customer attributes available for modeling
 * 
 * actvty_num_purchase_quintile: Total lifetime number of purchases made, bucketed into 5 quintile groupings
 * actvty_ttl_dollars_quintile: Total dollars that were spent on purchases within lifetime activity bucketed into 5 quintile groupings
 * age: The age of the individual
 * antiques: Interest in antiques
 * books_magazines: Interest in books and magazines
 * charitable_donations: Self-reported interest in charitable donations
 * dieting: Self-reported interest in dieting & weight loss
 * education: Median attainment completed by adults in household age 18 or older
 * favm: Faraday's Automated Valuation Model (AVM) is an algorithmic estimate that approximates the true market value of a home as closely as possible.
 * frequent_remodeler: Interest in home improvement, or recent renovation activity
 * gardener: Self-reported interest in gardening
 * gender: Gender of individual
 * health_conscious: Self-reported interest in health & exercise
 * homeowner_status: Designation of person-to-property relationship (renter vs. owner), with probability
 * household_income: Median numeric value of narrow-band income; computed based on highly accurate multi-sourced models which take into account modeled self-reported incomes, property values and other proprietary sources; calibrated to and validated against truth sets prior to release every six weeks
 * household_size: The number of people living in the household, including adults and children
 * housing_density: Number of housing units per square mile
 * length_of_residence: The number of years the resident has lived at this location
 * life_sports_sports_all: Self-reported interest in sports - sports participation
 * living_area: The finished square footage of the house
 * marital_status: Marital status
 * music: Self-reported interest in music
 * net_worth: Value equals household asset minus liabilities.
 * percent_equity: Loan-to-value percentage, subtracted from 100. Negative values indicate the loan is underwater.
 * pet_any: Owns a pet of any variety (Turtle? Capybara? The mind boggles . . .)
 * purch_chan_internet: Likely to make purchases via online channel
 * shopping_styles: Household's preferred mode of shopping
 * travel: Self-reported interest in travel
 * value_score_all: Estimated consumer marketing profitability. This modeled data is derived from credit behavior and leverages demographic and self-reported data.
 * year_built: The year that the house was originally built (see "Effective year built" for last extensive remodel)
 * @export
 * @enum {string}
 */
export enum ModelingField {
    ActvtyNumPurchaseQuintile = 'actvty_num_purchase_quintile',
    ActvtyTtlDollarsQuintile = 'actvty_ttl_dollars_quintile',
    Age = 'age',
    Antiques = 'antiques',
    BooksMagazines = 'books_magazines',
    CharitableDonations = 'charitable_donations',
    Dieting = 'dieting',
    Education = 'education',
    Favm = 'favm',
    FrequentRemodeler = 'frequent_remodeler',
    Gardener = 'gardener',
    Gender = 'gender',
    HealthConscious = 'health_conscious',
    HomeownerStatus = 'homeowner_status',
    HouseholdIncome = 'household_income',
    HouseholdSize = 'household_size',
    LengthOfResidence = 'length_of_residence',
    LifeSportsSportsAll = 'life_sports_sports_all',
    LivingArea = 'living_area',
    MaritalStatus = 'marital_status',
    Music = 'music',
    NetWorth = 'net_worth',
    PercentEquity = 'percent_equity',
    PetAny = 'pet_any',
    PurchChanInternet = 'purch_chan_internet',
    ShoppingStyles = 'shopping_styles',
    Travel = 'travel',
    HousingDensity = 'housing_density',
    ValueScoreAll = 'value_score_all',
    YearBuilt = 'year_built'
}

export function ModelingFieldFromJSON(json: any): ModelingField {
    return ModelingFieldFromJSONTyped(json, false);
}

export function ModelingFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelingField {
    return json as ModelingField;
}

export function ModelingFieldToJSON(value?: ModelingField | null): any {
    return value as any;
}

