/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * (Parameters used to PATCH the `ConnectionOptionsSftp` type.)
 * 
 * SFTP connection options
 * @export
 * @interface ConnectionOptionsSftpMergePatch
 */
export interface ConnectionOptionsSftpMergePatch {
    /**
     * The compression algorithm to use
     * @type {boolean}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    compression?: boolean | null;
    /**
     * The encryption cipher(s) to use
     * @type {string}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    encryption?: string | null;
    /**
     * The hostname or IP address of the SFTP server
     * @type {string}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    host?: string;
    /**
     * The host key algorithm to use in verifying the host key presented by the remote host
     * @type {string}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    host_key?: string | null;
    /**
     * Currently not supported in favor of SSH keypair authentication (if blank Faraday's private key will be used instead)
     * @type {string}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    password?: string | null;
    /**
     * The port on the SFTP server listening for connections
     * @type {number}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    port?: number;
    /**
     * The type of connection
     * @type {string}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    type: string;
    /**
     * The user to connect to the SFTP server as
     * @type {string}
     * @memberof ConnectionOptionsSftpMergePatch
     */
    user?: string;
}

export function ConnectionOptionsSftpMergePatchFromJSON(json: any): ConnectionOptionsSftpMergePatch {
    return ConnectionOptionsSftpMergePatchFromJSONTyped(json, false);
}

export function ConnectionOptionsSftpMergePatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionOptionsSftpMergePatch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compression': !exists(json, 'compression') ? undefined : json['compression'],
        'encryption': !exists(json, 'encryption') ? undefined : json['encryption'],
        'host': !exists(json, 'host') ? undefined : json['host'],
        'host_key': !exists(json, 'host_key') ? undefined : json['host_key'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'port': !exists(json, 'port') ? undefined : json['port'],
        'type': json['type'],
        'user': !exists(json, 'user') ? undefined : json['user'],
    };
}

export function ConnectionOptionsSftpMergePatchToJSON(value?: ConnectionOptionsSftpMergePatch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compression': value.compression,
        'encryption': value.encryption,
        'host': value.host,
        'host_key': value.host_key,
        'password': value.password,
        'port': value.port,
        'type': value.type,
        'user': value.user,
    };
}

