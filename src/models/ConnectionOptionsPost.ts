/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    ConnectionOptionsAzureSqlServerPost,
    ConnectionOptionsAzureSqlServerPostFromJSON,
    ConnectionOptionsAzureSqlServerPostFromJSONTyped,
    ConnectionOptionsAzureSqlServerPostToJSON,
} from './ConnectionOptionsAzureSqlServerPost';
import {
    ConnectionOptionsBigQueryPost,
    ConnectionOptionsBigQueryPostFromJSON,
    ConnectionOptionsBigQueryPostFromJSONTyped,
    ConnectionOptionsBigQueryPostToJSON,
} from './ConnectionOptionsBigQueryPost';
import {
    ConnectionOptionsClassicPost,
    ConnectionOptionsClassicPostFromJSON,
    ConnectionOptionsClassicPostFromJSONTyped,
    ConnectionOptionsClassicPostToJSON,
} from './ConnectionOptionsClassicPost';
import {
    ConnectionOptionsRedshiftPost,
    ConnectionOptionsRedshiftPostFromJSON,
    ConnectionOptionsRedshiftPostFromJSONTyped,
    ConnectionOptionsRedshiftPostToJSON,
} from './ConnectionOptionsRedshiftPost';
import {
    ConnectionOptionsS3CsvPost,
    ConnectionOptionsS3CsvPostFromJSON,
    ConnectionOptionsS3CsvPostFromJSONTyped,
    ConnectionOptionsS3CsvPostToJSON,
} from './ConnectionOptionsS3CsvPost';
import {
    ConnectionOptionsSnowflakePost,
    ConnectionOptionsSnowflakePostFromJSON,
    ConnectionOptionsSnowflakePostFromJSONTyped,
    ConnectionOptionsSnowflakePostToJSON,
} from './ConnectionOptionsSnowflakePost';

/**
 * @type ConnectionOptionsPost
 * The connection-specific options. These vary by connection type.
 * @export
 */
export type ConnectionOptionsPost = { type: 'azure_sql_server' } & ConnectionOptionsAzureSqlServerPost | { type: 'bigquery' } & ConnectionOptionsBigQueryPost | { type: 'classic' } & ConnectionOptionsClassicPost | { type: 'redshift' } & ConnectionOptionsRedshiftPost | { type: 's3_csv' } & ConnectionOptionsS3CsvPost | { type: 'snowflake' } & ConnectionOptionsSnowflakePost;

export function ConnectionOptionsPostFromJSON(json: any): ConnectionOptionsPost {
    return ConnectionOptionsPostFromJSONTyped(json, false);
}

export function ConnectionOptionsPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionOptionsPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'azure_sql_server':
            return {...ConnectionOptionsAzureSqlServerPostFromJSONTyped(json, true), type: 'azure_sql_server'};
        case 'bigquery':
            return {...ConnectionOptionsBigQueryPostFromJSONTyped(json, true), type: 'bigquery'};
        case 'classic':
            return {...ConnectionOptionsClassicPostFromJSONTyped(json, true), type: 'classic'};
        case 'redshift':
            return {...ConnectionOptionsRedshiftPostFromJSONTyped(json, true), type: 'redshift'};
        case 's3_csv':
            return {...ConnectionOptionsS3CsvPostFromJSONTyped(json, true), type: 's3_csv'};
        case 'snowflake':
            return {...ConnectionOptionsSnowflakePostFromJSONTyped(json, true), type: 'snowflake'};
        default:
            throw new Error(`No variant of ConnectionOptionsPost exists with 'type=${json['type']}'`);
    }
}

export function ConnectionOptionsPostToJSON(value?: ConnectionOptionsPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'azure_sql_server':
            return ConnectionOptionsAzureSqlServerPostToJSON(value);
        case 'bigquery':
            return ConnectionOptionsBigQueryPostToJSON(value);
        case 'classic':
            return ConnectionOptionsClassicPostToJSON(value);
        case 'redshift':
            return ConnectionOptionsRedshiftPostToJSON(value);
        case 's3_csv':
            return ConnectionOptionsS3CsvPostToJSON(value);
        case 'snowflake':
            return ConnectionOptionsSnowflakePostToJSON(value);
        default:
            throw new Error(`No variant of ConnectionOptionsPost exists with 'type=${value['type']}'`);
    }
}

