/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Dataset,
    DatasetFromJSON,
    DatasetToJSON,
    DatasetPost,
    DatasetPostFromJSON,
    DatasetPostToJSON,
} from '../models';

export interface CreateDatasetRequest {
    datasetFields: DatasetPost;
}

export interface GetDatasetRequest {
    datasetId: string;
}

export interface UpdateDatasetRequest {
    datasetId: string;
    datasetFields: object;
}

/**
 * 
 */
export class DatasetsApi extends runtime.BaseAPI {

    /**
     * Create a new dataset
     * Create dataset
     */
    private async createDatasetRaw(requestParameters: CreateDatasetRequest, ): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters.datasetFields === null || requestParameters.datasetFields === undefined) {
            throw new runtime.RequiredError('datasetFields','Required parameter requestParameters.datasetFields was null or undefined when calling createDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datasets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DatasetPostToJSON(requestParameters.datasetFields),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Create a new dataset
     * Create dataset
     */
    async createDataset(datasetFields: DatasetPost, ): Promise<Dataset> {
        const response = await this.createDatasetRaw({ datasetFields: datasetFields }, );
        return await response.value();
    }

    /**
     * Retrieve details on a specific dataset
     * Retrieve a dataset
     */
    private async getDatasetRaw(requestParameters: GetDatasetRequest, ): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling getDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/datasets/{dataset_id}`.replace(`{${"dataset_id"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Retrieve details on a specific dataset
     * Retrieve a dataset
     */
    async getDataset(datasetId: string, ): Promise<Dataset> {
        const response = await this.getDatasetRaw({ datasetId: datasetId }, );
        return await response.value();
    }

    /**
     * Get a list of the datasets available in the developer’s account
     * List datasets
     */
    private async getDatasetsRaw(): Promise<runtime.ApiResponse<Array<Dataset>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/datasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetFromJSON));
    }

    /**
     * Get a list of the datasets available in the developer’s account
     * List datasets
     */
    async getDatasets(): Promise<Array<Dataset>> {
        const response = await this.getDatasetsRaw();
        return await response.value();
    }

    /**
     * Update an existing dataset
     * Update dataset
     */
    private async updateDatasetRaw(requestParameters: UpdateDatasetRequest, ): Promise<runtime.ApiResponse<Dataset>> {
        if (requestParameters.datasetId === null || requestParameters.datasetId === undefined) {
            throw new runtime.RequiredError('datasetId','Required parameter requestParameters.datasetId was null or undefined when calling updateDataset.');
        }

        if (requestParameters.datasetFields === null || requestParameters.datasetFields === undefined) {
            throw new runtime.RequiredError('datasetFields','Required parameter requestParameters.datasetFields was null or undefined when calling updateDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json+merge-patch';

        const response = await this.request({
            path: `/datasets/{dataset_id}`.replace(`{${"dataset_id"}}`, encodeURIComponent(String(requestParameters.datasetId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.datasetFields as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DatasetFromJSON(jsonValue));
    }

    /**
     * Update an existing dataset
     * Update dataset
     */
    async updateDataset(datasetId: string, datasetFields: object, ): Promise<Dataset> {
        const response = await this.updateDatasetRaw({ datasetId: datasetId, datasetFields: datasetFields }, );
        return await response.value();
    }

}
