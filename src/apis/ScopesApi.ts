/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Scope,
    ScopeFromJSON,
    ScopeToJSON,
    ScopePost,
    ScopePostFromJSON,
    ScopePostToJSON,
} from '../models';

export interface CreateScopeRequest {
    scopeFields: ScopePost;
}

export interface DeleteScopeRequest {
    scopeId: string;
}

export interface GetScopeRequest {
    scopeId: string;
}

export interface UpdateScopeRequest {
    scopeId: string;
    body: object;
}

/**
 * 
 */
export class ScopesApi extends runtime.BaseAPI {

    /**
     * Add a new scope
     * Create scope
     */
    private async createScopeRaw(requestParameters: CreateScopeRequest, ): Promise<runtime.ApiResponse<Scope>> {
        if (requestParameters.scopeFields === null || requestParameters.scopeFields === undefined) {
            throw new runtime.RequiredError('scopeFields','Required parameter requestParameters.scopeFields was null or undefined when calling createScope.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scopes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScopePostToJSON(requestParameters.scopeFields),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeFromJSON(jsonValue));
    }

    /**
     * Add a new scope
     * Create scope
     */
    async createScope(scopeFields: ScopePost, ): Promise<Scope> {
        const response = await this.createScopeRaw({ scopeFields: scopeFields }, );
        return await response.value();
    }

    /**
     * Delete a scope
     */
    private async deleteScopeRaw(requestParameters: DeleteScopeRequest, ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
            throw new runtime.RequiredError('scopeId','Required parameter requestParameters.scopeId was null or undefined when calling deleteScope.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scopes/{scope_id}`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a scope
     */
    async deleteScope(scopeId: string, ): Promise<void> {
        await this.deleteScopeRaw({ scopeId: scopeId }, );
    }

    /**
     * Get details on a specific scope
     * Retrieve a scope
     */
    private async getScopeRaw(requestParameters: GetScopeRequest, ): Promise<runtime.ApiResponse<Scope>> {
        if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
            throw new runtime.RequiredError('scopeId','Required parameter requestParameters.scopeId was null or undefined when calling getScope.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scopes/{scope_id}`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeFromJSON(jsonValue));
    }

    /**
     * Get details on a specific scope
     * Retrieve a scope
     */
    async getScope(scopeId: string, ): Promise<Scope> {
        const response = await this.getScopeRaw({ scopeId: scopeId }, );
        return await response.value();
    }

    /**
     * Get a list of scopes defined on the account
     * List scopes
     */
    private async getScopesRaw(): Promise<runtime.ApiResponse<Array<Scope>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scopes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScopeFromJSON));
    }

    /**
     * Get a list of scopes defined on the account
     * List scopes
     */
    async getScopes(): Promise<Array<Scope>> {
        const response = await this.getScopesRaw();
        return await response.value();
    }

    /**
     * Update the configuration of a scope.
     * Update a scope
     */
    private async updateScopeRaw(requestParameters: UpdateScopeRequest, ): Promise<runtime.ApiResponse<Scope>> {
        if (requestParameters.scopeId === null || requestParameters.scopeId === undefined) {
            throw new runtime.RequiredError('scopeId','Required parameter requestParameters.scopeId was null or undefined when calling updateScope.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateScope.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json+merge-patch';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scopes/{scope_id}`.replace(`{${"scope_id"}}`, encodeURIComponent(String(requestParameters.scopeId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeFromJSON(jsonValue));
    }

    /**
     * Update the configuration of a scope.
     * Update a scope
     */
    async updateScope(scopeId: string, body: object, ): Promise<Scope> {
        const response = await this.updateScopeRaw({ scopeId: scopeId, body: body }, );
        return await response.value();
    }

}
