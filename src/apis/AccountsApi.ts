/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
    AccountMergePatch,
    AccountMergePatchFromJSON,
    AccountMergePatchToJSON,
    AccountPost,
    AccountPostFromJSON,
    AccountPostToJSON,
} from '../models';

export interface CreateAccountRequest {
    accountFields: AccountPost;
}

export interface DeleteAccountRequest {
    accountId: string;
}

export interface GetAccountRequest {
    accountId: string;
}

export interface UpdateAccountRequest {
    accountId: string;
    accountMergePatch: AccountMergePatch;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Create a subaccount. 
     * Create account
     */
    private async createAccountRaw(requestParameters: CreateAccountRequest, ): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.accountFields === null || requestParameters.accountFields === undefined) {
            throw new runtime.RequiredError('accountFields','Required parameter requestParameters.accountFields was null or undefined when calling createAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountPostToJSON(requestParameters.accountFields),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Create a subaccount. 
     * Create account
     */
    async createAccount(accountFields: AccountPost, ): Promise<Account> {
        const response = await this.createAccountRaw({ accountFields: accountFields }, );
        return await response.value();
    }

    /**
     * Request an account deletion. In 24 hours, the account and all resources associated with it will be deleted. Contact support within the 24 hour window if you wish to reverse this.
     * Delete an account
     */
    private async deleteAccountRaw(requestParameters: DeleteAccountRequest, ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request an account deletion. In 24 hours, the account and all resources associated with it will be deleted. Contact support within the 24 hour window if you wish to reverse this.
     * Delete an account
     */
    async deleteAccount(accountId: string, ): Promise<void> {
        await this.deleteAccountRaw({ accountId: accountId }, );
    }

    /**
     * Get details on a specific account. This must be an account controlled by your API key.
     * Retrieve an account
     */
    private async getAccountRaw(requestParameters: GetAccountRequest, ): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Get details on a specific account. This must be an account controlled by your API key.
     * Retrieve an account
     */
    async getAccount(accountId: string, ): Promise<Account> {
        const response = await this.getAccountRaw({ accountId: accountId }, );
        return await response.value();
    }

    /**
     * Get a list of accounts defined on the account
     * List accounts
     */
    private async getAccountsRaw(): Promise<runtime.ApiResponse<Array<Account>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountFromJSON));
    }

    /**
     * Get a list of accounts defined on the account
     * List accounts
     */
    async getAccounts(): Promise<Array<Account>> {
        const response = await this.getAccountsRaw();
        return await response.value();
    }

    /**
     * Get details on the current account, as identified by the API key
     * Retrieve current account
     */
    private async getCurrentAccountRaw(): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Get details on the current account, as identified by the API key
     * Retrieve current account
     */
    async getCurrentAccount(): Promise<Account> {
        const response = await this.getCurrentAccountRaw();
        return await response.value();
    }

    /**
     * Update the configuration of an account.
     * Update an account
     */
    private async updateAccountRaw(requestParameters: UpdateAccountRequest, ): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccount.');
        }

        if (requestParameters.accountMergePatch === null || requestParameters.accountMergePatch === undefined) {
            throw new runtime.RequiredError('accountMergePatch','Required parameter requestParameters.accountMergePatch was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json+merge-patch';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AccountMergePatchToJSON(requestParameters.accountMergePatch),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Update the configuration of an account.
     * Update an account
     */
    async updateAccount(accountId: string, accountMergePatch: AccountMergePatch, ): Promise<Account> {
        const response = await this.updateAccountRaw({ accountId: accountId, accountMergePatch: accountMergePatch }, );
        return await response.value();
    }

}
