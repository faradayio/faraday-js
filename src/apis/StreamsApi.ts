/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) API makes it easy to predict customer behavior programmatically.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@faraday.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Stream,
    StreamFromJSON,
    StreamToJSON,
} from '../models';

export interface DeleteStreamRequest {
    streamIdOrName: string;
}

export interface FindOrCreateStreamRequest {
    streamName: string;
}

export interface GetStreamRequest {
    streamIdOrName: string;
}

/**
 * 
 */
export class StreamsApi extends runtime.BaseAPI {

    /**
     * Delete a stream
     */
    private async deleteStreamRaw(requestParameters: DeleteStreamRequest, ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.streamIdOrName === null || requestParameters.streamIdOrName === undefined) {
            throw new runtime.RequiredError('streamIdOrName','Required parameter requestParameters.streamIdOrName was null or undefined when calling deleteStream.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/streams/{stream_id_or_name}`.replace(`{${"stream_id_or_name"}}`, encodeURIComponent(String(requestParameters.streamIdOrName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a stream
     */
    async deleteStream(streamIdOrName: string, ): Promise<void> {
        await this.deleteStreamRaw({ streamIdOrName: streamIdOrName }, );
    }

    /**
     * Look up (or create) an event stream by name.
     * Create a stream
     */
    private async findOrCreateStreamRaw(requestParameters: FindOrCreateStreamRequest, ): Promise<runtime.ApiResponse<Stream>> {
        if (requestParameters.streamName === null || requestParameters.streamName === undefined) {
            throw new runtime.RequiredError('streamName','Required parameter requestParameters.streamName was null or undefined when calling findOrCreateStream.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/streams/{stream_name}`.replace(`{${"stream_name"}}`, encodeURIComponent(String(requestParameters.streamName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamFromJSON(jsonValue));
    }

    /**
     * Look up (or create) an event stream by name.
     * Create a stream
     */
    async findOrCreateStream(streamName: string, ): Promise<Stream> {
        const response = await this.findOrCreateStreamRaw({ streamName: streamName }, );
        return await response.value();
    }

    /**
     * Look up a specific event stream.
     * Retrieve a stream
     */
    private async getStreamRaw(requestParameters: GetStreamRequest, ): Promise<runtime.ApiResponse<Stream>> {
        if (requestParameters.streamIdOrName === null || requestParameters.streamIdOrName === undefined) {
            throw new runtime.RequiredError('streamIdOrName','Required parameter requestParameters.streamIdOrName was null or undefined when calling getStream.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/streams/{stream_id_or_name}`.replace(`{${"stream_id_or_name"}}`, encodeURIComponent(String(requestParameters.streamIdOrName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamFromJSON(jsonValue));
    }

    /**
     * Look up a specific event stream.
     * Retrieve a stream
     */
    async getStream(streamIdOrName: string, ): Promise<Stream> {
        const response = await this.getStreamRaw({ streamIdOrName: streamIdOrName }, );
        return await response.value();
    }

    /**
     * List all streams present on the account
     * List streams
     */
    private async getStreamsRaw(): Promise<runtime.ApiResponse<Array<Stream>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/streams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamFromJSON));
    }

    /**
     * List all streams present on the account
     * List streams
     */
    async getStreams(): Promise<Array<Stream>> {
        const response = await this.getStreamsRaw();
        return await response.value();
    }

}
