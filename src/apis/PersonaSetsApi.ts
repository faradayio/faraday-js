/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PersonaSet,
    PersonaSetFromJSON,
    PersonaSetToJSON,
    PersonaSetPost,
    PersonaSetPostFromJSON,
    PersonaSetPostToJSON,
} from '../models';

export interface CreatePersonaSetRequest {
    personaSetPost: PersonaSetPost;
}

export interface GetPersonaSetRequest {
    personaSetId: string;
}

/**
 * 
 */
export class PersonaSetsApi extends runtime.BaseAPI {

    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    private async createPersonaSetRaw(requestParameters: CreatePersonaSetRequest, ): Promise<runtime.ApiResponse<PersonaSet>> {
        if (requestParameters.personaSetPost === null || requestParameters.personaSetPost === undefined) {
            throw new runtime.RequiredError('personaSetPost','Required parameter requestParameters.personaSetPost was null or undefined when calling createPersonaSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/persona_sets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonaSetPostToJSON(requestParameters.personaSetPost),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonaSetFromJSON(jsonValue));
    }

    /**
     * Invoke the build of a new persona set for a given cohort
     * Create persona set
     */
    async createPersonaSet(personaSetPost: PersonaSetPost, ): Promise<PersonaSet> {
        const response = await this.createPersonaSetRaw({ personaSetPost: personaSetPost }, );
        return await response.value();
    }

    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    private async getPersonaSetRaw(requestParameters: GetPersonaSetRequest, ): Promise<runtime.ApiResponse<PersonaSet>> {
        if (requestParameters.personaSetId === null || requestParameters.personaSetId === undefined) {
            throw new runtime.RequiredError('personaSetId','Required parameter requestParameters.personaSetId was null or undefined when calling getPersonaSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/persona_sets/{persona_set_id}`.replace(`{${"persona_set_id"}}`, encodeURIComponent(String(requestParameters.personaSetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonaSetFromJSON(jsonValue));
    }

    /**
     * Details on a specific persona set, including details on all of its constituent personas
     * Retrieve a persona set
     */
    async getPersonaSet(personaSetId: string, ): Promise<PersonaSet> {
        const response = await this.getPersonaSetRaw({ personaSetId: personaSetId }, );
        return await response.value();
    }

    /**
     * A list of available persona sets
     * List persona sets
     */
    private async getPersonaSetsRaw(): Promise<runtime.ApiResponse<Array<PersonaSet>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/persona_sets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonaSetFromJSON));
    }

    /**
     * A list of available persona sets
     * List persona sets
     */
    async getPersonaSets(): Promise<Array<PersonaSet>> {
        const response = await this.getPersonaSetsRaw();
        return await response.value();
    }

}
