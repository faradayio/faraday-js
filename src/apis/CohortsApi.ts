/* tslint:disable */
/* eslint-disable */
/**
 * Faraday REST API
 * The [Faraday](https://faraday.ai) SDK makes it easy to predict customer behavior using a simple API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Cohort,
    CohortFromJSON,
    CohortToJSON,
    CohortPost,
    CohortPostFromJSON,
    CohortPostToJSON,
} from '../models';

export interface CreateCohortRequest {
    cohortFields: CohortPost;
}

export interface GetCohortRequest {
    cohortId: string;
}

/**
 * 
 */
export class CohortsApi extends runtime.BaseAPI {

    /**
     * Add a new cohort (defined as people who have made qualifying emissions of certain events)
     * Create cohort
     */
    private async createCohortRaw(requestParameters: CreateCohortRequest, ): Promise<runtime.ApiResponse<Cohort>> {
        if (requestParameters.cohortFields === null || requestParameters.cohortFields === undefined) {
            throw new runtime.RequiredError('cohortFields','Required parameter requestParameters.cohortFields was null or undefined when calling createCohort.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cohorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CohortPostToJSON(requestParameters.cohortFields),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CohortFromJSON(jsonValue));
    }

    /**
     * Add a new cohort (defined as people who have made qualifying emissions of certain events)
     * Create cohort
     */
    async createCohort(cohortFields: CohortPost, ): Promise<Cohort> {
        const response = await this.createCohortRaw({ cohortFields: cohortFields }, );
        return await response.value();
    }

    /**
     * Get details on a specific cohort
     * Retrieve a cohort
     */
    private async getCohortRaw(requestParameters: GetCohortRequest, ): Promise<runtime.ApiResponse<Cohort>> {
        if (requestParameters.cohortId === null || requestParameters.cohortId === undefined) {
            throw new runtime.RequiredError('cohortId','Required parameter requestParameters.cohortId was null or undefined when calling getCohort.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cohorts/{cohort_id}`.replace(`{${"cohort_id"}}`, encodeURIComponent(String(requestParameters.cohortId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CohortFromJSON(jsonValue));
    }

    /**
     * Get details on a specific cohort
     * Retrieve a cohort
     */
    async getCohort(cohortId: string, ): Promise<Cohort> {
        const response = await this.getCohortRaw({ cohortId: cohortId }, );
        return await response.value();
    }

    /**
     * Get a list of cohorts defined on the account
     * List cohorts
     */
    private async getCohortsRaw(): Promise<runtime.ApiResponse<Array<Cohort>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cohorts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CohortFromJSON));
    }

    /**
     * Get a list of cohorts defined on the account
     * List cohorts
     */
    async getCohorts(): Promise<Array<Cohort>> {
        const response = await this.getCohortsRaw();
        return await response.value();
    }

}
